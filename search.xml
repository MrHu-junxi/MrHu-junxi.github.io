<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue--组件自定义事件</title>
      <link href="/2025/02/19/components/Vue--%E7%BB%84%E4%BB%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/"/>
      <url>/2025/02/19/components/Vue--%E7%BB%84%E4%BB%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>本文档编写参考如下教程</p></div><ul><li><p>尚硅谷VUE讲师张天禹：<img src="https://www.bilibili.com/video/BV1Zy4y1K7SH/?spm_id_from=333.337.search-card.all.click" alt="尚硅谷Vue2.0+Vue3.0全套教程丨vue.js从入门到精通"></p></li><li><p>博客园刘二水帖子：<img src="https://www.cnblogs.com/wzzzj/p/18039997" alt="Vue CLI 系列之（十一）组件自定义事件"></p></li><li><p>博客园小懵丹儿帖子：<img src="https://www.cnblogs.com/MDRY/p/16631448.html" alt="vue——组件自定义事件"></p></li></ul><h2 id="什么是组件自定义事件"><a href="#什么是组件自定义事件" class="headerlink" title="什么是组件自定义事件"></a>什么是组件自定义事件</h2><blockquote><p>我们都知道JS有自己的内置事件,如:’click’,’keyUp’,’change’事件。自定义事件其实就是指自己定义的事件,包含事件名,事件回调等,定义好之后给组件使用。组件自定义事件也是一种组件之间通信的方式,适用于子组件==&gt;父组件传递数据</p></blockquote><h2 id="子组件怎么给父组件传值？"><a href="#子组件怎么给父组件传值？" class="headerlink" title="子组件怎么给父组件传值？"></a>子组件怎么给父组件传值？</h2><ol><li>通过<code>props</code>配置项传值</li></ol><p>1) 先找到父组件,定义一个接收子组件数据的函数,设置参数,并存入我们的变量中。</p><p>2) 通过在父组件内使用子组件,将函数传递给子组件,如:<code>&lt;Student :getSchoolName=&quot;getSchoolName&quot; &quot;&gt;&lt;/Student&gt;</code></p><pre><code>*** 注意：因为我们这边传入的是一个函数,所以要使用一个冒汗去识别函数 ***</code></pre><p>3) 进入子组件,首先就是需要使用<code>props</code>配置项接收函数。接收以后就可以在子组件内调用函数（通常绑定一个事件,触发以后调用函数,传递参数）,并将数据作为参数设置,父组件内同样也能收到这些参数</p><p>4) 简化代码</p><ul><li><p>父组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">:getStudentName</span>=<span class="string">&quot;getStudentName&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">getStudentName</span>(<span class="params">name</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;script/&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button @click=&quot;sendNameToSchool&quot; &gt;点击发送数据&lt;button/&gt;</span><br><span class="line">    &lt;div/&gt;</span><br><span class="line">&lt;template/&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name: &#x27;江西&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props:[&#x27;getStudentName&#x27;,],</span><br><span class="line">    methods:&#123;</span><br><span class="line">        sendNameToSchool()&#123;</span><br><span class="line">            this.getStudentName(this.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;script/&gt;</span><br></pre></td></tr></table></figure></li></ul><p>5) <code>props</code>子组件给父组件传递数据的过程就是：子组件通过调用父组件传递过来接收数据的函数,实现子组件往父组件传递数据。</p><ol><li>组件自定义事件实现子组件==&gt;父组件传值</li></ol><p>1) 组件自定义事件需要用到<code>v-on</code>或者写成<code>@</code>,<code>v-on</code>在谁的身长,就是给谁绑定组件自定义事件</p><p>2) 在父组件内,给子组件绑定一个自定义事件,并设置一个回调函数,接收数据参数</p><p>3) 子组件内,通过<code>$emit()</code>触发事件,并且将数据作为参数传递</p><p><strong><em> $emit()接收多个参数,第一个参数是触发的事件名,后面的参数都是需要传递的数据 </em></strong></p><p>4) 简化代码</p><ul><li><p>父组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">v-on:getStudentName</span>=<span class="string">&quot;getStudentName&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">getStudentName</span>(<span class="params">name,...prarams</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(name,...prarams)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;script/&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;button @click=&quot;sendNameToSchool&quot; &gt;&lt;button /&gt;</span><br><span class="line">    &lt;div/&gt;</span><br><span class="line">&lt;template/&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        sendNameToSchool()&#123;</span><br><span class="line">            this.$emit(&#x27;getStudentName&#x27;,name,x,y,z)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;script/&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong><em> 这边我们传递了多个参数,可以使用ES6中的…prarams接收,…prarams意为扩展运算符,它会将我们没有接收的参数作为一个数组全部保存在里面【ES6】 </em></strong></p><ol><li>通过<code>ref</code>实现子组件往父组件传递数据</li></ol><p>1) ref相当于一个组件标识符,通过该组件标识符可以直接拿到组件实例对象,而自定义事件就是绑定在组件实例对象上的</p><p>2) 在父组件内,给子组件添加ref属性,并且设置一个类似于id的值,这样我们就可以通过<code>this.$refs.值</code>去找到这个组件,然后通过<code>.$on</code>去给这个组件绑定自定义事件以及设置回调函数。</p><p>3) 简化代码</p><ul><li>父组件：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">ref</span>=<span class="string">&quot;student&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">getStudentName</span>(<span class="params">name,...prarams</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(name,...prarams)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 绑定了getStudentName事件</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&#x27;getStudentName&#x27;</span>,<span class="variable language_">this</span>.<span class="title function_">getStudentName</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;script/&gt;</span><br></pre></td></tr></table></figure></li></ul><p>4) 子组件与之前是差不多的,这种方法与之只是绑定事件不一样,触发事件的方式并没有区别</p><pre><code>*** 如果希望事件只被触发一次,可以把`$on`改为`$once`类似于事件修饰词 ***</code></pre><h2 id="给组件实例对象解绑自定义事件"><a href="#给组件实例对象解绑自定义事件" class="headerlink" title="给组件实例对象解绑自定义事件"></a>给组件实例对象解绑自定义事件</h2><ul><li>如果一个组件实例对象上的某个自定义事件不在使用,就需要进行解绑</li></ul><p>1) 使用<code>$off()</code>方法。给哪个组件绑的事件就需要找哪个组件进行解绑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">unbind</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//  解绑一个自定义事件</span></span><br><span class="line">        <span class="variable language_">this</span>.$off(<span class="string">&#x27;getStudentName&#x27;</span>)</span><br><span class="line">        <span class="comment">// 解绑多个自定义事件</span></span><br><span class="line">        <span class="variable language_">this</span>.$off([<span class="string">&#x27;getStudentName&#x27;</span>,<span class="string">&#x27;getSchoolName&#x27;</span>])</span><br><span class="line">        <span class="comment">// 解绑所有自定义事件</span></span><br><span class="line">        <span class="variable language_">this</span>.$off()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) 注意点：</p><ul><li>只要某个事件被触发就会调用指定的函数。</li><li>vm和vc都能使用生命周期钩子。</li><li>一个组件如果被销毁了,那么该组件身上的所有自定义事件也就失效了</li><li>如果vm被销毁了,那么vm的所有子组件也就都销毁了,因此子组件身上的所有自定义事件也就失效了</li></ul><h2 id="两个注意点："><a href="#两个注意点：" class="headerlink" title="两个注意点："></a>两个注意点：</h2><ol><li><p>使用ref绑定自定义事件时,不能直接将自定义事件的回调函数定义写在<code>this.$refs.student.$on</code>方法的参数上,因为这样this的指向就会出问题,一般会触发的事件【this.$emit()在哪个组件内】,事件回调函数中的this就指向谁。但是我们可以将回调函数写为箭头函数,这样this的指向是正确的</p></li><li><p><strong>组件默认使用自定义事件,无法使用DOM事件</strong>。组件标签默认标注的事件名都是自定义事件,哪怕事件名与原生DOM事件名相同,vue也会将那当作自定义事件处理。但是我们可以通过<code>native</code>【原生的】修饰符,给组件标签绑定上原生DOM事件,使用native修饰符后,事件相当于绑定在了最外层的盒子上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Student</span> @click.<span class="property">native</span>=<span class="string">&quot;sendNameToSchool&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>组件自定义事件:一种组件间通信的方式,适用于：子组件往父组件传递数据【在父组件中给子组件添加自定义事件,子组件触发自定义事件】</p></li><li><p>使用场景：A是父组件,B是子组件,那么要在A中给B绑定自定义事件（事件的回调在A中）</p></li><li><p>绑定自定义事件的方式：</p><ul><li>第一种方式：在父组件中：<code>v-on:getStudentName=&quot;getStudentName&quot;</code></li><li>第二种方式：在父组件中：<code>this.$refs.student.$on()</code></li></ul></li><li><p>解绑自定义事件：<code>this.$off(&#39;student&#39;)</code></p></li><li><p>组件上也可以使用原生DOM事件,需要使用<code>native</code>修饰符</p></li><li><p>通过<code>this.$refs.student.$on(&#39;getStudentName&#39;,回调函数)</code>绑定自定义事件时,回调要么配置在methods中,要么使用箭头函数,否则this指向会出问题</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器的本地存储</title>
      <link href="/2025/02/16/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
      <url>/2025/02/16/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器的本地存储"><a href="#浏览器的本地存储" class="headerlink" title="浏览器的本地存储"></a>浏览器的本地存储</h2><blockquote><p>在浏览网站时,并不是所有数据都是存储在数据库内的,有些数据也会被浏览器存储在我们的本地,这就是浏览器的本地存储</p></blockquote><hr><h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><blockquote><p>LocalStorage是Html5的新特性。有些时候我们本地存储时,需要存储的信息较大,Cookie无法满足我们的需求,这时候就可以使用LocalStorage进行本地存储</p></blockquote><ol><li><p>LocalStorage的优点</p><ul><li>LocalStorage的存储大小一把为5MB,可以存储更多的信息</li><li>LocalStorage是持久存储,并不会随着页面的关闭就消失,除非主动清理,不然会一直存在</li><li>仅存储在本地,不像Cookie那样每次HTTP请求都会被携带</li></ul></li><li><p>LocalStorage的缺点</p><ul><li>存在浏览器兼容问题</li><li>如果浏览器设置为隐私模式,那我们将无法读取LocalStorage</li><li>LocalStorage受到同源策略的限制,即端口,协议,主机地址有任何不相同,都不会访问</li></ul></li><li><p>常用API</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据到LocalStorage</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从LocalStorage获取数据</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;key&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从LocalStorage删除数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;key&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从LocalStorage清空所有数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取某个索引的key</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">key</span>(index)</span><br></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>存储到LocalStorage的数据key,value都必须是字符串形式,如果value不是字符串类型,那么存储到本地时会自动调用toString()方法转换为字符串类型。如果要将对象类型存储到本地,需要先调用<code>JSON.stringify()</code>方法将对象转换为字符串,读取时在调用<code>JSON.parse()</code>方法将字符串转换为对象类型</li></ul></li><li><p>使用场景</p><ul><li>有些网站有默认的换肤功能,这时可以将换肤的信息存储在本地,当需要换肤的时候,直接操作LocalStorage即可</li><li>在网站中用户浏览信息也会存储在LocalStorage中,还有网站的不常变动的个人信息也可以存储在本地的localStorage中</li></ul></li></ol><h2 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h2><blockquote><p>SessionStorage和LocalStorage都是在Html5提出的储存方案,SessionStorage主要用于临时保存同意窗口的数据,刷新页面时不会删除,但是关闭窗口之后将会删除这些数据</p></blockquote><ol><li><p>SessionStorage和localStorage的对比:</p><ul><li>两者都是在本地进行数据存储</li><li>SessionStorage也有同源策略的限制,但SessionStorage更为严格,SessionStorage只有在同一浏览器的同一窗口下才能共享</li><li>两者都无法被爬虫爬取</li></ul></li><li><p>SessionStorage常用API</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;key&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;key&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空数据</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">clear</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取某个key的索引</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">key</span>(index)</span><br></pre></td></tr></table></figure></li><li><p>使用场景</p><ul><li>由于SessionStorage具有时效性，所以可以用来存储一些网站的游客登录的信息，还有临时的浏览记录的信息。当关闭网站之后，这些信息也就随之消除了。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue小案例 -- 学习Vue</title>
      <link href="/2025/02/11/Vue%E5%B0%8F%E6%A1%88%E4%BE%8B_Todo-List/"/>
      <url>/2025/02/11/Vue%E5%B0%8F%E6%A1%88%E4%BE%8B_Todo-List/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>这边站长带大家写一个Vue简单小案例,让大家能更了解组件化编码流程</p></blockquote><h2 id="组件化编码流程-初学者通用"><a href="#组件化编码流程-初学者通用" class="headerlink" title="组件化编码流程(初学者通用)"></a>组件化编码流程(初学者通用)</h2><ol><li>实现静态组件:抽取组件, 使用组件实现静态页面效果</li><li>展示动态数据:<ol><li>数据的类型,名称是什么?</li><li>数据保存在哪个组件?</li></ol></li><li>交互,从绑定事件监听开始</li></ol><h2 id="创建基本的Vue框架"><a href="#创建基本的Vue框架" class="headerlink" title="创建基本的Vue框架"></a>创建基本的Vue框架</h2><ol><li>安装Vue脚手架</li><li><p>在终端输入以下命令,生成Vue基本框架</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create 项目名</span><br></pre></td></tr></table></figure></li><li><p>关闭语法检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lintOnSave:false</span><br></pre></td></tr></table></figure></li><li><p>删除脚手架自带的组件,以及App内使用到组件的地方</p></li></ol><h2 id="实现静态组件"><a href="#实现静态组件" class="headerlink" title="实现静态组件"></a>实现静态组件</h2><blockquote><p>按照功能将项目拆分为几个组件。其实关于拆分组件,没有标准答案,我拆四个,你拆四十个,功能动能完成,只是合不合理。从初学者到高手就是不合理到合理的过程。这边我们就拆成四个组件。</p></blockquote><ol><li><code>MyHeader.vue</code>组件:添加待办事项功能</li><li><code>List.vue</code>组件:展示待办事项功能<ol><li><code>Item.vue</code>组件:单个代办事项组件,选择或删除功能</li></ol></li><li><code>MyFooter.vue</code>组件:全选功能</li></ol><blockquote><p>创建以上四个组件,添加name属性为对应的名字,在App组件内引入,并且注册组件。<strong><em>Item组件应该是List的子组件,所以不用在App组件内引入,只需要在List内引入就行</em></strong></p></blockquote><h3 id="App-vue组件静态页面编写"><a href="#App-vue组件静态页面编写" class="headerlink" title="App.vue组件静态页面编写"></a><code>App.vue</code>组件静态页面编写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyHeader</span>&gt;</span><span class="tag">&lt;/<span class="name">MyHeader</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">List</span>&gt;</span><span class="tag">&lt;/<span class="name">List</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyFooter</span>&gt;</span><span class="tag">&lt;/<span class="name">MyFooter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">MyHeader</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyHeader.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">MyFooter</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyFooter.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;./components/List.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">MyHeader</span>,<span class="title class_">MyFooter</span>,<span class="title class_">List</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="comment">/*base*/</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">body</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.btn</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">display</span>: inline-block;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">12px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">vertical-align</span>: middle;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.05</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.btn-danger</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: <span class="number">#da4f49</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#bd362f</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.btn-danger</span><span class="selector-pseudo">:hover</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: <span class="number">#bd362f</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.btn</span><span class="selector-pseudo">:focus</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">outline</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.todo-container</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">600px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.todo-container</span> <span class="selector-class">.todo-wrap</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="MyHeader-vue组件静态页面编写"><a href="#MyHeader-vue组件静态页面编写" class="headerlink" title="MyHeader.vue组件静态页面编写"></a><code>MyHeader.vue</code>组件静态页面编写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入你的任务名称，按回车键确认&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>:<span class="string">&#x27;MyHeader&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="comment">/*header*/</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.todo-header</span> <span class="selector-tag">input</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">560px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">28px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">7px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.todo-header</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">outline</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">82</span>, <span class="number">168</span>, <span class="number">236</span>, <span class="number">0.8</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.075</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">82</span>, <span class="number">168</span>, <span class="number">236</span>, <span class="number">0.6</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="MyFooter-vue组件静态页面编写"><a href="#MyFooter-vue组件静态页面编写" class="headerlink" title="MyFooter.vue组件静态页面编写"></a><code>MyFooter.vue</code>组件静态页面编写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>已完成0<span class="tag">&lt;/<span class="name">span</span>&gt;</span> / 全部2</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>清除已完成任务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>:<span class="string">&#x27;MyFooter&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="comment">/*footer*/</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.todo-footer</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">40px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding-left</span>: <span class="number">6px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.todo-footer</span> <span class="selector-tag">label</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">display</span>: inline-block;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.todo-footer</span> <span class="selector-tag">label</span> <span class="selector-tag">input</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">top</span>: -<span class="number">1px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">vertical-align</span>: middle;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.todo-footer</span> <span class="selector-tag">button</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">float</span>: right;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="List-vue组件静态页面编写"><a href="#List-vue组件静态页面编写" class="headerlink" title="List.vue组件静态页面编写"></a><code>List.vue</code>组件静态页面编写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Item</span>&gt;</span><span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Item</span> <span class="keyword">from</span> <span class="string">&#x27;./Item.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>:<span class="string">&#x27;List&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Item</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="comment">/*main*/</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.todo-main</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">0px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.todo-empty</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">40px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Item-vue组件静态页面编写"><a href="#Item-vue组件静态页面编写" class="headerlink" title="Item.vue组件静态页面编写"></a><code>Item.vue</code>组件静态页面编写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>:<span class="string">&#x27;Item&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="comment">/*item*/</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">li</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">list-style</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">36px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">line-height</span>: <span class="number">36px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">li</span> <span class="selector-tag">label</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">float</span>: left;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">li</span> <span class="selector-tag">label</span> <span class="selector-tag">li</span> <span class="selector-tag">input</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">vertical-align</span>: middle;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-right</span>: <span class="number">6px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">top</span>: -<span class="number">1px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">li</span> <span class="selector-tag">button</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">float</span>: right;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">display</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">li</span><span class="selector-pseudo">:before</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">content</span>: initial;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-bottom</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="展示动态数据"><a href="#展示动态数据" class="headerlink" title="展示动态数据"></a>展示动态数据</h2><blockquote><p>什么叫展示动态数据?其实就是将数据存起来,方便以后增删改查!!! <strong><em>其实像这种数据,一般都是使用数组对象类型储存,</em></strong> ,那么数据保存在哪个组件呢？这边我们就暂时先放在List组件里吧,因为是List需要使用数据嘛。</p></blockquote><ol><li>准备数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">todos</span>:[</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;抽烟&#x27;</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;喝酒&#x27;</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;烫头&#x27;</span>,<span class="attr">done</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li><p>有了数据,我们就可以通过v-for指令,根据数据遍历每一个Item组件。<strong><em>这边我们还需要在Item组件内使用数据,所以需要通过<code>props属性</code>,传递数据</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Item</span> <span class="attr">v-for</span>=<span class="string">&quot;todoObj in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todoObj.id&quot;</span> <span class="attr">:todo</span>=<span class="string">&quot;todoObj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>在Item组件内使用props属性接收数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;todo&#x27;</span>],</span><br></pre></td></tr></table></figure></li><li><p>通过接收的数据,将Item内的静态页面,改为动态</p></li></ol><blockquote><p>这边复选框有一个技巧。首先你得知道,复选框的选择与否在于有没有<code>checked</code>属性。如果有checked属性,就是勾选状态,反之则无。那么我们怎么动态决定一个属性有没有呢?其实只需要给属性添加<code>v-bind</code>指令,后面跟表达式就可以动态决定属性是否存在了,例如:<code>:checked=&quot;true&quot;</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">:checked</span>=<span class="string">&quot;todo.done&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; todo.title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="添加todo-待办事项-功能"><a href="#添加todo-待办事项-功能" class="headerlink" title="添加todo(待办事项)功能"></a>添加todo(待办事项)功能</h2><h3 id="获取用户输入值"><a href="#获取用户输入值" class="headerlink" title="获取用户输入值"></a>获取用户输入值</h3><ul><li>方式一:</li></ul><blockquote><p>方式一其实就是通过,监听键盘回车键按下,绑定事件,触发事件后获取用户输入的值</p></blockquote><ol><li><p>给input框添加回车抬起事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;请输入你的任务名称，按回车键确认&quot;</span> @keyup.<span class="property">enter</span>=<span class="string">&quot;add&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>方式二:</li></ul><blockquote><p>方式二的本质其实是声明一个数据,然后通过<code>v-model</code>指令动态绑定数据的值,这样数据的值就是用户输入的值,这两种方法随便用哪一种</p></blockquote><ol><li>声明数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>动态绑定<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;请输入你的任务名称，按回车键确认&quot;</span> v-model=<span class="string">&#x27;title&#x27;</span>/&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="将输入包装为对象-放入数组"><a href="#将输入包装为对象-放入数组" class="headerlink" title="将输入包装为对象,放入数组"></a>将输入包装为对象,放入数组</h3><blockquote><p>关于id:正常来说,如果咱们写的页面可以匹配服务器的话,咱们只需要将title与done传入服务器,服务器在传入数据库,由数据库来为我们生成id。但咱们没有服务器,id如何解决呢?简单点的方法就是获取当前时间的时间戳<code>Date.now()</code>为id,id其实就是一串不能重复的东西就行了。而好一点的方法就是使用<code>uuid</code><strong><em>专门用于生成全球唯一的id编码,绝对不会重复</em></strong>,这边我们使用<code>nanoid</code>,他是uuid的变种,比uuid轻便</p></blockquote><h4 id="nanoid"><a href="#nanoid" class="headerlink" title="nanoid"></a>nanoid</h4><ol><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nanoid</span><br></pre></td></tr></table></figure></li><li><p>引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;nanoid&#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接调用函数,就会为我们生成唯一的id</span></span><br><span class="line"><span class="title function_">nanoid</span>()</span><br></pre></td></tr></table></figure></li></ol><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><blockquote><p>首先我们需要明白,我们要将数据从<code>MyHeader.vue</code>组件传递到<code>List.vue</code>组件。先前我们在Item组件内使用了List组件内的数据,是因为List与Item组件是父子组件,List组件内使用了Item标签,而现在MyHeader组件与List组件是兄弟组件,我们无法通过之前的方法传递数据,而且以目前的知识储蓄也没有别的传递数据的方法,那接下来怎们办呢?将todos数据放在<code>App.vue</code>组件上。</p></blockquote><ol><li><p>将List组件上的data数据剪切到App组件上,然后通过<code>&lt;List :todos=&quot;todos&quot;&gt;&lt;/List&gt;</code>将数据传给List,在List组件内接收<code>props:[&#39;todos&#39;]</code></p></li><li><p>现在我们还需要将MyHeader内的数据传入App(子组件往父组件传数据)</p><blockquote><p>要实现子组件往父组件传数据,只需要在父组件定义一个函数,然后向传数据一样,传递给子组件,既然子组件能收到函数自然可以调用,子组件只需要将数据传入函数,这样父组件也能够收到数据</p></blockquote></li></ol><ul><li><p>子组件内定义函数,并且将收到的数据放入数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addTodo</span>(<span class="params">todoObj</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">unshift</span>(todoObj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递函数给MyHeader组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">MyHeader</span> :addTodo=<span class="string">&quot;addTodo&quot;</span>&gt;&lt;/<span class="title class_">MyHeader</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>在MyHeader组件内接收函数并使用</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;addTodo&#x27;</span>],</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> todoObj = &#123;</span><br><span class="line">          <span class="attr">id</span>:<span class="title function_">nanoid</span>(),</span><br><span class="line">          <span class="attr">title</span>:e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">          <span class="attr">done</span>:<span class="literal">false</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">addTodo</span>(todoObj)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="添加后清空以及判断空值不能添加"><a href="#添加后清空以及判断空值不能添加" class="headerlink" title="添加后清空以及判断空值不能添加"></a>添加后清空以及判断空值不能添加</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!e.<span class="property">target</span>.<span class="property">value</span>) <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;输入不能为空&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> todoObj = &#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="title function_">nanoid</span>(),</span><br><span class="line">    <span class="attr">title</span>:e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">    <span class="attr">done</span>:<span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">addTodo</span>(todoObj)</span><br><span class="line">  <span class="comment">// 清空输入</span></span><br><span class="line">  e.<span class="property">target</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加勾选功能"><a href="#添加勾选功能" class="headerlink" title="添加勾选功能"></a>添加勾选功能</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客开发设计</title>
      <link href="/2025/02/11/blog%E8%AE%BE%E8%AE%A1/"/>
      <url>/2025/02/11/blog%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="博客网站"><a href="#博客网站" class="headerlink" title="博客网站"></a>博客网站</h2><blockquote></blockquote><hr><h2 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h2><blockquote><p>用户表,文章表,评论表每种数据尽量都使用一个表去存储。下面的表设计结构Schema的时候都放在./models/index.js文件中</p></blockquote><h3 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h3><blockquote><p>用户表:username, password, nickname, headImgUrl</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建用户表结构</span></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">nickname</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">headImgUrl</span>: <span class="title class_">String</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="comment">// 启用时间戳</span></span><br><span class="line">    <span class="attr">timestamps</span>:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户表模型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;User&#x27;</span>,userSchema)</span><br><span class="line"></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;12345&#x27;</span>,</span><br><span class="line">    <span class="attr">nickname</span>: <span class="string">&#x27;xiaozhang&#x27;</span>,</span><br><span class="line">    <span class="attr">headImgUrl</span>: <span class="string">&#x27;https://xiaohutuku.kina.ink/img/019.webp&#x27;</span>,</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;添加成功&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;添加失败&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="文章表-—-关联用户表-一对一关联"><a href="#文章表-—-关联用户表-一对一关联" class="headerlink" title="文章表 — 关联用户表(一对一关联)"></a>文章表 — 关联用户表(一对一关联)</h3><blockquote><p>articles文章表用于存放文章信息,而每篇文章都属于某个用户,因此我们需要将文章与用户做关联。比如:当用户修改了用户名时,那么用户的文章也需要修改作者的名字,而一个一个修改显然不切实际,所以就需要关联。将作者字段设置为:<code>author: &#123;type:Schema.Types.ObjectId,ref:&#39;User&#39;&#125;</code>,这就叫做表关联,可以将用户表和文章表关联起来。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 文章 表结构</span></span><br><span class="line"><span class="keyword">const</span> articleSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="comment">// 文章表中传入作者的id,ref:&#x27;User&#x27;关联了用户表中的id</span></span><br><span class="line">    <span class="attr">author</span>: &#123;<span class="attr">type</span>:<span class="title class_">Schema</span>.<span class="property">Types</span>.<span class="property">ObjectId</span>, <span class="attr">ref</span>:<span class="string">&#x27;User&#x27;</span>&#125;,</span><br><span class="line">    <span class="attr">tag</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">views</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="comment">// 启用时间戳</span></span><br><span class="line">    <span class="attr">timestamps</span>:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 文章 表模型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Article</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Article&#x27;</span>,articleSchema)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建文章</span></span><br><span class="line"><span class="title class_">Article</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;学习python&#x27;</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;python是一门强大的编程语言....&#x27;</span>,</span><br><span class="line">    <span class="attr">tag</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="attr">author</span>: <span class="string">&#x27;67a45f2b8a5dcb4fd7e13d11&#x27;</span>,</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文章发布成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="评论表-—-关联文章表和用户表"><a href="#评论表-—-关联文章表和用户表" class="headerlink" title="评论表 — 关联文章表和用户表"></a>评论表 — 关联文章表和用户表</h3><blockquote><p>评论表内应该记录评论的文章的id,和评论用户的id</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建评论表结构</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CommentSchema</span> = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="comment">// 评论内容</span></span><br><span class="line">    <span class="attr">content</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="comment">// 评论所属文章id</span></span><br><span class="line">    <span class="attr">article_id</span>: &#123;<span class="attr">type</span>: <span class="title class_">Schema</span>.<span class="property">Types</span>.<span class="property">ObjectId</span>,<span class="attr">ref</span>: <span class="string">&#x27;Article&#x27;</span>&#125;,</span><br><span class="line">    <span class="comment">// 评论人所属文章id</span></span><br><span class="line">    <span class="attr">reply_user_id</span>: &#123;<span class="attr">type</span>: <span class="title class_">Schema</span>.<span class="property">Types</span>.<span class="property">ObjectId</span>,<span class="attr">ref</span>: <span class="string">&#x27;User&#x27;</span>&#125;</span><br><span class="line">&#125;,&#123;<span class="attr">timestamps</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建评论表模型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Comment</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Comment&#x27;</span>,<span class="title class_">CommentSchema</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建评论内容</span></span><br><span class="line"><span class="title class_">Comment</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;想要学习资料&#x27;</span>,</span><br><span class="line">    <span class="attr">article_id</span>: <span class="string">&#x27;67a48033bcbbf2b0e2606b88&#x27;</span>,</span><br><span class="line">    <span class="attr">reply_user_id</span>: <span class="string">&#x27;67a45f2b8a5dcb4fd7e13d11&#x27;</span>,</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>根据文章id查询评论并且关联用户</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据文章id,查询评论,并且关联用户</span></span><br><span class="line"><span class="title class_">Comment</span>.<span class="title function_">find</span>(&#123;<span class="attr">article_id</span>: <span class="string">&#x27;67a48033bcbbf2b0e2606b88&#x27;</span>&#125;)</span><br><span class="line">    .<span class="title function_">populate</span>(<span class="string">&#x27;reply_user_id&#x27;</span>,&#123;<span class="attr">password</span>: <span class="number">0</span>&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查询成功&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="关联查询-一对多"><a href="#关联查询-一对多" class="headerlink" title="关联查询(一对多)"></a>关联查询(一对多)</h3><blockquote><p>在查询文章的时候,查询出这篇文章的所有留言,这其实需要用到一对多的关联查询。这边需要用到<code>虚拟字段</code>。</p></blockquote><ul><li>给Article添加虚拟字段</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关联查询(一对多) -- 需要写在模型生成之前</span></span><br><span class="line"><span class="comment">// 如果Article中的id与关联的id相等,就会生成虚拟字段coms,我们使用.populate(&#x27;coms&#x27;)查询就行</span></span><br><span class="line"><span class="title class_">ArticleSchema</span>.<span class="title function_">virtual</span>(<span class="string">&#x27;coms&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">// 评论表模型</span></span><br><span class="line">    <span class="attr">ref</span>: <span class="string">&#x27;Comment&#x27;</span>,</span><br><span class="line">    <span class="comment">// 关联id属性</span></span><br><span class="line">    <span class="attr">localField</span>: <span class="string">&#x27;_id&#x27;</span>,</span><br><span class="line">    <span class="attr">foreignField</span>: <span class="string">&#x27;article_id&#x27;</span>,</span><br><span class="line">    <span class="attr">justOne</span>: <span class="literal">false</span>,  <span class="comment">// false 取数组长度值 || true 将评论取出为一个数组</span></span><br><span class="line">    <span class="attr">count</span>: <span class="literal">true</span>, <span class="comment">// 显示评论数量 || false 显示对象</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 加上这两段,虚拟字段才能显性看到,不然只能隐性使用</span></span><br><span class="line"><span class="title class_">ArticleSchema</span>.<span class="title function_">set</span>(<span class="string">&#x27;toObject&#x27;</span>,&#123;<span class="attr">virtuals</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="title class_">ArticleSchema</span>.<span class="title function_">set</span>(<span class="string">&#x27;toJSON&#x27;</span>,&#123;<span class="attr">virtuals</span>: <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="结合数据库实现接口"><a href="#结合数据库实现接口" class="headerlink" title="结合数据库实现接口"></a>结合数据库实现接口</h2><blockquote><p>在接口文件,我们需要用到数据库操作,所以需要将我们创建的模型导出</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;<span class="title class_">User</span>,<span class="title class_">Article</span>,<span class="title class_">Comment</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="注册接口"><a href="#注册接口" class="headerlink" title="注册接口"></a>注册接口</h3><blockquote></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">User</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;../models/index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册请求</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> username = req.<span class="property">body</span>.<span class="property">username</span></span><br><span class="line">  <span class="keyword">const</span> password = req.<span class="property">body</span>.<span class="property">password</span></span><br><span class="line">  <span class="keyword">const</span> nickname = req.<span class="property">body</span>.<span class="property">nickname</span></span><br><span class="line">  <span class="keyword">const</span> headImgUrl = req.<span class="property">body</span>.<span class="property">headImgUrl</span></span><br><span class="line">  <span class="keyword">if</span>(username &amp;&amp; password &amp;&amp; nickname &amp;&amp; headImgUrl)&#123;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;注册成功&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title class_">User</span>.<span class="title function_">create</span>(req.<span class="property">body</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建成功&#x27;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;创建失败,缺少参数&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h3><p>&gt;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录接口</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;username,password&#125; = req.<span class="property">query</span></span><br><span class="line">  <span class="title class_">User</span>.<span class="title function_">findOne</span>(&#123;username,password&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查询成功&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line">    <span class="keyword">if</span>(r==<span class="literal">null</span>)&#123;</span><br><span class="line">      res.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;无用户,请先注册用户&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      res.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;登录成功&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="评论接口"><a href="#评论接口" class="headerlink" title="评论接口"></a>评论接口</h3><p>&gt;</p><ul><li>发布评论</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布评论接口</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">auth</span>.<span class="property">uid</span>)</span><br><span class="line">    <span class="title class_">Comment</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">        <span class="attr">reply_user_id</span>: req.<span class="property">auth</span>.<span class="property">uid</span>,</span><br><span class="line">        <span class="attr">article_id</span>: req.<span class="property">body</span>.<span class="property">article_id</span>,</span><br><span class="line">        <span class="attr">content</span>: req.<span class="property">body</span>.<span class="property">content</span>,</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;发布评论成功&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;发布评论失败&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>根据文章id获取文章的评论</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/articles/:aid&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title class_">Comment</span>.<span class="title function_">find</span>(&#123;<span class="attr">article_id</span>:req.<span class="property">params</span>.<span class="property">aid</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;查询评论列表成功&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: r</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;查询评论列表失败&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>根据评论id删除评论</li></ul><blockquote><p>删除评论是有权限的,你不能删除别人文章下的评论。所以我们得判断一下,我们登录的uid和文章作者的id一样我们才具有删除权限</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据评论id删除评论</span></span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">&#x27;/:cid&#x27;</span>, <span class="title function_">async</span> (req,res,next)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 根据传入的评论id查询到评论信息,关联文章信息</span></span><br><span class="line">    <span class="keyword">const</span> commentObj = <span class="keyword">await</span> <span class="title class_">Comment</span>.<span class="title function_">findById</span>(req.<span class="property">params</span>.<span class="property">cid</span>).<span class="title function_">populate</span>(<span class="string">&#x27;article_id&#x27;</span>)</span><br><span class="line">    <span class="comment">// 根据文章信息获取文章作者id</span></span><br><span class="line">    <span class="keyword">const</span> author_id = commentObj.<span class="property">article_id</span>.<span class="property">_id</span></span><br><span class="line">    <span class="keyword">if</span>(author_id == req.<span class="property">auth</span>.<span class="property">uid</span>)&#123;</span><br><span class="line">        <span class="comment">// 拥有删除权限</span></span><br><span class="line">        <span class="keyword">const</span> r = <span class="keyword">await</span> <span class="title class_">Comment</span>.<span class="title function_">findByIdAndDelete</span>(req.<span class="property">params</span>.<span class="property">cid</span>)</span><br><span class="line">        <span class="keyword">if</span>(r)&#123;</span><br><span class="line">            res.<span class="title function_">json</span>(&#123;</span><br><span class="line">                <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">msg</span>: <span class="string">&#x27;删除评论成功&#x27;</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.<span class="title function_">json</span>(&#123;</span><br><span class="line">                <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">msg</span>: <span class="string">&#x27;该评论已经被删除&#x27;</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="文章接口"><a href="#文章接口" class="headerlink" title="文章接口"></a>文章接口</h2><ul><li>发布</li></ul><p>&gt;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布文章</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title class_">Article</span>.<span class="title function_">create</span>(&#123;...req.<span class="property">body</span>,<span class="attr">author</span>:req.<span class="property">auth</span>.<span class="property">uid</span>&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>)=&gt;</span>&#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;文章发布成功&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: r,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;文章发布失败&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>查询文章</li></ul><p>&gt;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文章</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title class_">Article</span>.<span class="title function_">find</span>(&#123;<span class="attr">author</span>:req.<span class="property">params</span>.<span class="property">uid</span>&#125;).<span class="title function_">populate</span>(<span class="string">&#x27;author&#x27;</span>,&#123;<span class="attr">password</span>:<span class="number">0</span>&#125;).<span class="title function_">populate</span>(<span class="string">&#x27;coms&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>)=&gt;</span>&#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;查询文章成功&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>:r,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;查询文章失败&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>获取文章详情</li></ul><p>&gt;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文章详情</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/:aid&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title class_">Article</span>.<span class="title function_">findByIdAndUpdate</span>(res.<span class="property">params</span>.<span class="property">aid</span>,</span><br><span class="line">        <span class="comment">// 设置views数量增加1,也就是浏览量++</span></span><br><span class="line">        &#123;<span class="attr">$inc</span>:&#123;<span class="attr">views</span>:<span class="number">1</span>&#125;&#125;,</span><br><span class="line">        <span class="comment">// 显示新的,更改以后的</span></span><br><span class="line">        &#123;<span class="attr">new</span>:<span class="literal">true</span>&#125;</span><br><span class="line">    ).<span class="title function_">then</span>(<span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;查询文章详情成功&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>:r</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;查询文章详情失败&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>根据id删除文章</li></ul><p>&gt;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据id删除文章</span></span><br><span class="line">router.<span class="title function_">delete</span>(<span class="string">&#x27;/:aid&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 根据传入的id查询并且删除</span></span><br><span class="line">    <span class="title class_">Article</span>.<span class="title function_">findByIdAndDelete</span>(res.<span class="property">params</span>.<span class="property">aid</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(r)&#123;</span><br><span class="line">            res.<span class="title function_">json</span>(&#123;</span><br><span class="line">                <span class="attr">code</span>:<span class="number">1</span>,</span><br><span class="line">                <span class="attr">msg</span>:<span class="string">&#x27;文章删除成功&#x27;</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.<span class="title function_">json</span>(&#123;</span><br><span class="line">                <span class="attr">code</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">msg</span>:<span class="string">&#x27;文章已被删除&#x27;</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;操作失败&#x27;</span>,</span><br><span class="line">            err,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>编辑文章</li></ul><p>&gt;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编辑文章</span></span><br><span class="line">router.<span class="title function_">patch</span>(<span class="string">&#x27;/:aid&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title class_">Article</span>.<span class="title function_">findByIdAndUpdate</span>(res.<span class="property">params</span>.<span class="property">aid</span>,&#123;...res.<span class="property">body</span>&#125;,&#123;<span class="attr">new</span>:<span class="literal">true</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">r</span>=&gt;</span>&#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;根据id编辑文章成功&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>:r,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">code</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;根据id编辑文章失败&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="注册页"><a href="#注册页" class="headerlink" title="注册页"></a>注册页</h3><h3 id="修改用户信息-昵称-密码-头像"><a href="#修改用户信息-昵称-密码-头像" class="headerlink" title="修改用户信息-昵称-密码-头像"></a>修改用户信息-昵称-密码-头像</h3>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express框架</title>
      <link href="/2025/02/11/Express/"/>
      <url>/2025/02/11/Express/</url>
      
        <content type="html"><![CDATA[<h2 id="express介绍"><a href="#express介绍" class="headerlink" title="express介绍"></a>express介绍</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><div class="note success modern"><p>express是一个基于Node.js平台,快速开发web应用服务的框架。</p></div><h2 id="express使用"><a href="#express使用" class="headerlink" title="express使用"></a>express使用</h2><h3 id="基本使用-创建简单的本地web服务"><a href="#基本使用-创建简单的本地web服务" class="headerlink" title="基本使用-创建简单的本地web服务"></a>基本使用-创建简单的本地web服务</h3><ol><li>创建项目</li><li>安装<code>express</code>依赖<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure></li><li><p>引入express包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用express,创建http服务器对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br></pre></td></tr></table></figure></li><li><p>监听对应路径的请求,使用对应函数处理请求,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 服务器向客户端响应数据</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>处理函数中,有两个参数</li><li>req =&gt; 请求对象</li><li>res =&gt; 相应对象</li></ul></li><li>启动服务器,监听端口<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3000为端口号</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口服务启动成功....&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>运行代码</li><li>打开浏览器,地址栏输入<code>127.0.0.1:3000</code>就可以访问本地服务器了</li></ol><h2 id="express路由"><a href="#express路由" class="headerlink" title="express路由"></a>express路由</h2><div class="note success modern"><p>什么是路由?前端访问不同地址,后端返回不同数据,这就叫后端路由。假如,<code>/users/login</code>接口是登录用的,而<code>/users/reg</code>接口是注册用的,那么监听不同路径,执行不同函数,从而来处理不同的请求。这种路由一般在app上使用,也叫应用级别路由。</p></div><h3 id="路由的简单使用"><a href="#路由的简单使用" class="headerlink" title="路由的简单使用"></a>路由的简单使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由配置</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/home&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;用户主页&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/user/login&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;用户登录页面&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/user/reg&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;用户注册页面&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="路由方法"><a href="#路由方法" class="headerlink" title="路由方法"></a>路由方法</h3><blockquote><pre><code>* `app.use()`可以监听到所有方式的请求* `app.get()`可以监听get请求-获取数据* `app.post()`可以监听post请求-上传数据* `app.put()`可以监听put请求-修改数据* `app.patch()`可以监听patch请求-修改数据* `app.delete()`可以监听delete请求-删除数据</code></pre></blockquote><p><strong><em>浏览器地址栏直接输入为get请求</em></strong></p><blockquote><p>这边给大家分享一个调试工具postman地址:<a href="https://www.postman.com/downloads/">https://www.postman.com/downloads/</a></p></blockquote><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><blockquote><p>中间件本质其实就是一个函数,中间件有三个形参req, res, next,</p></blockquote><ol><li>req:<ul><li>客户端的请求对象</li></ul></li><li>res:<ul><li>服务器的响应对象</li></ul></li><li>next:<ul><li>一旦调用,中间件会将请求交给下一个中间件去处理。如果不调用next,请求到这里就结束了,不会把请求传递给其他中间件</li></ul></li></ol><h3 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为这边路径没写,默认是*,全部路径都能匹配到,所以这是全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    <span class="comment">// req请求对象</span></span><br><span class="line">    <span class="comment">// res响应对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;全局中间件&#x27;</span>)</span><br><span class="line">    <span class="comment">// 将请求发送给下一个中间件</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    这边后面依然可以继续写中间件</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="局部中间件"><a href="#局部中间件" class="headerlink" title="局部中间件"></a>局部中间件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由配置</span></span><br><span class="line"><span class="comment">// 用户访问地址相同,并且请求方式相同</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;用户主页&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;首页匹配中间件&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>其实我们可以在外部创建一个单独的中间件文件夹,将中间件函数放在外部暴露,要用的地方引入就好,这样更方便维护</p></blockquote><h3 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h3><ul><li>什么是路由中间件?</li></ul><blockquote><p>路由中间件是express内置的一个中间件,前端调用不同的接口,后端进行相应的处理,这边我们使用express自带的中间件帮我们处理不同的请求。这种路由主要对应用级别的路由进行更加细分的处理,我们也叫路由的路由。</p></blockquote><h4 id="使用路由中间件"><a href="#使用路由中间件" class="headerlink" title="使用路由中间件"></a>使用路由中间件</h4><ol><li><p>获取路由中间件<br><strong><em>新建routes/user.js</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建路由中间件</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br></pre></td></tr></table></figure></li><li><p>创建并暴露</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路径/user/reg</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/reg&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reg路由&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 导出路由中间件</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure></li><li><p>在main.js中引入router并使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入router</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./routes/user&#x27;</span>)</span><br><span class="line"><span class="comment">// 使用router</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/user&#x27;</span>,router)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>这边当我们在浏览器访问’/user/reg’时,他会先匹配到’/user’路由,然后进入router路由中间件,然后匹配’/reg’路由中间件执行,它的好处是,可以将我们的代码分散开,不至于一个文件内一大堆代码</p></blockquote><h3 id="上传文件中间件"><a href="#上传文件中间件" class="headerlink" title="上传文件中间件"></a>上传文件中间件</h3><blockquote><p>有些时候我们需要向服务器上传一些文件(图片,视频….),这时候就可以使用multer中间件。前端上传图片在post请求体中使用form data数据上传,而multer可以解析form data数据。</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i multer -S</span><br></pre></td></tr></table></figure><h4 id="创建upload路由"><a href="#创建upload路由" class="headerlink" title="创建upload路由"></a>创建upload路由</h4><ol><li><p>在routes文件夹下创建upload.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 上传文件模块</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置存储图片路径</span></span><br><span class="line"><span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">    <span class="comment">// 上传图片路径</span></span><br><span class="line">    <span class="attr">destination</span>:<span class="keyword">function</span>(<span class="params">req,file,cb</span>)&#123;</span><br><span class="line">        <span class="title function_">cb</span>(<span class="literal">null</span>,<span class="string">&#x27;public/images&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">filename</span>:<span class="keyword">function</span>(<span class="params">req,file,cb</span>)&#123;</span><br><span class="line">        <span class="comment">// path.extname(file.originalname) 获取前端上传图片的后缀名</span></span><br><span class="line">        <span class="comment">// 文件名 已上传的时间戳为文件名</span></span><br><span class="line">        <span class="title function_">cb</span>(<span class="literal">null</span>,<span class="title class_">Date</span>.<span class="title function_">now</span>() + path.<span class="title function_">extname</span>(file.<span class="property">originalname</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 根据存储设置,创建upload</span></span><br><span class="line"><span class="comment">// single(&quot;img&quot;) 支持一次上传一张,并且参数名 img , 参数值 图片</span></span><br><span class="line"><span class="keyword">var</span> upload = <span class="title function_">multer</span>(&#123;storage : storage&#125;).<span class="title function_">single</span>(<span class="string">&quot;img&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用upload</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, upload,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> file = req.<span class="property">file</span>  <span class="comment">// 上传的图片对象</span></span><br><span class="line">    <span class="keyword">const</span> imgUrl = <span class="string">&#x27;/images/&#x27;</span> + file.<span class="property">filename</span>  <span class="comment">// 拼出图片地址</span></span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;上传文件成功&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:imgUrl,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure></li><li><p>在入口文件引入,并使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uploadRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/upload&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/upload&#x27;</span>, uploadRouter);</span><br></pre></td></tr></table></figure></li></ol><h2 id="请求参数获取"><a href="#请求参数获取" class="headerlink" title="请求参数获取"></a>请求参数获取</h2><h3 id="get请求参数获取"><a href="#get请求参数获取" class="headerlink" title="get请求参数获取"></a>get请求参数获取</h3><blockquote><p>通过req.query()方法可以获取请求url中的？后面的参数,比如:’127.0.0.1:3000/user/reg?password=xxx&amp;username=xxx’,通过req.query方法获取的就是password与username参数,并且会转化为Json类型,我们可以通过res.json转换为对象类型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/reg&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;reg路由&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="get请求的另外一种传参"><a href="#get请求的另外一种传参" class="headerlink" title="get请求的另外一种传参"></a>get请求的另外一种传参</h3><blockquote><p>用户通过动态id的方式,如何获取参数id呢?很多时候其实用户会通过<code>router.get(&#39;/info/:id&#39;,function(req,res,next)=&gt;&#123;&#125;)</code>方式传参,而且id是动态的,我们要获取id,就可以通过req.params获取id。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// :id为动态id</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/info/:id&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="post参数获取"><a href="#post参数获取" class="headerlink" title="post参数获取"></a>post参数获取</h3><blockquote><p>post请求一般是传入请求体之中,而请求体中的数据我们是获取不到的,这边我们需要使用express内置的两个方法</p></blockquote><ol><li>express.urlencoded() =&gt; 用来解析<code>x-www-form-urlencoded</code>类型请求体数据</li><li>express.json =&gt; 用来解析json类型请求体</li></ol><ul><li><p>解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析 前端请求的请求体数据 x-www-from</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>())</span><br><span class="line"><span class="comment">// 解析 前端请求的请求体数据 json</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br></pre></td></tr></table></figure></li><li><p>接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/test&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,nest</span>)&#123;</span><br><span class="line">    <span class="comment">// req.body可以获取post过来的参数</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">    res.<span class="title function_">send</span>(res.<span class="title function_">json</span>(req.<span class="property">body</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="静态资源托管中间件"><a href="#静态资源托管中间件" class="headerlink" title="静态资源托管中间件"></a>静态资源托管中间件</h2><blockquote><p>什么是静态资源？打开一个网站,html结构,css样式,js文件,图片,都是静态资源。我们网页中发起请求,请求接口返回的数据叫动态资源。静态资源一般不需要处理,直接就返回给浏览器。而动态资源一般后端会处理,比如解析前端请求过来的url和参数,根据url不同返回不同的数据,使用express.static()中间件和容易就能创建一个静态资源服务器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态资源托管</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure><blockquote><p>将当前文件夹下面的public文件夹设为静态资源文件夹,一旦请求过来,会优先到静态资源文件夹下查找静态资源返回给客户端,比如访问<code>http://127.0.0.1:3000/index.js</code>,就会到public文件夹下查找<code>index.js</code>文件</p></blockquote><h2 id="express脚手架创建项目"><a href="#express脚手架创建项目" class="headerlink" title="express脚手架创建项目"></a>express脚手架创建项目</h2><blockquote><p>通过应用生成器工具<code>express-generator</code>,可以快速创建一个应用的骨架,express-generator包含了express命令行工具,也称为脚手架</p></blockquote><ol><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-generator -g</span><br></pre></td></tr></table></figure></li><li><p>创建项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express -e 项目名</span><br></pre></td></tr></table></figure></li></ol><h2 id="前后端的爱恨情仇"><a href="#前后端的爱恨情仇" class="headerlink" title="前后端的爱恨情仇"></a>前后端的爱恨情仇</h2><blockquote></blockquote><h3 id="MVC时代"><a href="#MVC时代" class="headerlink" title="MVC时代"></a>MVC时代</h3><h3 id="前后端分离时代"><a href="#前后端分离时代" class="headerlink" title="前后端分离时代"></a>前后端分离时代</h3><h3 id="模板引擎-前后分离"><a href="#模板引擎-前后分离" class="headerlink" title="模板引擎-前后分离"></a>模板引擎-前后分离</h3><blockquote><p>模板引擎说白了就是一个将页面模板和要展示的数据结合起来生成HTML页面的工具</p></blockquote><h4 id="EJS模板引擎"><a href="#EJS模板引擎" class="headerlink" title="EJS模板引擎"></a>EJS模板引擎</h4><ol><li><p>首先我们得创建views模板文件夹,并且在里面创建ejs文件,ejs文件其实与html文件基本一致,只是里面会多一些ejs的语法</p></li><li><p>在入口文件内,配置模板引擎</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板引擎</span></span><br><span class="line"><span class="comment">// view engine setup</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用模板引擎只需要通过res.render()方法,render方法有两个参数</p><ul><li>参数一:要使用的模板文件名</li><li>参数二:数据</li></ul></li></ol><h4 id="EJS模板引擎语法"><a href="#EJS模板引擎语法" class="headerlink" title="EJS模板引擎语法"></a>EJS模板引擎语法</h4><ol><li><p>插值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插值 比解析标签</span></span><br><span class="line">&lt;%= code %&gt;</span><br><span class="line"><span class="comment">// 插值 解析标签</span></span><br><span class="line">&lt;%- code %&gt;</span><br></pre></td></tr></table></figure></li><li><p>插入表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% for(let i=0;i&lt;arr.length;i++) &#123;%&gt;</span><br><span class="line">    &lt;li&gt; &lt;%= arr[i] %&gt; &lt;/li&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="接口开发restfulAPI-前后分离"><a href="#接口开发restfulAPI-前后分离" class="headerlink" title="接口开发restfulAPI-前后分离"></a>接口开发restfulAPI-前后分离</h3><blockquote><p>在目前的主流程序开发中,很多都是前后分离架构。而前端包括网页,APP,小程序…,而这些都需要后端提供数据,因此需要同意的后端通信,restfulAPI就是比较成熟的api/接口设计理论,通过写一个接口就可以给比较多的前端提供数据。</p></blockquote><ol><li>域名<br><strong><em>API的入口尽量足够简单,如下</em></strong></li></ol><ul><li>api.example.com/* (子域名下)</li><li>example.com/api/* (主域名下)</li></ul><ol><li>路径</li></ol><p><strong><em>路径又被称为端点,表示api的具体地址,在路径设计中,需要遵守以下规定</em></strong></p><ul><li>命名全部小写</li><li>资源的命名必须是名词,并且是复数</li><li>如果要使用连字符,建议使用’-‘</li><li>通俗易懂</li></ul><p>如:</p><ul><li>api.example.com/zoos</li><li>api.example.com/zoos/animal</li></ul><ol><li>HTTP动词</li></ol><blockquote><p>对于如何操作资源,有相应的HTTP动词对应</p></blockquote><ul><li>GET:从服务器取出资源</li><li>POST:在服务器新建资源</li><li>PUT:在服务器更新资源(客户端提供改变后的完整资源,更新所有)</li><li>PATCH:在服务器更新资源(客户端提供改变的属性,更新某一个)</li><li>DELETE:从服务器删除资源</li></ul><h2 id="身份验证jwt"><a href="#身份验证jwt" class="headerlink" title="身份验证jwt"></a>身份验证jwt</h2><blockquote><p>有些接口的操作需要用户登录以后才能实现,比如:发布文章,删除文章。HTTP是一种没有状态的协议,也就是说他并不知道是谁访问了它。客户端通过用户名密码通过身份验证,不过下回客户端发送请求时还需要再次验证,这样用户体验肯定不好,所以就有了token验证。相当于在第一次验证之后,服务端给了客户端一张令牌,有了这张令牌下次就不需要验证了</p></blockquote><h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3><ol><li><p>Token的引入:客户端频繁向服务端请求数据,服务端频繁查询用户名与密码进行比对,做出相应提示,过程太过繁琐,所以就有了token</p></li><li><p>Token的定义:token是服务器生成的一串字符串,作为客户端请求的令牌,在客户端第一次登录时,服务端生成一个token并将此发送给客户端,此后客户端只需带上token来请求数据即可</p></li><li><p>token可以减少服务器的压力,减少频繁的查询数据库</p></li></ol><h3 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h3><blockquote><p>jwt代表<code>json web token</code>,是一种认证头部token格式。jwt有三部分组成header,payload,signature,简单说就是非常长的加密串。</p></blockquote><ul><li>jwt使用<ol><li>服务器生成jwt,客户端登录服务器,成功,服务器会返回token信息。</li><li>服务器验证客户端的jwt,客户端收到服务器返回的token后,通常将其储存在localStorage/sessionStorage中</li></ol></li></ul><h4 id="服务器生成jwt"><a href="#服务器生成jwt" class="headerlink" title="服务器生成jwt"></a>服务器生成jwt</h4><ol><li><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jsonwebtoken</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成token</span></span><br><span class="line"><span class="keyword">let</span> token = jwt.<span class="title function_">sign</span>(&#123;<span class="attr">username</span>:<span class="string">&#x27;zhangsan&#x27;</span>&#125;,<span class="string">&#x27;test123456&#x27;</span>,&#123;<span class="attr">expiresIn</span>:<span class="string">&#x27;30d&#x27;</span>,<span class="attr">algorithm</span>:<span class="string">&#x27;HS256&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li></ol><ul><li>三个参数<ol><li>token存入的数据,也叫payload</li><li>token加密的密码</li><li>expiresIn:token的有效时间 || algorithm:’HS256’,表示加密算法</li></ol></li></ul><ol><li>登录请求<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* GET users listing. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(req.<span class="property">query</span>.<span class="property">username</span> == <span class="string">&#x27;admin&#x27;</span> &amp;&amp; req.<span class="property">query</span>.<span class="property">password</span> == <span class="string">&#x27;123456&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">// 登录成功以后</span></span><br><span class="line">  <span class="keyword">let</span> token = jwt.<span class="title function_">sign</span>(&#123;<span class="attr">username</span>:<span class="string">&#x27;admin&#x27;</span>&#125;,<span class="string">&#x27;test123456&#x27;</span>,&#123;<span class="attr">expiresIn</span>:<span class="string">&#x27;120s&#x27;</span>,<span class="attr">algorithm</span>:<span class="string">&#x27;HS256&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据库操作</span></span><br><span class="line">  <span class="comment">// 返回json数据</span></span><br><span class="line">  <span class="comment">// 模拟数据</span></span><br><span class="line">  res.<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="number">1</span>,  <span class="comment">// 1 操作成功 || 0 操作失败</span></span><br><span class="line">    <span class="attr">msg</span>:<span class="string">&#x27;查询成功&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:[</span><br><span class="line">      &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">    token,</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">0</span>,  <span class="comment">// 1 操作成功 || 0 操作失败</span></span><br><span class="line">      <span class="attr">msg</span>:<span class="string">&#x27;查询失败&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h4 id="jwt验证"><a href="#jwt验证" class="headerlink" title="jwt验证"></a>jwt验证</h4><blockquote><p>之前我们生成了token,并且发送给了客户端,那这边我们就得验证token</p></blockquote><ol><li><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-jwt</span><br></pre></td></tr></table></figure></li><li><p>在app.js中使用</p></li></ol><blockquote><p>使用express-jwt中间件解析token,我们需要在所有路由之前挂载这个jwt处理中间件,这样所有的路由在匹配之前都会检查是否请求头中包含token,</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> Express </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB数据库</title>
      <link href="/2025/02/11/MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2025/02/11/MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库?"></a>什么是数据库?</h2><ul><li>什么是数据库?<ul><li>我们有些时候发布的数据,比如文章,用户名,密码,上传的照片都不是直接存储在我们的电脑中的,而是在我们访问服务器的时候,服务器会去数据库中查找,然后给我们呈现。MongoDB就是一种数据库,与只一样的还有MySQL数据库。</li><li>就是存储数据的仓库</li><li>数据库是后端访问操作的</li><li>后端获取到数据后,将数据返回给前端</li><li>可以将数据库理解为一个文件夹</li></ul></li><li>数据库如何存储数据?<ul><li>使用一个一个的表格进行存储</li></ul></li></ul><hr><h2 id="什么是MongoDB"><a href="#什么是MongoDB" class="headerlink" title="什么是MongoDB?"></a>什么是MongoDB?</h2><blockquote><p>MongoDB是一种分布式的文件存储数据库,它的特点是高性能,易部署,易使用,存储数据非常方便。MongoDB是一个介于关系型与非关系型数据库之间的产品。</p></blockquote><div class="table-container"><table><thead><tr><th>MySQL术语</th><th>MongoDB术语</th><th>解释/说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行/文档</td></tr><tr><td>column</td><td>field</td><td>数据字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr></tbody></table></div><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote><p>文档是一个键值(key-value)对MongoDB的文档不需要设置设置相同的字段,并且相同的字段不需要相同的数据类型,说白了就是一条信息就是一个文档</p></blockquote><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><blockquote><p>多个文档就是组成了一个表,也叫集合。插入数据其实就是在集合中插入文档</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>地址:<a href="https://www.mongodb.com/zh-cn">https://www.mongodb.com/zh-cn</a></p></li><li><p>第一个选择complete完整安装</p></li><li><p>去掉Install MongoDB Compass选项</p></li><li><p>点击Install</p></li></ol><h2 id="MongoDB可视化工具"><a href="#MongoDB可视化工具" class="headerlink" title="MongoDB可视化工具"></a>MongoDB可视化工具</h2><blockquote><p>robo3t工具是一个数据库的可视化工具,利用一个可视化页面来操作数据库的增删改查,可以让我们使用代码操作时,更方便查看操作结果,</p></blockquote><ol><li><p>安装地址:<a href="https://robomongo.org/">https://robomongo.org/</a></p></li><li><p>点击左上角<code>file</code>,点击<code>connect</code>,在新开的窗口右键,点击add创建数据库链接,名字可以改一下,其他的吗，默认就好。</p></li><li><p>这边可以看见右边多了一个数据库连接,右键点击<code>open shell</code>,输入以下命令创建数据库,输入完点击左上角运行按钮</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名字</span><br></pre></td></tr></table></figure></li><li><p>插入表,运行完毕后可以右键数据库链接,点击<code>refresh</code>刷新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(&#x27;表名&#x27;)</span><br></pre></td></tr></table></figure></li><li><p>插入文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.表名.insertOne(&#123;&#x27;username&#x27;:&#x27;zhangsan&#x27;,&#x27;password&#x27;:&#x27;123456&#x27;&#125;)</span><br><span class="line">&lt;!-- 或者 --&gt;</span><br><span class="line">db.表名.insertMany(&#123;&#x27;username&#x27;:&#x27;zhangsan&#x27;,&#x27;password&#x27;:&#x27;123456&#x27;&#125;,&#123;&#x27;username&#x27;:&#x27;lisi&#x27;,&#x27;password&#x27;:&#x27;1234&#x27;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>查询数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;&#x27;username&#x27;:&#x27;zhangsan&#x27;&#125;)</span><br><span class="line">db.users.findOne(&#123;&#x27;username&#x27;:&#x27;zhangsan&#x27;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>更新数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dn.users.update(&#123;&#x27;username&#x27;:&#x27;zhangsan&#x27;&#125;,&#123;$set:&#123;&#x27;username&#x27;:&#x27;lisi&#x27;&#125;&#125;)</span><br><span class="line">&lt;!-- 或者 --&gt;</span><br><span class="line">dn.users.updateOne(&#123;&#x27;username&#x27;:&#x27;zhangsan&#x27;&#125;,&#123;$set:&#123;&#x27;username&#x27;:&#x27;lisi&#x27;&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>数据内的值增加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.users.update(&#123;&#x27;username&#x27;:&#x27;zhangsan&#x27;,&#123;$inc:&#123;age:1&#125;&#125;&#125;)</span><br><span class="line"></span><br><span class="line">相当于张三的年龄增加1,而不是张三的年龄改为1</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.users.deleteOne(&#123;&#x27;username&#x27;:&#x27;zhangsan&#x27;&#125;)</span><br><span class="line">db.users.delete(&#123;&#x27;username&#x27;:&#x27;zhangsan&#x27;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.users.find().sort(&#123;age:1&#125;)  // 升序</span><br><span class="line">db.users.find().sort(&#123;age:-1&#125;)  //  降序</span><br></pre></td></tr></table></figure></li></ol><h2 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h2><blockquote><p>mongoose是一个第三方库,在express中利用mongoose操作mongodb比较方便</p></blockquote><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure><h3 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h3><ol><li><p>创建models文件夹,用于存放数据库内模型的文件夹</p></li><li><p>文件夹里面创建index.js文件进行操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://127.0.0.1/test-blog&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;链接成功&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;链接失败&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="Schema对象"><a href="#Schema对象" class="headerlink" title="Schema对象"></a>Schema对象</h3><blockquote><p>Mongoose的一切都始于Schema,每个schema都会映射到一个MongoDB表中,并定义这个表里的文档(一行数据)的构成</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://127.0.0.1/test-blog&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;链接成功&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;链接失败&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取创建表的结构</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Schema</span> = mongoose.<span class="property">Schema</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义文章表结构</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ArticleShema</span> = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">author</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">tag</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="comment">// 博客浏览量</span></span><br><span class="line">    <span class="attr">views</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 发布时间,数据库会自动帮我们管理</span></span><br><span class="line">    <span class="attr">timestamps</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Model对象"><a href="#Model对象" class="headerlink" title="Model对象"></a>Model对象</h3><blockquote><p>Models是从Schema编译来的构造函数,从数据库创建和读取document的所有操作都是通过model进行的,通过它可以对表的内容增删改查</p></blockquote><ol><li>创建数据<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据表结构,创建数据模型,并且把表结构映射成数据库中的表 Articles</span></span><br><span class="line"><span class="comment">// 通过Article对象就可以对数据库中的数据增删改查</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Article</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Article&#x27;</span>,<span class="title class_">ArticleShema</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数据,并且插入数据库</span></span><br><span class="line"><span class="title class_">Article</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;学习mongodb&#x27;</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;mongodb是一个数据库...&#x27;</span>,</span><br><span class="line">    <span class="attr">tag</span>: <span class="string">&#x27;数据库&#x27;</span>,</span><br><span class="line">    <span class="attr">author</span>: <span class="string">&#x27;康素公&#x27;</span>,</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建并且插入数据成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p><strong><em> 这边打开数据库也能看见我们的数据被插入进去了 </em></strong></p><ol><li><p>删除数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除数据 deleteOne/deleteMany</span></span><br><span class="line"><span class="title class_">Article</span>.<span class="title function_">deleteOne</span>(&#123;<span class="attr">_id</span>:<span class="string">&#x27;xxx&#x27;</span>&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除失败&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Article</span>.<span class="title function_">updateOne</span>(&#123;</span><br><span class="line">    <span class="attr">_id</span>:<span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;学习python&#x27;</span>,</span><br><span class="line">    <span class="attr">author</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>查询操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询操作 findById || findOne(&#123;_id:&#x27;xxx&#x27;&#125;) || findByIdAndUpdate()查询并修改 -- 查询一条</span></span><br><span class="line"><span class="title class_">Article</span>.<span class="title function_">findById</span>(<span class="string">&#x27;xxx&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查询成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询多条</span></span><br><span class="line"><span class="title class_">Article</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">    <span class="attr">views</span>:&#123;<span class="attr">$gte</span>:<span class="number">0</span>,<span class="attr">$lt</span>:<span class="number">1000</span>&#125;, <span class="comment">// 范围查询,大于0,小于1000</span></span><br><span class="line">    <span class="attr">title</span>: <span class="regexp">/python/</span>  <span class="comment">// 查询title包含python的</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><ul><li>.sort({_id:-1}) // 排序</li><li>.skip(0) // 跳过0条</li><li>.limit(10) // 获取10条事件</li><li>.select({author:0})  // 1 查询结果显示author字段 || 0 查询结果不显示author字段</li><li>.exec() 执行查询</li><li>.populate(‘author’,{password: 0}) // 关联查询(一对一) 查询某个作者的文章,不显示密码</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue插件</title>
      <link href="/2025/02/02/Vue%E6%8F%92%E4%BB%B6/"/>
      <url>/2025/02/02/Vue%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="插件基本介绍"><a href="#插件基本介绍" class="headerlink" title="插件基本介绍"></a>插件基本介绍</h2><blockquote><p>插件本质其实就是一个对象,但是Vue要求这个对象必须包含<code>install</code>函数。</p></blockquote><ol><li>创建插件<br>创建<code>plugins.js</code>文件夹,用于存放插件,<code>install</code>函数是必写的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插件文件</span></span><br><span class="line"><span class="comment">// 创建插件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">install</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><code>install()</code>方法,install的第一个参数是Vue,后面的参数,为vue使用者传递的数据。可以通过Vue为组件添加全局过滤器,全局指令,配置全局混入以及给Vue原型上添加方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">install</span>(<span class="params">Vue</span>)&#123;</span><br><span class="line">    <span class="comment">// 全局过滤器 </span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(...)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局自定义指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(...)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 混入</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixins</span>(...)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给Vue原型上添加方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="function">()=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello world&#x27;</span>)&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p></blockquote><ol><li><p>在入口文件中,引入插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> plugins <span class="keyword">from</span> <span class="string">&#x27;./plugins&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>在创建vm之前,使用插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(plugins)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于什么是Nodejs?</title>
      <link href="/2025/02/02/%E5%85%B3%E4%BA%8E%E4%BB%80%E4%B9%88%E6%98%AFNodejs/"/>
      <url>/2025/02/02/%E5%85%B3%E4%BA%8E%E4%BB%80%E4%B9%88%E6%98%AFNodejs/</url>
      
        <content type="html"><![CDATA[<h3 id="Nodejs介绍"><a href="#Nodejs介绍" class="headerlink" title="Nodejs介绍"></a>Nodejs介绍</h3><ol><li>Nodejs是一个基于v8引擎的javascrpit运行环境,可以让我们使用js开发后端或者服务端程序</li><li>特点:单线程,异步,事件驱动</li><li>Nodejs官网:<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li></ol><h4 id="Nodejs可以做什么"><a href="#Nodejs可以做什么" class="headerlink" title="Nodejs可以做什么?"></a>Nodejs可以做什么?</h4><ol><li>Nodejs可以解析js代码,让js脱离浏览器</li></ol><h4 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h4><ol><li>下载地址:<a href="https://nodejs.org/zh-cn/download">https://nodejs.org/zh-cn/download</a></li><li>下载好以后,打开安装包安装即可</li><li>地址建议用默认的,这里面换地址的坑太多了,容易出问题</li><li>安装好以后,按下<kbd>Win</kbd> + <kbd>R</kbd>,左下角输入<code>cmd</code></li><li>在终端输入<code>node -v</code>,显示版本号说明安装成功</li></ol><h4 id="运行js文件"><a href="#运行js文件" class="headerlink" title="运行js文件"></a>运行js文件</h4><ol><li>打开文件夹目录</li><li>打开终端,在js文件目录下,输入命令运行代码<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node js文件名</span><br></pre></td></tr></table></figure></li></ol><h3 id="什么是模块化开发"><a href="#什么是模块化开发" class="headerlink" title="什么是模块化开发"></a>什么是模块化开发</h3><div class="note success modern"><p>为了防止主文件过于臃肿,可以把一些功能脱离出来,形成一个新的文件,主文件中只需引入文件,就可以使用功能</p></div><h4 id="暴露模块"><a href="#暴露模块" class="headerlink" title="暴露模块"></a>暴露模块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports = Obj</span><br></pre></td></tr></table></figure><h4 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Obj = require(&#x27;文件路径&#x27;)</span><br></pre></td></tr></table></figure><h3 id="npm包管理器的使用"><a href="#npm包管理器的使用" class="headerlink" title="npm包管理器的使用"></a>npm包管理器的使用</h3><ol><li>进入项目文件夹</li><li>进入终端,输入以下命令,进行初始化<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></li><li>初始换之后就可以本地安装第三方包<div class="note success modern"><p>项目中需要用到的第三方模块,也叫项目依赖,也可以说是项目中依赖的模块</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i &#x27;包名&#x27;</span><br></pre></td></tr></table></figure></li><li>使用项目中安装的第三方模块<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&#x27;包名&#x27;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="开发依赖nodemon"><a href="#开发依赖nodemon" class="headerlink" title="开发依赖nodemon"></a>开发依赖nodemon</h4><div class="note success modern"><p>nodemon可以帮助我们在改完代码以后不需要重新启动本地服务器</p></div><ol><li><p>安装nodemon开发依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodemon -D</span><br></pre></td></tr></table></figure></li><li><p>使用nodemon运行文件</p><ul><li>在package.json文件scripts配置项内,配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;:&quot;nodemon 要执行的文件名&quot;</span><br></pre></td></tr></table></figure><h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4></li></ul></li><li>自动检查package.json依赖自动下载<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i </span><br></pre></td></tr></table></figure></li></ol><h4 id="修改npm下载源"><a href="#修改npm下载源" class="headerlink" title="修改npm下载源"></a>修改npm下载源</h4><ul><li>直接使用npm下载速度属实太慢,建议换个国内的下载源(不管用就自己去找镜像源)</li></ul><ol><li>淘宝镜像<ul><li>npm config set registry <a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a></li></ul></li><li>官方镜像<ul><li>npm config set registry <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></li></ul></li><li>查看当前npm下载源<ul><li>npm config get registry</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的配置项</title>
      <link href="/2025/01/31/Vue%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE%E9%A1%B9/"/>
      <url>/2025/01/31/Vue%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="el"><a href="#el" class="headerlink" title="el"></a>el</h3><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><h3 id="components"><a href="#components" class="headerlink" title="components"></a>components</h3><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><div class="note primary flat"><p>当我们要复用组件,但是组件内的数据希望改变时,可以使用在<code>App.vue</code>使用组件时,传入数据,然后在使用的组件内,通过<code>props</code>配置项接受数据</p></div><ol><li>传入数据,<code>App.vue</code>文件内<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;组件名 name=&quot;xx&quot; address=&quot;xx&quot; v-bind:age=&quot;xxx&quot;&gt;&lt;/组件名&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收数据,所使用的组件文件内</p><ul><li>简单接收<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;address&#x27;</span>,<span class="string">&#x27;age&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li>限制类型接收<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">address</span>:<span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="title class_">Number</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>多层限制接收<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span>  <span class="comment">// 必须</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">address</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">age</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">default</span>:<span class="number">99</span> <span class="comment">// 默认值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>代码演示</p></li></ol><ul><li><code>App.vue</code>中template标签内的代码<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;School name=&quot;制造&quot; address=&quot;江西&quot; v-bind:age=&quot;200&quot;&gt;&lt;/School&gt;</span><br><span class="line">    &lt;School name=&quot;现代&quot; address=&quot;江西&quot; v-bind:age=&quot;150&quot;&gt;&lt;/School&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><code>School.vue</code>中script标签内的代码<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">      name:&#x27;School&#x27;,</span><br><span class="line">      data()&#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            msg:&#x27;江西的大学&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      props:&#123;</span><br><span class="line">        name:&#123;</span><br><span class="line">            type:String,</span><br><span class="line">            required:true  // 必须</span><br><span class="line">        &#125;,</span><br><span class="line">        address:&#123;</span><br><span class="line">            type:String,</span><br><span class="line">            required:true,</span><br><span class="line">        &#125;,</span><br><span class="line">        age:&#123;</span><br><span class="line">            type:Number,</span><br><span class="line">            default:99 // 默认值</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><ol><li>潜在问题<ul><li>传入的值默认不允许修改</li><li>key无法作为传入的值</li></ul></li></ol><h3 id="mixin-混入-混合"><a href="#mixin-混入-混合" class="headerlink" title="mixin(混入/混合)"></a>mixin(混入/混合)</h3><div class="note primary flat"><p>当需要使用的多个组件中,拥有完全相同的功能代码,我们就可以把它抽离,写在一个混合文件中,需要使用的组件中,引入混合使用即可</p></div><ol><li>抽离相同代码,创建一个混合文件,文件内写一个对象,对象内配置相同配置项即可,代码如下<code>mixin.js</code>混合文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出混合</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        &#125;,  </span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在组件内引入混合<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mixin&#125; <span class="keyword">from</span> <span class="string">&#x27;../mixin&#x27;</span></span><br></pre></td></tr></table></figure></li><li>使用混合,配置<code>mixins</code>配置项,为数组类型,里面写入导入的混合即可<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mixins</span>:[mixin],</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的属性</title>
      <link href="/2025/01/31/Vue%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7/"/>
      <url>/2025/01/31/Vue%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h3><ol><li>我们可以通过给一个标签添加ref属性,然后通过当前实例对象/this<code>.$refs</code>获取ref所在的标签</li><li>被用来给元素或组件注册引用信息</li><li>引用在html标签上时,获取的是真实的DOM元素,但应用在组件标签上时,获取到的是,所在组件的实例对象(vc)</li><li>使用方法:<ul><li>打标识: 如:<h1 ref="xxx"></h1></li><li>获取:this.$refs.xxx</li></ul></li></ol><h3 id="scoped属性"><a href="#scoped属性" class="headerlink" title="scoped属性"></a>scoped属性</h3><blockquote><p>这边我们可以在<code>School.vue</code>和<code>Student.vue</code>中分别写一些样式。但是其实这些样式最终都会汇总到一起,既然是汇总在一起的就会出现一个问题,那就是<span class='p red'>类名冲突</span>,如果类名冲突了,后引入的类名是会把先引入的覆盖的。</p></blockquote><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ol><li>一个最笨的解决方法,类名别取一样的就好了</li><li>这边教大家一个合理的解决方法,就是给<code>style</code>标签加上,<code>scoped</code>属性就可以了。scoped是<code>局部的</code>意思。当我们添加了scoped属性,style内的样式就只服务于当前的文件,对其他的文件不起效果。</li></ol><h3 id="lang属性"><a href="#lang属性" class="headerlink" title="lang属性"></a>lang属性</h3><blockquote><p><code>lang属性</code>需要添加在style标签上,用于指定我们的样式是用何种语言写的,比如:’css’,’less’。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> Vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Vue脚手架</title>
      <link href="/2025/01/31/%E4%BD%BF%E7%94%A8Vue%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2025/01/31/%E4%BD%BF%E7%94%A8Vue%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="初始化脚手架"><a href="#初始化脚手架" class="headerlink" title="初始化脚手架"></a>初始化脚手架</h3><p>工具:</p><pre><code>* Node.js(记得配置以下npm淘宝镜像)</code></pre><h4 id="声明"><a href="#声明" class="headerlink" title="声明:"></a>声明:</h4><ol><li>Vue脚手架是Vue官方提供的标准化开发工具(开发平台)</li><li>vue@cli目前版本:4x(目前vue官方推荐使用Vite脚手架)</li><li>文档:<a href="https://cn.vuejs.org/guide/scaling-up/tooling.html#vite">https://cn.vuejs.org/guide/scaling-up/tooling.html#vite</a></li></ol><h4 id="安装Vue-CLI脚手架"><a href="#安装Vue-CLI脚手架" class="headerlink" title="安装Vue@CLI脚手架"></a>安装Vue@CLI脚手架</h4><ol><li><p>执行以下命令,全局安装<code>vue@cli脚手架</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><div class="note primary simple"><p>安装完之后,关闭终端,重新打开终端,输入<code>vue</code>运行,显示一些指令,说明安装成功</p></div></li><li><span class='p red'>切换到需要创建项目的目录</span>,运行以下命令创建脚手架/项目<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create xxxx(项目名)</span><br></pre></td></tr></table></figure></li><li><p>选择需要用到的Vue版本</p><ul><li>这边看自己用的vue是什么版本,我这边用的是vue2<ul><li>babel:用于<code>ES6</code>代码语法转<code>ES5</code></li><li>eslint:用于语法检查</li></ul></li><li>选择好后,回车执行命令  <div class="note primary simple"><p>如果这个过程持续很长时间十几分钟,就检查以下重新配置npm淘宝镜像。一方面取决于所处位置的网速,另一方面其实也取决于电脑配置,只要不是特别特别老的二战老电脑,其实都可以运行</p></div></li><li>创建好之后,可以看到一个<code>xxxx</code>的文件夹说明创建成功了</li></ul></li><li><p>启动项目</p><ul><li>进入创建好的项目<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd xxxx</span><br></pre></td></tr></table></figure></li><li>启动项目<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure></li><li>等待完成之后,可以看到vue给我们开启了一个本地服务器,在浏览器打开就能看见我们的项目了</li><li>按<kbd>CTRL</kbd> + <kbd>C</kbd>停止项目</li></ul></li></ol><h3 id="分析脚手架结构"><a href="#分析脚手架结构" class="headerlink" title="分析脚手架结构"></a>分析脚手架结构</h3><ol><li>配置文件<ul><li><code>.gitignore</code>文件,git的忽略文件,哪些文件不想接受git的管理,配置在此</li><li><code>babel.config.js</code>文件,babel配置文件,用于ES6 ==&gt; ES5,Vue已经配置好了,不需要我们配置什么</li><li><code>package-lock.json</code>和<code>package.json</code>文件,包版本控制文件和包的说明书</li><li><code>README.md</code>文件:项目说明文件</li></ul></li><li>src文件夹<ul><li><code>main.js</code>文件:入口文件,当执行<code>npm run serve</code>,首先运行的文件,里面会进行:<ol><li>引入vue</li><li>引入App组件,是所有组件的父组件</li><li>关闭vue的生产提示</li><li>创建vue实例对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件是整个项目的入口文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入App组件,它是所有组件的父组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建vue实例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="comment">// 将App组件放入容器中</span></span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><code>App.vue</code>文件,父组件文件,管理所有子组件<ol><li>里面会引入其他组件</li></ol></li><li><code>assets</code>文件夹,静态资源文件夹</li><li><code>components</code>文件夹,存放所有<code>.vue</code>文件,除了App.vue以外</li></ul></li><li>public文件夹<ul><li><code>favicon.ico</code>:页面图标</li><li><code>index.html</code>:整个应用的页面<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 整队IE浏览器的特殊配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span>、</span><br><span class="line">    <span class="comment">&lt;!-- 开启移动端的理想视口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置网页标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当浏览器不支持js时,渲染以下字符串 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><code>node_modules</code>文件夹<ul><li>包文件夹</li></ul></li></ol><h3 id="main-js中的render函数"><a href="#main-js中的render函数" class="headerlink" title="main.js中的render函数"></a><code>main.js</code>中的render函数</h3><div class="note primary simple"><p>当我们引入一个残缺的vue时,需要使用redder函数去渲染我们的页面</p></div><ol><li>render函数可以接受一个参数(createElement):意为创建元素<div class="note info simple"><p>createElement也是一个函数,它能创建具体元素编写具体内容</p></div></li></ol><h3 id="关闭语法检车"><a href="#关闭语法检车" class="headerlink" title="关闭语法检车"></a>关闭语法检车</h3><div class="note primary simple"><p>在<code>vue.config.js</code>的defineConfig配置项中配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lintOnSave</span>:<span class="literal">false</span></span><br></pre></td></tr></table></figure></p></div><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>关于不同版本的vue:<ul><li>vue.js与vue.runtime.js的区别<ol><li>vue.js是完整版的,包含:核心功能+模板解析器</li><li>vue.runtime.js是运行版本,只包含核心功能</li></ol></li><li>因为vue.runtime.xxx.js没有模板解析器,不能使用template配置项,需要render函数收到的createElement函数去指定具体内容</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Picgo+Vikadata搭建个人图床</title>
      <link href="/2025/01/27/PicgoVikadata%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
      <url>/2025/01/27/PicgoVikadata%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="PicList-Vikadata搭建个人图床"><a href="#PicList-Vikadata搭建个人图床" class="headerlink" title="PicList+Vikadata搭建个人图床"></a>PicList+Vikadata搭建个人图床</h2><ol><li>工具<ul><li>Node.js</li><li>Picgo</li><li>Vikadata</li></ul></li></ol><h3 id="安装Picgo"><a href="#安装Picgo" class="headerlink" title="安装Picgo"></a>安装Picgo</h3><div class="tag link"><a class="link-card" title="PicList" href="https://github.com/Molunerfinn/PicGo"><div class="left"><img src="https://xiaohutuku.kina.ink/img/005.webp"/></div><div class="right"><p class="text">PicList</p><p class="url">https://github.com/Molunerfinn/PicGo</p></div></a></div><h3 id="打开Picgo"><a href="#打开Picgo" class="headerlink" title="打开Picgo"></a>打开Picgo</h3><ol><li>打开以后点击插件搜索:<span class='p blue'>Vikadata</span>,点击安装。<div class="note info simpel flat"><p>如果搜索不到,就点击网址下载插件:<a href="https://github.com/kwp-lab/picgo-plugin-vikadata">https://github.com/kwp-lab/picgo-plugin-vikadata</a> ,下载完以后解压,打开Picgo,点击插件设置右上角的下载图标,导入本地插件。如果提示导入成功,重启Picgo软件。如果右上角提示npm什么的,就去下载一个版本高点的<a href="https://nodejs.org/zh-cn">Nodejs</a>,nodejs安装好以后,按下<kbd>Win</kbd> + <kbd>R</kbd>,键打开终端,输入<code>node -v</code>,显示版本号即安装完成,此时重启电脑,再次尝试安装<code>Vikadata</code>插件。</p></div></li><li>安装好以后点击图床设置能看见<span class='p red'>Vika维格表</span></li><li>点击删除左边的按钮能进入viak维格表设置<div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic1.imgdb.cn/item/67972a3ad0e0a243d4f82d8d.png"/></div></div></li></ol><h3 id="Picgo绑定Vika维格表"><a href="#Picgo绑定Vika维格表" class="headerlink" title="Picgo绑定Vika维格表"></a>Picgo绑定Vika维格表</h3><ol><li>vika官网地址:<a href="https://vika.cn">https://vika.cn</a></li><li>注册登录</li><li>点击新建,点击空白维格表,名字随意<div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic1.imgdb.cn/item/67977df2d0e0a243d4f834f1.png"/></div></div></li><li>点击头像,设置,绑定邮箱</li><li>点击开发者配置,点击<code>+</code>号,生成令牌,进入新建的维格表,点击上方的API<div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic1.imgdb.cn/item/67977df7d0e0a243d4f834f2.png"/></div></div></li><li>点击<code>Get获取</code>勾选右上方的<code>显示API Token</code></li><li>这时有一串<code>curl</code>的字符串,这个字符串里,<code>datasheets/</code>后面到下一个/之前的东西就是维格表id,将其复制,粘贴在Picgo内维格表配置的,维格表id后</li><li>API Token就是bearer后面的内容<span class='p red'>不包括空格与后面的引号</span>,将其复制,粘贴在Picgo内维格表配置的Api Token后</li><li>字段名称随意,然后点击确认,现在我们的维格表和Picgo之间就绑定了</li></ol><h3 id="测试功能"><a href="#测试功能" class="headerlink" title="测试功能"></a>测试功能</h3><ol><li>点击上传区,将右边的换位vika维格表,我们创建的维格表</li><li>上传一张图片,将下方选择url<div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic1.imgdb.cn/item/67977dfcd0e0a243d4f834f3.png"/></div></div></li><li>点击相册,这时我们的相册内就有了一张图</li><li>点击图片下方的复制,在浏览器输入复制的地址,就能访问我们上传的图</li></ol><div class="note info simpel flat"><p>大功告成</p></div>]]></content>
      
      
      <categories>
          
          <category> 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件化编程</title>
      <link href="/2025/01/27/Vue%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
      <url>/2025/01/27/Vue%E7%BB%84%E4%BB%B6%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="对组件化的理解"><a href="#对组件化的理解" class="headerlink" title="对组件化的理解"></a>对组件化的理解</h3><ol><li><p>什么是组件?</p><div class="note success moderns flat"><p>实现一个应用中局部功能代码,资源的集合</p></div></li><li><p>组件与传统模式编程的区别</p><ul><li>传统模式编写应用  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic1.imgdb.cn/item/679ca3c8d0e0a243d4f8c376.pngs,height = 70px"/></div></div><h4 id="浅存的问题"><a href="#浅存的问题" class="headerlink" title="浅存的问题!"></a>浅存的问题!</h4><pre><code>  1. 依赖关系混乱,不太好维护      2. 代码的复用率并不高,有些时候需要我们手动&#123;% span red code,复制 %&#125;。JS内专门有一个叫&#123;% span blue code,模块化 %&#125;的技术处理此问题,但它只针对js。</code></pre></li><li>组件化编程  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic1.imgdb.cn/item/679ca3d3d0e0a243d4f8c377.pngs,height = 70px"/></div></div>  <div class="note info moderns flat"><p>将实现一块功能的所有代码,资源封装在同一个组件中,该组件只服务于此功能,别的区域想使用同样功能,只需引入即可,组件内可以嵌套。</p></div>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic1.imgdb.cn/item/679ca3d6d0e0a243d4f8c379.png,height = 70px"/></div></div></li></ul></li><li><p>组件化的优势</p><ul><li>便于维护</li><li>代码复用率高</li></ul></li></ol><h3 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h3><ol><li><p>创建非单文件组件,需要用<code>Vue.extend()</code>API,然后传入一个配置对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建非单文件组件</span></span><br><span class="line"><span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="comment">// 结构</span></span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">                &lt;h3&gt;&#123;&#123;name&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">                &lt;h3&gt;&#123;&#123;address&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">                &lt;button @click=&quot;hello&quot;&gt;点我打招呼&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;制造&#x27;</span>,</span><br><span class="line">                <span class="attr">address</span>:<span class="string">&#x27;江西&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="title function_">hello</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure> <div class="note info moderns flat"><p>Vue.extend()内需要写一个配置项,配置项的写法几乎与vm一致</p></div><ol><li>配置项内不需要写<code>el</code>属性,因为组件没有确定服务对象</li><li>配置项内的<code>data</code>需要写成函数式,返回值为想要的对象\</li><li><code>template</code>是模板,结构需要放在模板内,并且只能能有一个根元素</li></ol></li><li><p>注册组件</p><div class="note success moderns flat"><p>注册组件需要在vm内添加新配置项,<code>components</code>,配置项为对象型,key对应真正的组件名,值对应之前的组件名</p></div><ul><li><p>局部注册</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="comment">// 2.注册组件（局部注册）</span></span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        <span class="comment">// 组件名:组件变量</span></span><br><span class="line">        school,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>全局注册</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;school&#x27;</span>.<span class="property">hello</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 组件标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>总结</p><ul><li>Vue中使用组件的三大步骤<ol><li>创建组件</li><li>注册组件</li><li>使用组件</li></ol></li><li>如何定义一个组件  <div class="note success moderns flat"><p>使用<code>Vue.extend(options)</code>创建组件,其中options与<code>new Vue(options)</code>传入的options几乎一样</p></div>  区别如下:<pre><code>  1. el不用写,最终所有的组件都要经过vm管理,由vm决定服务与哪个容器  2. data必须写成函数式,避免组件被复用时数据存在引用关系</code></pre>  <strong><em>使用template可以配置组件结构</em></strong></li><li>如何注册组件<ol><li>局部注册:靠<code>new Vue</code>时配置<code>components</code>配置项</li><li>全局注册:靠<code>Vue,component(&#39;组件名&#39;,组件)</code></li></ol></li><li>编写组件标签<br>  &lt;组件名&gt;&lt;/组件名&gt;</li></ul></li></ol><h3 id="关于组件的几个注意点"><a href="#关于组件的几个注意点" class="headerlink" title="关于组件的几个注意点!"></a>关于组件的几个注意点!</h3><ol><li>组件名的写法:<ul><li>一个单词组成 — 建议纯小写</li><li>多个单词组成:<ol><li>段横杠连接: ‘my-school’</li><li>每个单词首字母大写: ‘MySchool’ <code>前提:需要脚手架</code></li></ol></li></ul></li><li>定义组件的简写方式<ul><li>const comp = options</li></ul></li></ol><h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><div class="note success info flat"><p>组件内依然可以配置<code>components</code>配置项</p></div><div class="note success info flat"><p>实际开发中,我们会配置一个app组件,由vm管理app,由app管理所有其他组件,这样开发更有助于管理</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        // 定义学生组件</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        const zhangs = &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            template: `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="tag">&lt;<span class="name">h6</span>&gt;</span>学生:</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="tag">&lt;<span class="name">h6</span>&gt;</span>年龄:</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            `,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            data()&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                return &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                    name: &#x27;张三&#x27;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                    age: &#x27;20&#x27;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        // 定义学校组件</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        const school = &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            template: `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>学校信息<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="tag">&lt;<span class="name">h6</span>&gt;</span>学校名:</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="tag">&lt;<span class="name">h6</span>&gt;</span>地址:</span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            `,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            data()&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                return &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                    name:&#x27;现代&#x27;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                    address:&#x27;江西&#x27;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            components:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                &#x27;student&#x27;:zhangs</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        // 定义打招呼组件</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        const hello = &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            template: `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            `,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        // 定义app组件</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        const app = &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            template:`</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            `,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            components:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                school,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                hello</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        Vue.config.productionTip = false</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        new Vue(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#123;/* 使用app组件 */&#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            template:`<span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span>`,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            el:&#x27;#root&#x27;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#123;/* 注册app组件 */&#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            components:&#123;app&#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="关于VueComponent"><a href="#关于VueComponent" class="headerlink" title="关于VueComponent"></a>关于VueComponent</h3><ol><li>school组件是什么?<ul><li>school本质就是一个函数,并且是一个构造函数,是由Vue.extend()生成的.</li></ul></li><li>当我们写组件标签时,vue就会帮我们生成组件标签的实例对象</li><li>每次调用Vue.extend()返回值都是一个全新的<code>VueComponent</code>!!!</li><li>关于this指向问题<ul><li>组件中:this指向<code>Vue Component</code>实例对象</li><li>new Vue()中:this指向Vue实例对象</li></ul></li><li>VueComponent实例对象,简称vc/组件实例对象,Vue实例对象,简称vm</li></ol><h3 id="一个重要的内置关系"><a href="#一个重要的内置关系" class="headerlink" title="一个重要的内置关系"></a>一个重要的内置关系</h3><div class="note success info flat"><p>VueComponent.prototype.<strong>proto</strong> === Vue.prototype,这个关系可以使组件实例对象(vc)可以访问到Vue原型上的属性方法。</p></div><p><strong><em>实例隐性原型属性,永远指向自己缔造者的原型对象</em></strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://pic1.imgdb.cn/item/679ca4cdd0e0a243d4f8c391.png,height = 70px"/></div></div></p><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><ol><li>Vue单文件组件需要使用<code>.vue</code>作为后缀,一个文件便是一个组件</li><li>Vue单文件组件类似于.less,浏览器无法直接解析,需要借助外部工具加工<ul><li>webpack工具(比较麻烦)</li><li>Vue官方提供的脚手架</li></ul></li><li>单文件组件内首先需要写三个标签<ul><li>template — 结构标签</li><li>script — 脚本标签</li><li>style — 样式标签<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">    &lt;!-- 单文件组件School --&gt;</span><br><span class="line">&lt;!-- 三个标签 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 结构标签 --&gt;</span><br><span class="line">    &lt;div class=&quot;dome&quot;&gt;</span><br><span class="line">        &lt;h2&gt;学校名称:&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学校名称:&#123;&#123; address &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;showName&quot;&gt;点我显示学校名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 脚本标签</span><br><span class="line">    // 创建组件</span><br><span class="line">    const school = Vue.extend(&#123;</span><br><span class="line">        name:&#x27;School&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            name:&#x27;现代&#x27;,</span><br><span class="line">            address:&#x27;江西&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            showName()&#123;</span><br><span class="line">                alert(this.name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 暴露组件</span><br><span class="line">    export &#123;school&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/* 样式标签 */</span><br><span class="line">.dome&#123;</span><br><span class="line">    background: orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><div class="note success info flat"><p>组件写完以后,需要使用<span class='p red'>import</span>暴露出去</p></div></li></ul></li><li>创建<code>App.vue</code>文件,管理所有的组件</li><li>创建<code>main.js</code>文件,作为vue的入口文件,在里面导入<code>App.vue</code>并且,创建Vue实例对象(vm)</li><li>创建<code>index.html</code>文件,页面文件,准备Vue容器</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue生命周期</title>
      <link href="/2025/01/26/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2025/01/26/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><div class="note danger flat"><p>Vue的生命周期,表示Vue在完成某些关键事件时间点时,所调用的函数。比如<code>mounted()</code>函数就是,Vue在完成解析模板,并且把元素<code>挂载</code>在页面上以后调用的函数,也称为生命周期函数。生命周期函数不需要写在methods配置项内,而是直接写在Vue({})配置项内。</p></div><ol><li>生命周期:<ul><li>又名:生命周期回调函数,生命周期函数,生命周期钩子。</li><li>Vue在关键时刻帮我们调用的一些特殊函数</li><li>生命周期函数的名字是固定写法</li><li>生命周期函数内的this指向Vue实例对象</li></ul></li></ol><h3 id="生命周期全流程"><a href="#生命周期全流程" class="headerlink" title="生命周期全流程"></a>生命周期全流程</h3><div class="timeline  red"><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>生命周期挂载流程</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>New Vue</p></div>        </div>        <div class='timeline-item-content'><p>最初,初始化Vue实例对象</p><ul><li>进入环节一(挂载流程)</li></ul></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Init Events &amp; Lifecycle</p></div>        </div>        <div class='timeline-item-content'><p>环节一:初始化生命周期和事件(如:once事件),但数据代理还未开始(也就是说vm身上此时还没有<code>_data</code>和方法)。<br>该环节结束之后Vue会调用<code>beforeCreate()</code>函数,此时无法通过vm访问到data中的数据和methods中配置的方法。</p><ul><li>进入环节二</li></ul></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Init injections &amp; reactivity</p></div>        </div>        <div class='timeline-item-content'><p>环节二:初始化数据监视和数据代理。<br>该环节结束之后Vue会调用<code>created()</code>函数,此时可以通过vm访问到data中的数据和methods中配置的方法。</p><ul><li>进入环节三</li></ul></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Has ‘el’ options?</p></div>        </div>        <div class='timeline-item-content'><p>环节三:此时会进入判断:有没有<code>el</code>配置项?<br>从此环节开始到环节五结束,Vue开始解析模板,生成虚拟dom(内存中),页面还不能显示解析好的内容!</p><div class="note danger flat"><p>Yes</p><ul><li>直接进入环节四</li></ul></div><div class="note danger flat"><p>No-当<code>vm.$mount(el)</code>调用时,才会接着往下走(当通过vm.$mount()指定el时)</p><ul><li>进入环节四</li></ul></div></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Has ‘template’ options?</p></div>        </div>        <div class='timeline-item-content'><p>环节四:此时依然是进入判断:判断有没有<code>template</code>(模板)配置项?</p><div class="note danger flat"><p>Yes</p><ul><li>进入环节五-Yes情况</li></ul></div><div class="note danger flat"><p>No</p><ul><li>进入环节五-No情况!</li></ul></div></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Compile template into render function</p></div>        </div>        <div class='timeline-item-content'><p>环节五-Yes情况:编译一个模板template到<code>render()</code>渲染函数内</p><ul><li>进入环节六</li></ul></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Compile el.s outerHTML as template</p></div>        </div>        <div class='timeline-item-content'><p>环节五-No情况:编译<code>el</code>的外部html,作为模板(说白了就是<code>el</code>所在的div算不算模板)。<br>此时<code>el</code>所在的div也算作模板。之后Vue会调用<code>beforeMount()</code>函数,意为开始挂载之前。此时,页面呈现未经Vue解析的Dom结构,所有对Dom的操作最终都不奏效。</p><ul><li>进入环节六</li></ul></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Create vm.$el and replace “el” with it</p></div>        </div>        <div class='timeline-item-content'><p>环节六:用vm身上的<code>$el</code>替换整个<code>el</code>(也就是容器内的东西)<br>此时将虚拟内存中的dom转为真实dom,插入页面。<br>此时会调用<code>mounted()</code>函数,意为挂载完毕。此时页面呈现的是经过Vue解析dom,对dom的操作有效,初始化过程结束,一般在此时进行,开启定时器,发送网络请求,订阅消息,绑定自定义事件…初始化操作<br>此时挂载流程结束</p><ul><li>进入环节七(更新流程)</li></ul></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Virtual DOM re-render and patch</p></div>        </div>        <div class='timeline-item-content'><p>环节七:更新流程</p><ol><li>Vue会先调用一个<code>beforeUpdate()</code>函数,意为更新数据之前,此时数据是新的,但是页面还是旧的(页面与数据未同步)。</li><li>然后才是根据新数据,生成新虚拟Dom,随后与旧的虚拟Dom进行比较,最终完成页面更新(Model =&gt; View)</li><li>之后Vue在调用<code>updated()</code>函数,此时数据是新的,页面也是新的<br>此时更新流程结束,当vm身上的<span class='p code blue'>vm.$destroy()</span>销毁函数被调用才会进入销毁流程</li></ol><ul><li>进入环节八(销毁流程)</li></ul></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Teardown watchers, child components and event listeners</p></div>        </div>        <div class='timeline-item-content'><p>环节七:销毁流程</p><ol><li>销毁之前,Vue会执行一个<code>BeforeDestroy()</code>函数,,此时vm中的所有data,methods,指令都是可用的，马上就会执行销毁流程,一般在此阶段,关闭定时器,取消订阅消息,解绑自定义事件…</li><li>调用完<code>BeforeDestroy()</code>后,vm会进入销毁阶段</li><li>销毁完毕,Vue会调用<code>destroyed()</code>函数。</li></ol></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>End</p></div>        </div>        <div class='timeline-item-content'><ul><li>生命周期结束</li></ul></div>      </div></div><h3 id="关于生命周期的坑"><a href="#关于生命周期的坑" class="headerlink" title="关于生命周期的坑"></a>关于生命周期的坑</h3><ol><li>销毁问题 <div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>在<code>BeforeDestroy()</code>函数内,虽然能访问数据,方法,</p></div></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>一共八个(四对)钩子 — 其实还有另外三个生命周期钩子<ol><li>beforeCreate()和cteated():数据监视和数据代理创建之前和创建完毕。</li><li>beforeMount()和mounted():挂载之前和挂载完毕</li><li>beforeUpdate()和updated():更新之前与更新完毕</li><li>beforeDestroy()和destroyed():销毁之前与销毁完毕</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> Vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue自定义指令</title>
      <link href="/2025/01/26/Vue%E6%8C%87%E4%BB%A4/"/>
      <url>/2025/01/26/Vue%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue自定义指令"><a href="#Vue自定义指令" class="headerlink" title="Vue自定义指令"></a>Vue自定义指令</h2><h3 id="自定义标签语法"><a href="#自定义标签语法" class="headerlink" title="自定义标签语法"></a>自定义标签语法</h3><div class="note info modern"><p>自定义标签需要配置在<span class='p yellow'>directives</span>配置项中 </p></div><ol><li>函数式写法: <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">directives</span>:&#123;</span><br><span class="line">    <span class="title function_">fun</span>(<span class="params">element, binging</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数式写法可以收到两个参数<ol><li><code>element</code>:是指令所在的真实DOM元素</li><li><code>binding</code>:是一个对象,里面包含传入值,指令名,表达式…指令<br> <strong><em>binding意为绑定,作用是让我们的自定义指令与元素标签之间建立绑定关系</em></strong></li></ol></li><li>函数的调用时间<ol><li>指令与元素成功绑定时调用一次</li><li>指令所在的模板成功解析时调用一次</li></ol></li></ul></li></ol><ul><li>对象式写法:<ul><li>对象式写法需要把自定义指令写成对象形式</li><li>对象内需要写3个指定函数<ol><li><code>bind()</code>函数:指令与元素成功绑定时,调用</li><li><code>inserted()</code>函数:绑定的元素被放入页面时,调用</li><li><code>update()</code>函数:指令所在的模板重新更新时调用</li></ol></li></ul></li></ul><h3 id="关于自定义指令容易踩的坑！！！"><a href="#关于自定义指令容易踩的坑！！！" class="headerlink" title="关于自定义指令容易踩的坑！！！"></a>关于自定义指令容易踩的坑！！！</h3><ol><li>指令名问题<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>如果指令需要多个单词组成,最好写成<code>v-单词-单词</code>的形式,而不要用大驼峰写法。并且,在声明指令的时候,指令名需要用<code>&#39;&#39;</code>包上。</p></div></li><li>指令回调函数内,<code>this</code>指向问题<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>所有自定义指令内的回调函数,<code>this</code>指向都是<code>Window</code>,与我们写的是不是箭头函数没关系。</p></div></li><li>局部指令与全局指令<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>我们在<code>directives</code>内声明的所有指令都是<code>局部指令</code>,之后当前的容器可以使用。声明全局指令的方法与全局过滤器一样,需要在容器外面使用<code>Vue.directive(参数1,参数2)</code>声明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(指令名, <span class="keyword">function</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></div></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>定义语法<ul><li>局部  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">directives</span>:&#123;</span><br><span class="line">        &lt;!-- 函数式 --&gt;</span><br><span class="line">        <span class="title function_">fun</span>(<span class="params">element,binding</span>)&#123;&#125;</span><br><span class="line">        &lt;!-- 或者 --&gt;</span><br><span class="line">        &lt;!-- 对象式 --&gt;</span><br><span class="line">        <span class="attr">object</span>:&#123;</span><br><span class="line">            <span class="title function_">binding</span>(<span class="params">element.binding</span>)&#123;&#125;,</span><br><span class="line">            <span class="title function_">inserted</span>(<span class="params">element.binding</span>)&#123;&#125;,</span><br><span class="line">            <span class="title function_">update</span>(<span class="params">element.binding</span>)&#123;&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>全局  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 函数式 --&gt;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(fun,<span class="keyword">function</span>(<span class="params">element,binding</span>)&#123;&#125;)</span><br><span class="line">&lt;!-- 或者 --&gt;</span><br><span class="line">&lt;!-- 对象式 --&gt;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(fun,<span class="attr">object</span>:&#123;</span><br><span class="line">            <span class="title function_">binding</span>(<span class="params">element.binding</span>)&#123;&#125;,</span><br><span class="line">            <span class="title function_">inserted</span>(<span class="params">element.binding</span>)&#123;&#125;,</span><br><span class="line">            <span class="title function_">update</span>(<span class="params">element.binding</span>)&#123;&#125;,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li>对象式配置对象中常用的三个回调<ul><li>binding(element.binding){},</li><li>inserted(element.binding){},</li><li>update(element.binding){},</li><li>并不代表只有三个</li></ul></li><li>备注:<ul><li>指令定义时不加v-,但使用时要加v-</li><li>指令名多个单词要使用<code>-</code>连接,不要使用大驼峰</li></ul></li></ol><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><details class="folding-tag" red><summary> question_1:创建自定义指令把绑定的值放大10倍 </summary>              <div class='content'>              <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    当前的x值是:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;x&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    放大10倍后x值是:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;x&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;x++&quot;</span> &gt;</span>点我x+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">x</span>:<span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">big</span>(<span class="params">element, binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" red><summary> question_2:定义一个v-fbind指令可以让绑定的值默认获取焦点 </summary>              <div class='content'>              <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;x&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">x</span>:<span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fbind</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 指令与元素成功绑定时调用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    element.<span class="property">value</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 指令所在的元素被插入页面被调用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">inserted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    element.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 指令所在的模板被重新解析</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">update</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    element.<span class="property">value</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly标签外挂</title>
      <link href="/2025/01/26/Butterfly%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/"/>
      <url>/2025/01/26/Butterfly%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><ul><li>本文档编写参考以下文档</li></ul><ol><li><a href="https://butterfly.js.org/posts/ceeb73f/">Butterfly 文档(四)标签外挂</a></li><li><a href="https://www.fomal.cc/posts/2013454d.html">Fomalhaut-Markdown语法与外挂标签汇总</a></li></ol><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ol><li>Markdown外挂标签格式是Hexo独有格式，并不适用于其他地方</li><li>以下写法只适用于Butterfly主题，用在其他不会有效果</li></ol><h3 id="选项卡标签"><a href="#选项卡标签" class="headerlink" title="选项卡标签"></a>选项卡标签</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法</button><button type="button" class="tab">参数配置</button><button type="button" class="tab">Code</button><button type="button" class="tab">最终效果</button></div><div class="tab-contents"><div class="tab-item-content active"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs %&#125; # 选项卡标签头</span><br><span class="line">&lt;!-- tab --&gt; # 分页</span><br><span class="line">输入内容</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125; # 尾</span><br></pre></td></tr></table></figure></code></pre></div><div class="tab-item-content"><ol><li>选项卡标签参数（写在tabs后面）<ol><li>name:<ul><li>选项卡标签的名称</li><li>必选</li></ul></li><li>[index]:<ul><li>默认分页索引</li><li>默认值为1</li><li>如果输入-1,则默认不选择分页</li><li>可选<br>2.分页标签参数（写在tab后面）</li></ul></li><li>Tab name:<ul><li>分页标签标题</li><li>未指定则使用选项卡标签标题后最</li><li>指定了图标，但未指定标题，则使用图标</li><li>可选</li></ul></li><li>[@icon]:<ul><li>icon图标名称</li><li>会在标题前面添加一个图标</li><li>可选</li></ul></li></ol></li></ol></div><div class="tab-item-content"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs 选项卡标题 [1] %&#125;</span><br><span class="line">&lt;!-- tab 分页一 @fab fa-apple-pay --&gt;</span><br><span class="line">**这是第一页**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 分页二 --&gt;</span><br><span class="line">**这是第二页**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 分页三 --&gt;</span><br><span class="line">**这是第三页**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></code></pre></div><div class="tab-item-content"><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active"><i class="fab fa-apple-pay"></i>分页一</button><button type="button" class="tab">分页二</button><button type="button" class="tab">分页三</button></div><div class="tab-contents"><div class="tab-item-content active"><p><strong>这是第一页</strong></p></div><div class="tab-item-content"><p><strong>这是第二页</strong></p></div><div class="tab-item-content"><p><strong>这是第三页</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="行内文本样式"><a href="#行内文本样式" class="headerlink" title="行内文本样式"></a>行内文本样式</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法</button><button type="button" class="tab">参数配置</button><button type="button" class="tab">Code</button><button type="button" class="tab">最终效果</button></div><div class="tab-contents"><div class="tab-item-content active"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% 参数 文本text %&#125;</span><br></pre></td></tr></table></figure></code></pre></div><div class="tab-item-content"><ol><li>参数<ul><li>u(下划线), emp(着重号), wavy(波浪线), del(删除线), kbd(键盘样式), psw(密码样式)</li></ul></li></ol></div><div class="tab-item-content"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 我是下划线 %&#125;</span><br><span class="line">&#123;% emp 我是着重号 %&#125;</span><br><span class="line">&#123;% wavy 我是波浪线 %&#125;</span><br><span class="line">&#123;% del 我是删除线 %&#125;</span><br><span class="line">键盘:&#123;% kbd CTRL %&#125; + &#123;% kbd C %&#125;</span><br><span class="line">密码:&#123;% psw hjx1234 %&#125;</span><br></pre></td></tr></table></figure></code></pre></div><div class="tab-item-content"><p><u>我是下划线</u></p><p><emp>我是着重号</emp></p><p><wavy>我是波浪线</wavy><br><del>我是删除线</del><br>键盘:<kbd>CTRL</kbd> + <kbd>C</kbd><br>密码:<psw>hjx1234</psw></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法</button><button type="button" class="tab">参数配置</button><button type="button" class="tab">Code</button><button type="button" class="tab">最终效果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% 标签参数 样式参数(多个参数以空格分隔), 文本 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>标签参数<ul><li>p(段落标签)/span(行内标签)</li></ul></li><li>字体<ul><li>logo/code</li></ul></li><li>颜色<ul><li>red, yellow, green, cyan, blue, gray</li></ul></li><li>大小<ul><li>small, h1, h2, h3, h4, large, huge, ultra</li></ul></li><li>对其方式<ul><li>center, left, right</li></ul></li></ol></div><div class="tab-item-content"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span logo red h2, Hexo %&#125;</span><br><span class="line">&#123;% span code yellow h4, Butterfly %&#125;</span><br></pre></td></tr></table></figure></code></pre></div><div class="tab-item-content"><p><span class='p logo red h2'>Hexo</span><br><span class='p code yellow h4'>Butterfly</span></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="引用note"><a href="#引用note" class="headerlink" title="引用note"></a>引用note</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法</button><button type="button" class="tab">参数配置</button><button type="button" class="tab">Code</button><button type="button" class="tab">最终效果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 默认icon</span><br><span class="line">&#123;% note [class] [style] %&#125;Note提示块标签&#123;% endnote %&#125; </span><br><span class="line"># 外部icon</span><br><span class="line">&#123;% note [class] [icon] [style] %&#125;Note提示块标签&#123;% endnote %&#125; </span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>class<ul><li>标识(不同标识有不同配色)default, primary, success, info, warning, danger</li><li>可选</li></ul></li><li>icon <ul><li>可配置自定义icon(只支持fontawesome图标)</li><li>可选</li></ul></li><li>style <ul><li>simple, modern, flat, disabled</li><li>可选</li></ul></li></ol></div><div class="tab-item-content"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note info simpel %&#125; note提示快 &#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2025年快到了....&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></code></pre></div><div class="tab-item-content"><div class="note info simpel flat"><p>note提示快 </p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2025年快到了….</p></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="复选框-单选按钮样式"><a href="#复选框-单选按钮样式" class="headerlink" title="复选框 / 单选按钮样式"></a>复选框 / 单选按钮样式</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法</button><button type="button" class="tab">参数配置</button><button type="button" class="tab">Code</button><button type="button" class="tab">最终效果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [style], 文本(支持简单md) %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>tip<ul><li>checkbox(复选框), radio(单选框)</li></ul></li><li>style<ul><li>样式(只适用于复选框): plus, minus, times</li><li>颜色: red, yellow, green, blue(支持自定义颜色)</li><li>可选</li></ul></li><li>checked<ul><li>默认不选,添加为选中状态</li><li>可选</li></ul></li></ol></div><div class="tab-item-content"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox plus yellow checked, Hexo %&#125;</span><br><span class="line">&#123;% checkbox minus red, Butterfly %&#125;</span><br><span class="line">&#123;% radio red checked, Butterfly %&#125;</span><br><span class="line">&#123;% radio red, Butterfly %&#125;</span><br></pre></td></tr></table></figure></code></pre></div><div class="tab-item-content"><div class='checkbox plus yellow checked'><input type="checkbox" checked="checked"/>            <p>Hexo</p>            </div><div class='checkbox minus red'><input type="checkbox" />            <p>Butterfly</p>            </div><div class='checkbox red checked'><input type="radio" checked="checked"/>            <p>Butterfly</p>            </div><div class='checkbox red'><input type="radio" />            <p>Butterfly</p>            </div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法</button><button type="button" class="tab">参数配置</button><button type="button" class="tab">Code</button><button type="button" class="tab">最终效果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline title [,color] %&#125;</span><br><span class="line">&lt;!-- timeline timeTitle --&gt;</span><br><span class="line">内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline timeTitle --&gt;</span><br><span class="line">内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>title<ul><li>时间轴标题</li><li>可选</li></ul></li><li>color<ul><li>颜色:red, orange, yellow, green, blue, pink</li><li>可选</li></ul></li><li>timeTitle<ul><li>时间节点标题</li><li>可选</li></ul></li></ol></div><div class="tab-item-content"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 此生,red %&#125;</span><br><span class="line">&lt;!-- timeline 2010 --&gt;</span><br><span class="line">小学</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 2025 --&gt;</span><br><span class="line">大学毕业</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></div><div class="tab-item-content"><div class="timeline red"><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>此生</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2010</p></div>        </div>        <div class='timeline-item-content'><p>小学</p></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2025</p></div>        </div>        <div class='timeline-item-content'><p>大学毕业</p></div>      </div></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="链接卡片"><a href="#链接卡片" class="headerlink" title="链接卡片"></a>链接卡片</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法</button><button type="button" class="tab">参数配置</button><button type="button" class="tab">Code</button><button type="button" class="tab">最终效果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link title, src, url %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>title<ul><li>链接卡片标题</li></ul></li><li>src<ul><li>链接网址</li></ul></li><li>url<ul><li>标题图片</li><li>可选</li></ul></li></ol></div><div class="tab-item-content"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 亢苏公のblog, https://xiaohu.kina.ink/, https://xiaohutuku.kina.ink/img/DayHome.webp %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></div><div class="tab-item-content"><div class="tag link"><a class="link-card" title="亢苏公のblog" href="https://xiaohu.kina.ink/"><div class="left"><img src="https://xiaohutuku.kina.ink/img/DayHome.webp"/></div><div class="right"><p class="text">亢苏公のblog</p><p class="url">https://xiaohu.kina.ink/</p></div></a></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="行内图片-单张图片"><a href="#行内图片-单张图片" class="headerlink" title="行内图片/单张图片"></a>行内图片/单张图片</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法</button><button type="button" class="tab">参数配置</button><button type="button" class="tab">Code</button><button type="button" class="tab">最终效果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip url, width, height, alt, bg %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>tip<ul><li>inlineimage(行内)/image(单张)</li></ul></li><li>url<ul><li>图片链接</li></ul></li><li>width<ul><li>图片宽度</li><li>不适配行内图片</li></ul></li><li>height<ul><li>图片高度</li><li>可选</li></ul></li><li>alt<ul><li>提示</li><li>不适配行内图片</li><li>可选</li></ul></li><li>bg<ul><li>背景占位颜色</li><li>不适配行内图片</li><li>可选</li></ul></li></ol></div><div class="tab-item-content"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">你好:&#123;% inlineimage https://xiaohutuku.kina.ink/img/DayHome.webp, height = 20px %&#125;</span><br><span class="line">&#123;% image https://xiaohutuku.kina.ink/img/DayHome.webp, height = 100px, alt = &#x27;甘雨&#x27;, bg = #1D0C04 %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></div><div class="tab-item-content"><p>你好:<img no-lazy class="inline" src="https://xiaohutuku.kina.ink/img/DayHome.webp" style="height:1.5em"/></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://xiaohutuku.kina.ink/img/DayHome.webp"/></div></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法</button><button type="button" class="tab">参数配置</button><button type="button" class="tab">Code</button><button type="button" class="tab">最终效果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video src %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>src<ul><li>视频链接</li></ul></li></ol></div><div class="tab-item-content"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video blob:https://www.bilibili.com/260ce2c2-323d-4d2e-99ea-e5495ba2e66a %&#125;</span><br></pre></td></tr></table></figure></code></pre></div><div class="tab-item-content"><div class="video"><video controls preload><source src='blob:https://www.bilibili.com/260ce2c2-323d-4d2e-99ea-e5495ba2e66a' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="图库-照片"><a href="#图库-照片" class="headerlink" title="图库/照片"></a>图库/照片</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法</button><button type="button" class="tab">参数配置</button><button type="button" class="tab">Code</button><button type="button" class="tab">最终效果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">图库:&#123;% galleryGroup title description link img-url %&#125;</span><br><span class="line">图片:&#123;% gallery %&#125; markdown格式图片 &#123;% endgallery %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>title<ul><li>标题</li></ul></li><li>description<ul><li>描述</li></ul></li><li>link<ul><li>链接</li></ul></li><li>img-url<ul><li>封面</li></ul></li></ol></div><div class="tab-item-content"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;&#123;% galleryGroup Blog, 博客, #, https://xiaohutuku.kina.ink/img/DayHome.webp %&#125;&lt;/div&gt;</span><br><span class="line">&#123;% gallery %&#125; ![](https://xiaohutuku.kina.ink/img/DayHome.webp) &#123;% endgallery %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></div><div class="tab-item-content"><div class="gallery-group-main"><figure class="gallery-group">    <img class="gallery-group-img no-lightbox" src='https://xiaohutuku.kina.ink/img/DayHome.webp' alt="Group Image Gallery">    <figcaption>      <div class="gallery-group-name">Blog,</div>      <p>博客,</p>      <a href='#,'></a>    </figcaption>  </figure></div><div class="gallery-container" data-type="data" data-button="" data-limit="10" data-first="10">    <div class="gallery-items">[{"url":"https://xiaohutuku.kina.ink/img/DayHome.webp","alt":"","title":""}]</div>  </div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="折叠框"><a href="#折叠框" class="headerlink" title="折叠框"></a>折叠框</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法</button><button type="button" class="tab">参数配置</button><button type="button" class="tab">Code</button><button type="button" class="tab">最终效果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding state color, title %&#125; Hello world!!! &#123;% endfolding %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>state<ul><li>默认状态: open(打开)</li></ul></li><li>color<ul><li>颜色: red, orange, yellow …</li></ul></li><li>title <ul><li>折叠框标题</li></ul></li></ol></div><div class="tab-item-content"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding yellow, fold %&#125; Hello World &#123;% endfolding %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></div><div class="tab-item-content"><details class="folding-tag" yellow><summary> fold </summary>              <div class='content'>              <p>Hello World </p>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="诗词"><a href="#诗词" class="headerlink" title="诗词"></a>诗词</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法</button><button type="button" class="tab">参数配置</button><button type="button" class="tab">Code</button><button type="button" class="tab">最终效果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem title, author %&#125; 诗词 &#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>title<ul><li>标题</li></ul></li><li>author<ul><li>作者</li></ul></li></ol></div><div class="tab-item-content"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 滕王阁序, 王勃 %&#125; 落霞与孤鹜齐飞,秋水共长天一色。 &#123;% endpoem %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></div><div class="tab-item-content"><div class='poem'><div class='poem-title'>滕王阁序</div><div class='poem-author'> 王勃</div><p>落霞与孤鹜齐飞,秋水共长天一色。 </p></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="交互注释"><a href="#交互注释" class="headerlink" title="交互注释"></a>交互注释</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法</button><button type="button" class="tab">参数配置</button><button type="button" class="tab">Code</button><button type="button" class="tab">最终效果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota label , text %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>label<ul><li>注释内容</li></ul></li><li>text <ul><li>交互显示内容</li></ul></li></ol></div><div class="tab-item-content"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></div><div class="tab-item-content"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="气泡注释"><a href="#气泡注释" class="headerlink" title="气泡注释"></a>气泡注释</h3><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">语法</button><button type="button" class="tab">参数配置</button><button type="button" class="tab">Code</button><button type="button" class="tab">最终效果</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble content , notation ,background-color %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><ol><li>content<ul><li>注释内容</li></ul></li><li>notation<ul><li>悬浮显示的注释内容</li></ul></li><li>background-color<ul><li>旗袍背景色</li><li>可选</li></ul></li></ol></div><div class="tab-item-content"><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble 世界你好 , Hellow %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></div><div class="tab-item-content"><p><span class="bubble-content">世界你好 </span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;"> Hellow</span>&lt;/span&gt;</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> Butterfly主题美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly主题美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客</title>
      <link href="/2025/01/26/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/"/>
      <url>/2025/01/26/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<!-- Hexo博客部署(一) --><h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><ul><li>Node.js</li><li>Hexo</li><li>Github</li><li>Git</li></ul><h3 id="Node-js下载"><a href="#Node-js下载" class="headerlink" title="Node.js下载"></a>Node.js下载</h3><ol><li>尽量下载旧些的版本,不然后续可能遇到以下坑(本人使用v12.19.0):<a href="https://nodejs.org/download/release/v12.19.0/">https://nodejs.org/download/release/v12.19.0/</a></li><li>点击后缀<code>x64.msi</code>文件下载</li><li>安装包下载好后打开安装即可</li><li>安装一直点下一步就行,地址尽量用默认的</li><li>安装好后,按<code>WIN + R</code>,左下角输入<code>cmd</code>,进入CMD窗口,输入命令<br> <code>node -v</code><br> 输入完显示node版本,node就算是安装好了</li><li>配置npm镜像,继续在终端输入已下命令:<br> <code>npm config set registry https://registry.npmmirror.com</code></li></ol><h3 id="Hexo下载"><a href="#Hexo下载" class="headerlink" title="Hexo下载"></a>Hexo下载</h3><ol><li>继续在终端输入命令:<br> <code>npm install -g hexo-cli</code></li></ol><ul><li>如果显示报错,输入以下命令查看npm配置的镜像是不是上面配置的镜像:<br>  <code>npm config get registry</code><br>  如果镜像不是,就重新配置一下,如果镜像对了,就自己去网上找一个镜像地址配置上</li></ul><ol><li>下载完以后输入以下命令测试<br> <code>hexo -v</code><br> 如果显示版本说明下载没问题</li></ol><h3 id="Github仓库创建"><a href="#Github仓库创建" class="headerlink" title="Github仓库创建"></a>Github仓库创建</h3><ol><li>Github地址:<a href="https://github.com/,打不开的话开个代理,没有的可以试试`Watt">https://github.com/,打不开的话开个代理,没有的可以试试`Watt</a> ToolKit`加速</li><li>没有账号创建一个,进入之后,点击右上角的<code>+</code>号,点击<code>New repository</code>创建项目</li><li>仓库名称必须是<strong><em>用户名.github.io</em></strong>,勾选public,点击最下面的创建按钮,创建完成就可以了</li></ol><h3 id="Git下载"><a href="#Git下载" class="headerlink" title="Git下载"></a>Git下载</h3><ol><li>直接到官网下载即可:<a href="https://git-scm.com/downloads/win">https://git-scm.com/downloads/win</a> ,下载完以后跟着安装</li><li>安装完成以后,右键查看有没有<code>Open Git Bush Here</code>的按钮,有就说明安装好了</li><li>点击<code>Open Git Bush Here</code>打开GitBush窗口</li><li>配置用户名和邮箱<br> <code>git config --global user.name &quot;输入你的用户名&quot; git config --global user.name &quot;输入你的邮箱&quot;</code><br><strong><em>邮箱使用注册github的邮箱</em></strong></li><li>输入以下命令检查<br> <code>git config -l</code></li></ol><h3 id="连接Github"><a href="#连接Github" class="headerlink" title="连接Github"></a>连接Github</h3><ol><li>输入以下命令,生成SSH公钥<br> <code>ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code></li><li>终端显示一个框框里面一堆乱码说明设置成功<br> <strong><em>如果设置没成功,检查c盘中的用户文件夹内的用户名文件夹是否为中文,该文件夹不能为中文</em></strong></li><li>打开c/用户/用户名文件夹/.ssh/内有两个文件</li><li>用记事本打开<code>.pub</code>为后缀的文件,全选,复制文件内的内容</li><li>打开Github,点击右上角的头像,点击setting按钮</li><li>找到<code>SSH and GPG keys</code>选项,点击<code>New SSH key</code>添加key,名字随意,地址粘贴上刚刚复制的公钥</li><li>测试连接,输入以下命令<br> <code>ssh -T git@github.com</code><br> 结尾出现<code>shell access的单词说明成功了</code><br><strong><em>如果失败,把Watt ToolKit关掉,打开网络代理</em></strong></li></ol><h3 id="初始化Hexo项目"><a href="#初始化Hexo项目" class="headerlink" title="初始化Hexo项目"></a>初始化Hexo项目</h3><ol><li>新建文件夹存放博客内容,右键打开<code>GitBush</code>窗口</li><li>输入命令,初始化项目<br> <code>hexo init blog-demo</code></li><li>输入命令安装依赖<br> <code>npm i</code></li><li>输入命令启动项目<br> <code>hexo s</code></li><li>启动之后会给我们一个地址,点击地址,进入浏览器,出现页面说明本地部署成功,<code>CTRL + C</code>停止本地部署<br><strong><em>也可以在浏览器直接输入<a href="http://localhost:4000/访问">http://localhost:4000/访问</a></em></strong><br><strong><em>如果打开显示404,那就是你创建仓库时,仓库名没有和用户名一样,改一下仓库名就好了</em></strong></li></ol><h3 id="挂载GitHub-Pages"><a href="#挂载GitHub-Pages" class="headerlink" title="挂载GitHub Pages"></a>挂载GitHub Pages</h3><ol><li>输入以下命令,安装部署所需依赖<br> <code>npm install hexo-deployer-git --save</code></li><li>用vscode打开配置文件<code>_config.yml</code>,划到最下面找到<code>deploy</code>配置项</li><li>用一下代码替换<code>deploy</code>配置项<br> `<br> deploy:<pre><code> type: git repository: git@github.com:MrHu-junxi/MrHu-junxi.github.io branch: main</code></pre> `<br>用户名和仓库名替换为自己的</li><li><code>GitBush</code>窗口输入以下指令,删除,上传,生成<br> <code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</code></li></ol><h3 id="报错解决方法"><a href="#报错解决方法" class="headerlink" title="报错解决方法"></a>报错解决方法</h3><ol><li>使用<code>hexo d</code>时出现<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src=",height = 70px"/></div></div></li></ol><ul><li>解决方法<br>  方法1. 换一个网络代理试试<br>  方法2. 删除<code>.ssh</code>文件夹中的所以文件,重现与Github建立连接</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
