<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue3新特新</title>
      <link href="/2025/06/03/Vue/Vue3%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2025/06/03/Vue/Vue3%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="Router路由"><a href="#Router路由" class="headerlink" title="Router路由"></a>Router路由</h1><p>首先下载Vue3对应的vue-router插件版本，为4版本。2025/6/3：现在下载的最新版本就是4版本</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm i vue-router@<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>Vue3路由的基本配置与Vue2基本一致，只是在引入路由时，不是直接引入<span style="color:red">VueRouter</span>创建路由对象，而是通过按需引入，引入vue-router插件中的<span style="color:red">createRouter</span>与<span style="color:red">createWebHashHistory</span>方法来创建路由对象。这样可以节省性能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 路由配置文件</span><br><span class="hljs-comment">// 引入路由vue-router</span><br><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-comment">// 引入路由组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Index</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/index/index.vue&#x27;</span><br><br><span class="hljs-comment">// 配置路由</span><br><span class="hljs-keyword">const</span> routes = [<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">Index</span><br>    &#125;<br>]<br><br><span class="hljs-comment">// 配置routes</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>    <span class="hljs-comment">// 路由配置</span><br>    routes,<br>    <span class="hljs-comment">// 配置histroy模式</span><br>    <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHashHistory</span>()<br>&#125;)<br><br><span class="hljs-comment">// 导出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p>在main.js文件中引入，并且通过app.use使用即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">use</span>(router)<br></code></pre></td></tr></table></figure><h1 id="ref与reactive-声明基本类型与引用类型"><a href="#ref与reactive-声明基本类型与引用类型" class="headerlink" title="ref与reactive-声明基本类型与引用类型"></a>ref与reactive-声明基本类型与引用类型</h1><p>Vue3中，声明响应式变量需要使用<span style="color:red">ref</span>与<span style="color:red">reactive</span>方法。ref主要用于声明基本数据类型(数字，字符串)，而reactive用于声明引用数据类型(对象，数组)，这两个方法使用前需要通过import引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">import</span> &#123; ref,reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">const</span> title = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;S.F资源网&quot;</span>)<br><br>        <span class="hljs-keyword">const</span> navList = <span class="hljs-title function_">reactive</span>([<br>            &#123;<br>                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;交流群聊&#x27;</span>,<br>                <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;fa-brands fa-qq&#x27;</span>,<br>                <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;color: #74C0FC;&#x27;</span>,<br>                <span class="hljs-attr">link</span>: <span class="hljs-string">&#x27;#&#x27;</span><br>            &#125;<br>        ])<br><br>        <span class="hljs-keyword">return</span> &#123;<br>            title,<br>            navList<br>        &#125;<br>    &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>ref方法声明的变量访问时，模板中可以直接访问，但如果是在script程序中访问时，需要通过<code>.value</code>访问，否则会出现响应式丢失的问题。reactive变量的也会出现响应式丢失的问题，如：解构reactive对象，直接赋值给reactive属性，在异步回调中直接使用</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tlias后台管理系统项目开发</title>
      <link href="/2025/06/02/Tlias%E6%99%BA%E8%83%BD%E8%BE%85%E5%8A%A9%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE/Tlias%E6%A1%88%E4%BE%8B/"/>
      <url>/2025/06/02/Tlias%E6%99%BA%E8%83%BD%E8%BE%85%E5%8A%A9%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE/Tlias%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>Tlias项目为一个后台管理系统，主要开发功能有：</p><ul><li>部门管理<ul><li>查询，新增，修改，删除</li></ul></li><li>员工管理<ul><li>查询，新增，修改，删除</li><li>文件上传</li></ul></li><li>报表统计</li><li>登录认证</li><li>日志管理</li><li>班级，学院管理(实战内容)</li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="Restful风格"><a href="#Restful风格" class="headerlink" title="Restful风格"></a>Restful风格</h2><p><strong>REST，表述性状态转换，是一种软件架构风格</strong></p><p><img src="https://pic1.imgdb.cn/item/683d3d6f58cb8da5c8235212.png" alt="传统风格与Restful风格"></p><h2 id="Apifox工具"><a href="#Apifox工具" class="headerlink" title="Apifox工具"></a>Apifox工具</h2><p>由于浏览器地址栏发起的请求，都是GET方式的请求，如果需要发起POST，PUT，DELETE方式的请求，需要借助这类工具测试</p><p>官网：<a href="https://apifox.com">https://apifox.com</a></p><h2 id="工程创建"><a href="#工程创建" class="headerlink" title="工程创建"></a>工程创建</h2><ol><li><p>创建SpringBoot工程，并引入Web开发起步依赖，mybatis，mysql驱动，lombok</p></li><li><p>创建数据库表dept，并在application.yml中配置数据库基本信息</p></li><li><p>准备基础代码结构，并引入实体类Dept及统一的响应结果封装类Result</p></li></ol><h3 id="创建SpringBoot工程"><a href="#创建SpringBoot工程" class="headerlink" title="创建SpringBoot工程"></a>创建SpringBoot工程</h3><p>创建SpringBoot项目，并且选择Spring Web，Lombok，MySQL Driver，MyBatis Framework依赖</p><h3 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h3><ol><li><p>首先创建一个数据库，命名为tlias</p></li><li><p>创建表，并且添加数据</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建数据库表<br><span class="hljs-keyword">CREATE TABLE</span> dept(<br>    id <span class="hljs-type">INT</span> UNSIGNED <span class="hljs-keyword">PRIMARY KEY</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;ID,主键&#x27;</span>,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">UNIQUE</span> COMMENT <span class="hljs-string">&#x27;部门名称&#x27;</span>,<br>    create_time DATETIME <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    update_time DATETIME <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span><br>) COMMENT <span class="hljs-string">&#x27;部门表&#x27;</span>;<br><br># 添加数据<br><span class="hljs-keyword">INSERT INTO</span> dept <span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;学工部&#x27;</span>, <span class="hljs-string">&#x27;2024-09-25 09:47:40&#x27;</span>, <span class="hljs-string">&#x27;2024-09-25 09:47:40&#x27;</span>),<br>    (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;教研部&#x27;</span>, <span class="hljs-string">&#x27;2024-09-25 09:47:40&#x27;</span>, <span class="hljs-string">&#x27;2024-09-09 15:17:04&#x27;</span>),<br>    (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;咨询部&#x27;</span>, <span class="hljs-string">&#x27;2024-09-25 09:47:40&#x27;</span>, <span class="hljs-string">&#x27;2024-09-30 21:26:24&#x27;</span>),<br>    (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;事业部&#x27;</span>, <span class="hljs-string">&#x27;2024-09-25 09:47:40&#x27;</span>, <span class="hljs-string">&#x27;2024-09-25 09:47:40&#x27;</span>),<br>    (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;人事部&#x27;</span>, <span class="hljs-string">&#x27;2024-09-25 09:47:40&#x27;</span>, <span class="hljs-string">&#x27;2024-09-25 09:47:40&#x27;</span>),<br>    (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;行政部&#x27;</span>, <span class="hljs-string">&#x27;2024-11-30 20:56:37&#x27;</span>, <span class="hljs-string">&#x27;2024-09-30 20:56:37&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>删除项目中的application.properties文件，创建application.yml文件，并且添加基本配置</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">tlias-web-management</span><br><br><span class="hljs-attr">datasource:</span><br>    <span class="hljs-comment"># 配置数据库连接信息</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/tlias</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">1234</span><br><br><span class="hljs-comment"># 配置MyBatis日志</span><br><span class="hljs-attr">mybatis:</span><br><span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="准备基础代码结构"><a href="#准备基础代码结构" class="headerlink" title="准备基础代码结构"></a>准备基础代码结构</h3><ol><li><p>在xyz.xiaohuzg.app包下创建controller，service，mapper，pojo包</p></li><li><p>在pojo包下创建两个实体类Dept和Result</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xyz.xiaohuzg.app.pojo;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span> &#123;<br>    <span class="hljs-comment">// 与数据库中的字段一一对应</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime;<br>&#125;<br></code></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xyz.xiaohuzg.app.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer code; <span class="hljs-comment">// 返回编码：1 成功, 0 失败</span><br>    <span class="hljs-keyword">private</span> String msg; <span class="hljs-comment">// 错误信息</span><br>    <span class="hljs-keyword">private</span> Object data; <span class="hljs-comment">// 数据</span><br><br>    <span class="hljs-comment">// 成功调用函数 - 不需要给前端返回数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();<br><br>        result.code = <span class="hljs-number">1</span>;<br>        result.msg = <span class="hljs-string">&quot;success&quot;</span>;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">// 成功调用函数 - 需要给前端返回数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">(Object object)</span>&#123;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();<br><br>        result.data = object;<br>        result.code = <span class="hljs-number">1</span>;<br>        result.msg = <span class="hljs-string">&quot;success&quot;</span>;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">// 失败调用函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">error</span><span class="hljs-params">(String msg)</span>&#123;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();<br><br>        result.code = <span class="hljs-number">0</span>;<br>        result.msg = msg;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在mapper包中创建DeptMapper接口，并且为接口添加<span style="color:blue">@Mapper</span>注解</p></li><li><p>在service包下创建DeptService接口，然后在service包下创建impl包，impl包中创建DeptServiceImpl实现类，实现DeptService接口，并且为实现类添加<span style="color:blue">@Service</span>注解</p></li><li><p>在controller包下创建DeptController类，并且添加<span style="color:blue">@RestController</span>注解</p></li></ol><h1 id="部门管理"><a href="#部门管理" class="headerlink" title="部门管理"></a>部门管理</h1><h2 id="查询部门"><a href="#查询部门" class="headerlink" title="查询部门"></a>查询部门</h2><h3 id="接口开发"><a href="#接口开发" class="headerlink" title="接口开发"></a>接口开发</h3><p>查询全部部门，并且根据最后修改时间倒序排序</p><div class="table-container"><table><thead><tr><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>请求路径</td><td>/depts</td></tr><tr><td>请求方式</td><td>GET</td></tr><tr><td>请求参数</td><td>无</td></tr></tbody></table></div><p>返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;咨询部&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-09-25T09:47:40&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-09-30T21:26:24&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;行政部&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-11-30T20:56:37&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-09-30T20:56:37&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;学工部&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-09-25T09:47:40&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-09-25T09:47:40&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;事业部&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-09-25T09:47:40&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-09-25T09:47:40&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;人事部&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-09-25T09:47:40&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-09-25T09:47:40&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;教研部&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-09-25T09:47:40&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-09-09T15:17:04&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查询全部部门,根据最后修改时间倒序排序<br><span class="hljs-keyword">SELECT</span> id, name, create_time, update_time <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> update_time <span class="hljs-keyword">DESC</span>; <br></code></pre></td></tr></table></figure><ol><li><p>编写Controller层代码，接收前端请求</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 注入</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DeptService deptService;<br><br><span class="hljs-comment">// @GetMapping(&quot;/depts&quot;)</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/depts&quot;, method = RequestMethod.GET)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>    List&lt;Dept&gt; deptList = deptService.findAll();<br>    <span class="hljs-comment">// 返回结果</span><br>    <span class="hljs-keyword">return</span> Result.success(deptList);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写Service层代码，在DeptService接口中创建findAll方法，并且在DeptServiceImpl实现类中实现findAll方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建findAll()方法</span><br>List&lt;Dept&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DeptMapper deptMapper;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> deptMapper.findAll();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写Mapper(数据访问)层代码，创建DeptMapper接口中的findAll方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;SELECT id, name, create_time, update_time from dept ORDER BY update_time DESC&quot;)</span><br>List&lt;Dept&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li><li><p>全部编写完成以后，启动项目，通过Apifox工具测试请求能否成功</p></li></ol><h3 id="结果封装"><a href="#结果封装" class="headerlink" title="结果封装"></a>结果封装</h3><p>关于返回创建时间与更新时间显示为空的问题：</p><blockquote><p>实体类属性名与数据库表查询的返回字段名一致，mybatis会自动封装。如果不一致，无法自动封装</p></blockquote><ol><li><p>手动结果映射</p><p> 通过<span style="color:blue">@Results</span>和<span style="color:blue">@Result</span>，进行手动结果映射</p><p> 在DeptMapper接口中添加手动结果映射</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Results(&#123;</span><br><span class="hljs-meta">    @Result(column = &quot;create_time&quot;, property = &quot;createTime&quot;),</span><br><span class="hljs-meta">    @Result(column = &quot;update_time&quot;, property = &quot;updateTime&quot;)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-meta">@Select(&quot;SELECT id, name, create_time, update_time from dept ORDER BY update_time DESC&quot;)</span><br>List&lt;Dept&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li><li><p>起别名</p><p> 在SQL语句中，对不一样的列起别名名，别名和实体类属性名一致</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;SELECT id, name, create_time createTime, update_time updateTime from dept ORDER BY update_time DESC&quot;)</span><br>List&lt;Dept&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li><li><p>开启驼峰命名(推荐)：</p><p> 如果字段名和属性名符合驼峰命名规则(create_time/createTime)，则mybatis会自动通过驼峰命名规则映射</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-comment"># 开启驼峰命名规则映射</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="前后端联调测试"><a href="#前后端联调测试" class="headerlink" title="前后端联调测试"></a>前后端联调测试</h3><p>404 Not Found …</p><h2 id="删除部门"><a href="#删除部门" class="headerlink" title="删除部门"></a>删除部门</h2><p>根据id，删除部门</p><h3 id="接口开发-1"><a href="#接口开发-1" class="headerlink" title="接口开发"></a>接口开发</h3><div class="table-container"><table><thead><tr><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>请求路径</td><td>/depts</td></tr><tr><td>请求方式</td><td>DELETE</td></tr><tr><td>请求参数</td><td>id(查询参数query)</td></tr><tr><td>返回结果</td><td>无</td></tr></tbody></table></div><h4 id="接收查询参数"><a href="#接收查询参数" class="headerlink" title="接收查询参数"></a>接收查询参数</h4><p>通常我们会将路径后面通过”?”分割的参数称为查询参数(/depts?id=1)，也可以叫简单参数。接收查询参数的方式有三种</p><ol><li><p>通过HttpServletRequest接收</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/depts&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">deleteById</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    System.out.println(Integer.parseInt(request.getParameter(<span class="hljs-string">&quot;id&quot;</span>)));<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p> 通过HttpServletRequest方式所接受到的所有参数都是String类型</p></li><li><p>通过Spring提供的<span style="color:blue">@RequestParam</span>，将请求参数绑定给形参</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/depts&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">deleteById</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;id&quot;)</span> Integer deleteId)</span>&#123;<br>    System.out.println(deleteId);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p> 通过@RequestParam注解的方式，指定的参数是必须传递的，如果没有传递参数程序将会直接报错。如果希望参数是可传可不传的，那么可以设置@RequestParam的required属性为false<br> <strong>而且这种方式还可以简写，就是当查询参数名与方法形参接收参数名一致时，可以将@RequestParam注解省略(推荐)</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/depts&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Integer id)</span>&#123;<br>    System.out.println(id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="接口代码实现"><a href="#接口代码实现" class="headerlink" title="接口代码实现"></a>接口代码实现</h4><ol><li><p>编写Controller层代码，接收前端请求，并且处理</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/depts&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Integer id)</span>&#123;<br>    <span class="hljs-keyword">return</span> deptService.deleteById(id);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写Service层代码，在DeptService接口中创建deleteById方法，并且在DeptServiceImpl实现类中实现deleteById方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Integer id)</span>&#123;<br>    deptMapper.deleteById(id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写Mapper层代码，在DeptMapper接口中创建deleteById方法，并执行操作数据库的sql语句</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Delete(&quot;delete from dept where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure></li><li><p>在Apifox工具中测试请求能否成功</p></li></ol><p><strong>在接口开发中，一定要确定思路，先写接口，再写实现类，最后写Mapper层代码</strong></p><h2 id="新增部门"><a href="#新增部门" class="headerlink" title="新增部门"></a>新增部门</h2><div class="table-container"><table><thead><tr><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>请求路径</td><td>/depts</td></tr><tr><td>请求方式</td><td>DELETE</td></tr><tr><td>请求参数</td><td>json</td></tr><tr><td>返回结果</td><td>无</td></tr></tbody></table></div><p>请求参数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;开发部&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="接口开发-2"><a href="#接口开发-2" class="headerlink" title="接口开发"></a>接口开发</h3><h4 id="接收json格式请求参数：POST"><a href="#接收json格式请求参数：POST" class="headerlink" title="接收json格式请求参数：POST"></a>接收json格式请求参数：POST</h4><ul><li>JSON格式的参数通常会使用一个实体类进行接收</li><li>规则：JSON数据的key名与方法形参对象的属性名相同，并需要使用<span style="color:blue">@ResquestBody</span>注解标识</li><li><p>@RequestBody注解：作用是将一个JSON格式数据封装到一个实体类对象当中</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/depts&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Dept dept)</span>&#123;<br>    System.out.println(dept);<br><br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="接口代码实现-1"><a href="#接口代码实现-1" class="headerlink" title="接口代码实现"></a>接口代码实现</h4><ol><li><p>Controller层代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/depts&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Dept dept)</span>&#123;<br>    <span class="hljs-comment">// 通过@RequestBody注解将请求体中的JSON数据封装为Dept实体类对象</span><br>    deptService.add(dept);<br><br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Service层代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Dept dept)</span> &#123;<br>    <span class="hljs-comment">// 设置创建时间与修改时间为当前时间</span><br>    dept.setCreateTime(LocalDateTime.now());<br>    dept.setUpdateTime(LocalDateTime.now());<br><br>    deptMapper.add(dept);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Mapper层代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Insert(&quot;insert into dept(name, create_time, update_time) values(#&#123;name&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Dept dept)</span>;<br></code></pre></td></tr></table></figure></li></ol><h2 id="修改部门"><a href="#修改部门" class="headerlink" title="修改部门"></a>修改部门</h2><h3 id="查询回显"><a href="#查询回显" class="headerlink" title="查询回显"></a>查询回显</h3><div class="table-container"><table><thead><tr><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>请求路径</td><td>/depts/{id}</td></tr><tr><td>请求方式</td><td>GET</td></tr><tr><td>请求参数</td><td>id</td></tr><tr><td>返回结果</td><td>JSON格式的部门信息</td></tr></tbody></table></div><p>返回结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;学工部&quot;</span>,<br>        <span class="hljs-string">&quot;createTime&quot;</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-string">&quot;updateTime&quot;</span>: <span class="hljs-literal">null</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接收路径参数"><a href="#接收路径参数" class="headerlink" title="接收路径参数"></a>接收路径参数</h4><p>路径参数：通过请求URL直接传递参数，使用{…}来标识该路径参数，需要使用@PathVariable注释来接收路径参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/depts/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer setId)</span>&#123;<br>    <span class="hljs-comment">// 通过@PathVariable注解来讲路径中携带的参数绑定当方法形参上</span><br>    <span class="hljs-comment">// 如果路径参数名与方法形参名一致，@PathVariable注解后面的value值可以省略</span><br>    System.out.println(setId);<br><br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>如果路径参数名与方法形参名一致，@PathVariable注解后面的value值可以省略</p><h4 id="接口代码实现-2"><a href="#接口代码实现-2" class="headerlink" title="接口代码实现"></a>接口代码实现</h4><ol><li><p>Controller层代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/depts/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>    <span class="hljs-comment">// 通过@PathVariable注解来讲路径中携带的参数绑定当方法形参上</span><br>    <span class="hljs-comment">// 如果路径参数名与方法形参名一致，注解一个省略</span><br>    <span class="hljs-type">Dept</span> <span class="hljs-variable">dept</span> <span class="hljs-operator">=</span> deptService.getById(id);<br><br>    <span class="hljs-keyword">return</span> Result.success(dept);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Service层代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Dept <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>&#123;<br>    <span class="hljs-keyword">return</span> deptMapper.getById(id);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Mapper层代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select name from dept where id = #&#123;id&#125;&quot;)</span><br>Dept <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><div class="table-container"><table><thead><tr><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>请求路径</td><td>/depts</td></tr><tr><td>请求方式</td><td>PUT</td></tr><tr><td>请求参数</td><td>id，name</td></tr><tr><td>返回结果</td><td>无</td></tr></tbody></table></div><p>请求参数：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;财务部&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></p><h4 id="接口代码实现-3"><a href="#接口代码实现-3" class="headerlink" title="接口代码实现"></a>接口代码实现</h4><ol><li><p>Controller层代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PutMapping(&quot;/depts&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Dept dept)</span>&#123;<br>    <span class="hljs-comment">// 通过@RequestBody注解将前端的json格式数据封装到dept对象中</span><br>    deptService.update(dept);<br><br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Service层代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Dept dept)</span> &#123;<br>    dept.setUpdateTime(LocalDateTime.now());<br><br>    deptMapper.update(dept);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Mapper层代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Update(&quot;update dept set name = #&#123;name&#125;, update_time = #&#123;updateTime&#125; where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Dept dept)</span>;<br></code></pre></td></tr></table></figure></li></ol><h1 id="相同路径提取"><a href="#相同路径提取" class="headerlink" title="相同路径提取"></a>相同路径提取</h1><p><span style="color:red">@RequestMapper</span>注解：可以将每个方法重复路径提取到类中声明，单个方法中就无需声明重复路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 相同路径提取</span><br><span class="hljs-meta">@RequestMapping(&quot;/depts&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptController</span> &#123;<br><br>    <span class="hljs-comment">// 注入</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptService deptService;<br><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Dept&gt; deptList = deptService.findAll();<br>        <span class="hljs-comment">// 返回结果</span><br>        <span class="hljs-keyword">return</span> Result.success(deptList);<br>    &#125;<br><br>    <span class="hljs-meta">@DeleteMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Integer id)</span>&#123;<br>        deptService.deleteById(id);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Dept dept)</span>&#123;<br>        <span class="hljs-comment">// 通过@RequestBody注解将请求体中的JSON数据封装为Dept实体类对象</span><br>        deptService.add(dept);<br><br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        <span class="hljs-comment">// 通过@PathVariable注解来讲路径中携带的参数绑定当方法形参上</span><br>        <span class="hljs-comment">// 如果路径参数名与方法形参名一致，注解一个省略</span><br>        <span class="hljs-type">Dept</span> <span class="hljs-variable">dept</span> <span class="hljs-operator">=</span> deptService.getById(id);<br><br>        <span class="hljs-keyword">return</span> Result.success(dept);<br>    &#125;<br><br>    <span class="hljs-meta">@PutMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Dept dept)</span>&#123;<br>        <span class="hljs-comment">// 通过@RequestBody注解将前端的json格式数据封装到dept对象中</span><br>        deptService.update(dept);<br><br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="日志技术"><a href="#日志技术" class="headerlink" title="日志技术"></a>日志技术</h1><p>日志：记录应用程序的运行，状态，错误信息…</p><h2 id="logback入门程序"><a href="#logback入门程序" class="headerlink" title="logback入门程序"></a>logback入门程序</h2><p>引入logback依赖(springboot项目中该依赖已传递)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Logback 核心库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 最新稳定版 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在resources目录下创建配置文件logback.xml，并复制以下基本配置代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 控制台输出 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度  %logger&#123;50&#125;: 最长50个字符(超出.切割)  %msg：日志消息，%n是换行符 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 日志输出级别 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志控制开关,将debug改为off,日志将不会生效 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>定义记录日志对象Logger对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xyz.xiaohuzg.app;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogTest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(LogTest.class);<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLog</span><span class="hljs-params">()</span>&#123;<br>        log.debug(<span class="hljs-string">&quot;程序开始计算...&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span>[] nums = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">32</span>,<span class="hljs-number">2</span>,<span class="hljs-number">56</span>,<span class="hljs-number">235</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num : nums)&#123;<br>            sum += num;<br>        &#125;<br><br>        log.info(<span class="hljs-string">&quot;计算结果为:&quot;</span> + sum);<br><br>        log.debug(<span class="hljs-string">&quot;程序结束计算...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行以后，控制台打印日志，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">2025-06-03 21:50:19.035 [main] DEBUG xyz.xiaohuzg.app.LogTest - 程序开始计算...<br>2025-06-03 21:50:19.040 [main] INFO  xyz.xiaohuzg.app.LogTest - 计算结果为:361<br>2025-06-03 21:50:19.040 [main] DEBUG xyz.xiaohuzg.app.LogTest - 程序结束计算...<br></code></pre></td></tr></table></figure><h2 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h2><p>之前只是简单的日志配置文件，以下才是完整的日志配置文件，全部复制，替换掉之前日志配置文件中的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 控制台输出 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--格式化输出：%d 表示日期，%thread 表示线程名，%-5level表示级别从左显示5个字符宽度，%logger显示日志记录器的名称， %msg表示日志消息，%n表示换行符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125;-%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 系统文件输出 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 日志文件输出的文件名, %i表示序号 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">FileNamePattern</span>&gt;</span>D:/tlias-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">FileNamePattern</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 最多保留的历史日志文件数量 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">MaxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">MaxHistory</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 最大文件大小，超过这个大小会触发滚动到新文件，默认为 10MB --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--格式化输出：%d 表示日期，%thread 表示线程名，%-5level表示级别从左显示5个字符宽度，%msg表示日志消息，%n表示换行符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125;-%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 日志输出级别 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;ALL&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><p>日志级别指的是日志信息的类型，日志都会分级别，常见的日志级别如下</p><div class="table-container"><table><thead><tr><th>日志级别</th><th>说明</th><th>记录方式</th></tr></thead><tbody><tr><td>trace</td><td>追踪，记录程序运行轨迹 【使用很少】</td><td>log.trace(“…”)</td></tr><tr><td>debug</td><td>调试，记录程序调试过程中的信息，实际应用中一般将其视为最低级别 【使用较多】</td><td>log.debug(“…”)</td></tr><tr><td>info</td><td>记录一般信息，描述程序运行的关键事件，如：网络连接、io操作 【使用较多】</td><td>log.info(“…”)</td></tr><tr><td>warn</td><td>警告信息，记录潜在有害的情况 【使用较多】</td><td>log.warn(“…”)</td></tr><tr><td>error</td><td>错误信息 【使用较多】</td><td>log.error(“…”)</td></tr></tbody></table></div><h1 id="员工管理"><a href="#员工管理" class="headerlink" title="员工管理"></a>员工管理</h1>]]></content>
      
      
      <categories>
          
          <category> Tlias后台管理系统项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tlias后台管理系统项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YML/YAML配置文件</title>
      <link href="/2025/06/02/YML/yml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2025/06/02/YML/yml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>YAML/YML 是一种数据序列化格式，可用于存储和交换数据 。在软件开发中，常被用作配置文件格式，如在 Spring Boot 项目中，用于配置应用程序的各种参数，像服务器端口、数据库连接信息、日志级别等。</p><h1 id="yml配置文件格式"><a href="#yml配置文件格式" class="headerlink" title="yml配置文件格式"></a>yml配置文件格式</h1><ul><li>数值前面必须有空格，作为分隔符</li><li>使用缩进表示层级关系，缩进时，不允许使用Tab键，只能使用空格(idea/VSCode会自动将Tab转为空格)</li><li>缩进的空格数目不重要，只要相同层级的元素左对齐即可</li><li><code>#</code> 表示注释，从这个字符一直到行尾，都会被解析器忽略</li></ul><p><strong>注意：在yml格式的配置文件中，如果配置项的值以0开头，值需要使用’’包裹，因为0开头在yml格式中表示8进制数据</strong></p><h1 id="定义对象-Map集合"><a href="#定义对象-Map集合" class="headerlink" title="定义对象/Map集合"></a>定义对象/Map集合</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">user:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">张三</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-string">江西</span><br></code></pre></td></tr></table></figure><h1 id="定义数组-List-Set集合"><a href="#定义数组-List-Set集合" class="headerlink" title="定义数组/List/Set集合"></a>定义数组/List/Set集合</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">hobby:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">java</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">python</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">go</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">javascript</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> YML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2025/05/31/JavaWeb/Mybatis/"/>
      <url>/2025/05/31/JavaWeb/Mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Mybatis？"><a href="#什么是Mybatis？" class="headerlink" title="什么是Mybatis？"></a>什么是Mybatis？</h1><p>MyBatis是一款优秀的<span style="color:red;">持久层(Dao层)</span>框架，用于简化JDBC的开发。MyBatis底层使用的就是JDBC库，只是对JDBC进行了二次封装，让JDBC操作起来更加简单</p><blockquote><p>MyBatis本是Apache(甲骨文)的一个开源项目iBatis，2010年这个项目由apacge迁移到Google code，并改名MyBatis，2013年11月迁移至Github。</p></blockquote><p>官网：<a href="https://mybatis.p2hp.com">https://mybatis.p2hp.com</a></p><h1 id="MyBatis入门程序"><a href="#MyBatis入门程序" class="headerlink" title="MyBatis入门程序"></a>MyBatis入门程序</h1><p>需求：使用MyBatis查询所有用户数据</p><ol><li>准备工作：<ol><li>创建SpringBoot工程，引入MyBatis相关依赖<br> 创建SpringBoot工程时，选择<span style="color:red">MySQL Driver，MyBatis Framework，Lombok</span>依赖</li><li>准备数据库表tb_user，创建实体类User</li><li>配置MyBatis(在application.properties中配置数据库连接信息)</li></ol></li><li>编写MyBatis程序：编写MyBatis的持久层接口，定义SQL(注解/XML)</li></ol><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li><p>创建SpringBoot(version = 3.3.12)工程，并且选择MyBatis相关依赖</p><ul><li>MySQL Drivet</li><li>MyBatis Framework</li><li><p>Lombok</p><blockquote><p>工程创建完毕之后，我们可以删掉pom.xml文件和src目录以外的所有文件。打开src/main/resources/application.properties文件，该文件是SpringBoot中的核心配置文件</p></blockquote></li></ul></li><li><p>准备数据库表tb_user，并且写入数据</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs SQL"># 创建tb_user数据表<br><span class="hljs-keyword">CREATE TABLE</span> tb_user(<br>    id <span class="hljs-type">INT</span> UNSIGNED <span class="hljs-keyword">PRIMARY KEY</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;用户ID,主键&#x27;</span>,<br>    username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>    password <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age TINYINT UNSIGNED COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span><br>)COMMENT <span class="hljs-string">&#x27;用户表&#x27;</span>;<br><br># 往tb_user表中插入数据<br><span class="hljs-keyword">INSERT INTO</span> tb_user(id, username, password, name, age)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;daqiao&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-string">&#x27;大乔&#x27;</span>, <span class="hljs-number">22</span>),<br>        (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;xiaoqiao&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-string">&#x27;小乔&#x27;</span>, <span class="hljs-number">18</span>),<br>        (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;diaochan&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-string">&#x27;貂蝉&#x27;</span>, <span class="hljs-number">24</span>),<br>        (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;lvbu&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-string">&#x27;吕布&#x27;</span>, <span class="hljs-number">28</span>),<br>        (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;zhaoyun&#x27;</span>, <span class="hljs-string">&#x27;12345678&#x27;</span>, <span class="hljs-string">&#x27;赵云&#x27;</span>, <span class="hljs-number">27</span>);<br><br></code></pre></td></tr></table></figure></li><li><p>准备实体类User</p><p> 创建pojo子包，在pojo包内创建User实体类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在application.properties中配置数据库连接信息</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 配置数据库连接信息<br>spring.datasource.url=jdbc:mysql://localhost:3306/tb_user<br>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver<br>spring.datasource.username=root<br>spring.datasource.password=1234<br></code></pre></td></tr></table></figure></li></ol><h2 id="编写MyBatis程序"><a href="#编写MyBatis程序" class="headerlink" title="编写MyBatis程序"></a>编写MyBatis程序</h2><ol><li><p>新建mapper子包，包中创建UserMapper接口(Mapper为命名规范)<br> MyBatis程序属于Dao持久层，但是通常会将MyBatis程序代码放在mapper包中</p></li><li><p>为UserMapper接口添加<span style="color:blue">@Mapper</span>注解。<br> <span style="color:blue">@Mapper注解</span>：代表该应用程序在运行时，会自动为改接口创建一个实现类对象(代理对象 - 通过对象代理，自动创建实现类对象，我们无需手动实现)，并且会自动将该实现类对象存入ICO容器中，成为容器中的bean</p></li><li><p>定义接口方法，并且为方法添加<span style="color:blue">@Select</span>注解，Select表示的就是查询操作。查询到的返回值会自动封装到方法的返回值中。</p><ul><li>@Select注解：表示查询操作，value属性表示SQL语句</li><li>@Insert注解：表示新增数据操作</li><li>@Update注解：表示更新数据操作</li><li>@Delete注解：表示删除数据操作<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 执行查询操作，并将返回值封装到User列表中</span><br><span class="hljs-meta">@Select(&quot;select * from tb_user&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>在tset目录下找到<code>AppApplicationTests.java</code>单元测试类<br> <span style="color:blue">@SpringBootTest注解</span>：SprngBoot中单元测试的注解 - 当前测试类中的测试方法运行时会启动SpringBoot项目。IOC容器也会随之创建，那么如果需要测试哪个bean，只需在测试方法中注入该bean即可</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 依赖注入</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserMapper userMapper;<br><br><span class="hljs-comment">// 测试findAll()方法</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testFindAll</span><span class="hljs-params">()</span>&#123;<br>List&lt;User&gt; users = userMapper.findAll();<br><br>users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="辅助配置"><a href="#辅助配置" class="headerlink" title="辅助配置"></a>辅助配置</h1><h2 id="配置MyBatis日志输出"><a href="#配置MyBatis日志输出" class="headerlink" title="配置MyBatis日志输出"></a>配置MyBatis日志输出</h2><p>默认情况下，在MyBatis中，SQL语句执行时，我们并不能看到SQL语句的执行日志。在<span style="color:red">application.properties</span>中，添加如下配置，即可在终端查看日志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 配置MyBatis日志<br>mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl<br></code></pre></td></tr></table></figure><p>再次运行测试类，可以在调试控制台看到如下日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">==&gt;  Preparing: <span class="hljs-keyword">select</span> * from tb_user<br>==&gt; Parameters: <br>&lt;==    Columns: <span class="hljs-built_in">id</span>, username, password, name, age<br>&lt;==        Row: 1, daqiao, 123456, 大乔, 25<br>&lt;==        Row: 2, xiaoqiao, 123456, 小乔, 18<br>&lt;==        Row: 3, diaochan, 123456, 貂蝉, 24<br>&lt;==        Row: 4, lvbu, 123456, 吕布, 28<br>&lt;==        Row: 5, zhaoyun, 12345678, 赵云, 27<br>&lt;==      Total: 5<br></code></pre></td></tr></table></figure><h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><ol><li>数据库连接池是一个容器，负责分配，管理数据库连接Connection(资源重用)</li><li>它允许应用程序重复使用一个现有的数据库连接，而不是在重新创建一个(提升系统响应速度)</li><li>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏(避免数据库连接遗漏)</li></ol><ul><li><p>Hikari追光者：<strong>SpringBoot底层默认会使用Hikari作为数据库连接池</strong></p></li><li><p>Druid德鲁伊：阿里巴巴开源的数据库连接池，功能强大，性能优秀</p></li></ul><h2 id="切换为Druid数据库连接池"><a href="#切换为Druid数据库连接池" class="headerlink" title="切换为Druid数据库连接池"></a>切换为Druid数据库连接池</h2><ol><li><p>在pom.xml中添加Druid依赖</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Druid连接池 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在application.properties中配置Druid连接池</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 配置数据库连接池使用Druid连接池<br>spring.datasource.type=com.alibaba.druid.pool.DruidDataSource<br></code></pre></td></tr></table></figure></li></ol><h1 id="MyBatis增删改查"><a href="#MyBatis增删改查" class="headerlink" title="MyBatis增删改查"></a>MyBatis增删改查</h1><h2 id="MyBatis删除操作"><a href="#MyBatis删除操作" class="headerlink" title="MyBatis删除操作"></a>MyBatis删除操作</h2><ul><li><p>需求：根据id删除用户信息</p></li><li><p>SQL：delete from tb_user where id = 5;</p></li></ul><ol><li><p>代码实现：</p><p> 在UserMapper接口中，定义一个deleteById()方法，为方法添加@Delete注解，并且在value属性中，输入要执行的SQL语句</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 执行根据id删除操作, #&#123;id&#125; 表示占位符,运行会将我们调用方法时传入的参数赋值给占位符</span><br><span class="hljs-meta">@Delete(&quot;delete from tb_user where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure></li><li><p>测试代码：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试deleteById()方法</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteById</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 调用deleteById()方法,并且传入id</span><br>    userMapper.deleteById(<span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>MyBatis中的占位符和拼接符</strong></p><div class="table-container"><table><thead><tr><th>符号</th><th>说明</th><th>场景</th><th>优缺点</th></tr></thead><tbody><tr><td>#{…}</td><td>占位符。执行时，会将#{…}替换为?，生成预编译SQL</td><td>参数值传递</td><td>安全、性能高 （推荐）</td></tr><tr><td>${…}</td><td>拼接符。直接将参数拼接在SQL语句中，存在SQL注入问题</td><td>表名、字段名动态设置时使用</td><td>不安全、性能低</td></tr></tbody></table></div><h2 id="MyBatis新增操作"><a href="#MyBatis新增操作" class="headerlink" title="MyBatis新增操作"></a>MyBatis新增操作</h2><ul><li><p>需求：新增用户信息</p></li><li><p>SQL：insert into tb_user(username, password, name, age) values(#{username}, #{password}, #{name}, #{age})</p></li></ul><ol><li><p>代码实现：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 新增用户信息</span><br><span class="hljs-meta">@Insert(&quot;insert into tb_user(username, password, name, age) values(#&#123;username&#125;, #&#123;password&#125;, #&#123;name&#125;, #&#123;age&#125;)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure></li><li><p>测试代码：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试新增用户</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span>&#123;<br>    userMapper.insert(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;菠萝仔&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-string">&quot;马可波罗&quot;</span>, <span class="hljs-number">20</span>));<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="MyBatis修改操作"><a href="#MyBatis修改操作" class="headerlink" title="MyBatis修改操作"></a>MyBatis修改操作</h2><ul><li><p>需求：根据id修改用户信息</p></li><li><p>SQL： update tb_user set username = #{useranme}, password = #{password}, name = #{name}, age = #{age} where id = #{id}</p></li></ul><ol><li><p>代码实现：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据id修改用户信息</span><br><span class="hljs-meta">@Update(&quot;update tb_user set username=#&#123;username&#125;, password=#&#123;password&#125;, name=#&#123;name&#125;, age=#&#123;age&#125; where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateById</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure></li><li><p>测试代码：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试更新数据方法</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateById</span><span class="hljs-params">()</span>&#123;<br>    userMapper.updateById(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;libai&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-string">&quot;李白&quot;</span>, <span class="hljs-number">20</span>));<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="MyBatis查询操作"><a href="#MyBatis查询操作" class="headerlink" title="MyBatis查询操作"></a>MyBatis查询操作</h2><ul><li><p>需求：根据用户名和密码查询用户信息</p></li><li><p>SQL：select * from tb_user where username = #{username} and password = #{password};</p></li></ul><ol><li><p>代码实现：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据用户名,密码查询用户信息</span><br><span class="hljs-meta">@Select(&quot;select * from tb_user where username=#&#123;username&#125; and password=#&#123;password&#125;&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">selectByUsernameAndPassword</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username, <span class="hljs-meta">@Param(&quot;password&quot;)</span> String password)</span>;<br><span class="hljs-comment">// 传递多个参数时，需要使用@Param注解来为参数取名</span><br></code></pre></td></tr></table></figure><p> <span style="color:red;">@Param</span>注解的作用是：为接口的方法形参起名字</p></li><li><p>测试代码：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试根据用户名和密码查询用户</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectByUsernameAndPassword</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectByUsernameAndPassword(<span class="hljs-string">&quot;lvbu&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="XML映射配置"><a href="#XML映射配置" class="headerlink" title="XML映射配置"></a>XML映射配置</h1><ol><li><p>在MyBatis中，既可以通过注解配置SQL语句，也可以通过XML配置文件配置SQL语句</p></li><li><p>规则：</p><ol><li><p>XML映射文件的名称与Mapper接口名称保持一致，并且将XML映射文件与Mapper接口放置在相同包名的包下【这里指的相同包不是指直接存放在同一个文件夹下，而是在resources目录下，新建一个相同的包(xyz.xiaohuzg.app.mapper)】(同包同名)</p></li><li><p>XML映射文件的namespace属性为Mapper接口的全限定名</p></li><li><p>XML映射文件中SQL语句的id与Mapper接口中的方法名保持一致，并且返回值类型一致</p></li></ol></li><li><p>通过Mapper实现：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from tb_user&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过XML映射文件实现：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;xyz.xiaohuzg.app.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;xyz.xiaohuzg.app.pojo.User&quot;</span>&gt;</span><br>        select * from tb_user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>namespace属性值为Mapper接口全限定名</li><li>id值为Mapper接口中方法名</li><li>resultType值为Mapper接口中方法的返回值类型</li></ul></li></ol><blockquote><p>　使用MyBatis注解，主要用来完成一些较为简单的增删改查操作。如果需要实现复杂的SQL功能，推荐使用XML来配置映射语句</p></blockquote><h2 id="配置XML映射文件位置"><a href="#配置XML映射文件位置" class="headerlink" title="配置XML映射文件位置"></a>配置XML映射文件位置</h2><p>如果想将XML映射文件放在其他位置，可以通过在<code>application.properties</code>中添加一项配置来完成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 配置XML映射文件位置<br>mybatis.mapper-locations=classpath:mapper/*.xml<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-Java程序操作数据库</title>
      <link href="/2025/05/30/JavaWeb/JDBC/"/>
      <url>/2025/05/30/JavaWeb/JDBC/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是JDBC？"><a href="#什么是JDBC？" class="headerlink" title="什么是JDBC？"></a>什么是JDBC？</h1><p>JDBC：Java DataBase Connectivity，就是使用Java语言操作关系型数据库的一套API。</p><p><span style="color:red;">JDBC只负责提供一套操作数据库的接口，最后都是由数据库厂商提供JDBC实现规范，这也就是：数据库的驱动</span></p><p>本质：</p><ul><li>sun公司官方定义的一套操作所有关系型数据库的规范，即接口</li><li>各个数据库厂商去实现这套接口，提供数据库驱动Jar包</li><li>我们可以使用这套接口(JDBC)编程，真正执行的代码是驱动中的Jar包实现类</li></ul><h1 id="JDBC入门程序"><a href="#JDBC入门程序" class="headerlink" title="JDBC入门程序"></a>JDBC入门程序</h1><p>需求：使用JDBC，让Java程序执行SQL语句，操作数据库<br>步骤：</p><ul><li>准备工作：创建Maven项目，引入依赖，并准备数据库表</li><li>代码实现：编写JDBC程序，操作数据库</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li><p>创建Maven项目</p></li><li><p>引入依赖</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据库驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.33<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 单元测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- lombok --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>准备数据</p><p> 创建数据库与数据表，并且往数据表中插入数据</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建<span class="hljs-keyword">user</span>数据表<br><span class="hljs-keyword">CREATE TABLE</span> tb_user(<br>    id <span class="hljs-type">INT</span> UNSIGNED <span class="hljs-keyword">PRIMARY KEY</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;用户ID,主键&#x27;</span>,<br>    username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>    password <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age TINYINT UNSIGNED COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span><br>)COMMENT <span class="hljs-string">&#x27;用户表&#x27;</span>;<br><br># 往tb_user表中插入数据<br><span class="hljs-keyword">INSERT INTO</span> tb_user(id, username, password, name, age)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;daqiao&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-string">&#x27;大乔&#x27;</span>, <span class="hljs-number">22</span>),<br>        (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;xiaoqiao&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-string">&#x27;小乔&#x27;</span>, <span class="hljs-number">18</span>),<br>        (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;diaochan&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-string">&#x27;貂蝉&#x27;</span>, <span class="hljs-number">24</span>),<br>        (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;lvbu&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-string">&#x27;吕布&#x27;</span>, <span class="hljs-number">28</span>),<br>        (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;zhaoyun&#x27;</span>, <span class="hljs-string">&#x27;12345678&#x27;</span>, <span class="hljs-string">&#x27;赵云&#x27;</span>, <span class="hljs-number">27</span>);<br></code></pre></td></tr></table></figure></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ol><li><p>在test目录下创建JdbcTest测试类</p></li><li><p>在JdbcTest测试类中，编写以下测试方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* JDBC入门程序</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException &#123;<br>    <span class="hljs-comment">// 1. 注册驱动</span><br>    Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br><br>    <span class="hljs-comment">// 2. 获取数据库连接</span><br>    <span class="hljs-comment">// 注意：这里的 /tb_user 代表的是连接服务器上的那一台数据库，tb_user代表的是数据库</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/tb_user&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>    <span class="hljs-comment">// 3. 获取SQL语句执行对象</span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br><br>    <span class="hljs-comment">// 4. 执行SQL语句</span><br>    <span class="hljs-comment">// 这个返回值代表的是执行语句之后影响到的数据库中的记录数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> statement.executeUpdate(<span class="hljs-string">&quot;update tb_user set age = 25 where id = 1&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;SQL语句执行影响的记录数：&quot;</span> + i);<br><br>    <span class="hljs-comment">// 5. 释放资源</span><br>    statement.close();<br>    connection.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="JDBC查询数据"><a href="#JDBC查询数据" class="headerlink" title="JDBC查询数据"></a>JDBC查询数据</h1><p>需求：基于JDBC执行如下select语句，将查询到的结果封装到User对象中<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">where</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;daqiao&#x27;</span> <span class="hljs-keyword">and</span> password <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br></code></pre></td></tr></table></figure></p><ol><li><p>准备User实体类，接收查询结果</p><p> 在src目录下，创建pojo子包，并且创建User实体类(xyz.xiaohuzg.pojo.User)。<strong>User实体类中的属性需要与数据库表中的字段与字段类型一一对应</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> xyz.xiaohuzg.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">// 使用lombok库，进行get set 构造函数的构建</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">// 使用基本类型的封装类，避免数据有默认值</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写执行查询语句测试程序</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 测试执行SQL查询语句</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQuery</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 连接数据库参数</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/tb_user&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">USER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">PASSWORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234&quot;</span>;<br><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// 封装查询返回结果</span><br><br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-comment">// 1. 注册 JDBC 驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br><br>        <span class="hljs-comment">// 2. 打开链接</span><br>        conn = DriverManager.getConnection(URL,USER,PASSWORD);<br><br>        <span class="hljs-comment">// 3. 执行查询</span><br>        <span class="hljs-comment">// 注意：这里的 问号&quot;?&quot; 相当于占位符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id, username, password, name, age from tb_user where username = ? and password = ?&quot;</span>;<br>        stmt = conn.prepareStatement(sql); <span class="hljs-comment">// 这是一种预编译写法，这种写法性能与安全性都更好</span><br>        <span class="hljs-comment">// 替换占位符内的内容</span><br>        stmt.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;daqiao&quot;</span>);<br>        stmt.setString(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br><br>        <span class="hljs-comment">// 获得查询返回结果</span><br>        rs = stmt.executeQuery();<br><br>        <span class="hljs-comment">// 4. 处理结果</span><br>        <span class="hljs-comment">// next()表示一行行读取数据，读取到了返回true，没读取到返回false</span><br>        <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<br>                <span class="hljs-comment">// 通过调用get方法传递对应的字段名获取对应的数据</span><br>                rs.getInt(<span class="hljs-string">&quot;id&quot;</span>),<br>                rs.getString(<span class="hljs-string">&quot;username&quot;</span>),<br>                rs.getString(<span class="hljs-string">&quot;password&quot;</span>),<br>                rs.getString(<span class="hljs-string">&quot;name&quot;</span>),<br>                rs.getInt(<span class="hljs-string">&quot;age&quot;</span>)<br>            );<br>            System.out.println(user);<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span>(SQLException se)&#123;<br>        se.printStackTrace();<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span>&#123;<br>        <span class="hljs-comment">// 5. 关闭资源</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">if</span>(rs != <span class="hljs-literal">null</span>) rs.close();<br>            <span class="hljs-keyword">if</span>(stmt != <span class="hljs-literal">null</span>) stmt.close();<br>            <span class="hljs-keyword">if</span>(conn != <span class="hljs-literal">null</span>) conn.close();<br>        &#125;<span class="hljs-keyword">catch</span>(SQLException se)&#123;<br>            se.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> ResultSet(结果集对象)：ResultSet rs = statement.executeQuery()</p><ol><li>next()：将光标从当前位置向下移动一行，并且判断当前行是否为有效行，返回值为boolean<ul><li>true：有效行，当前行有数据，可以获取当前行数据</li><li>false：无效行，当前行没有数据，已经到达结果集的末尾</li></ul></li><li>getXxx(…)：获取数据，可以根据列的编号获取，也可以根据列名(字段)，更推荐使用字段获取</li><li>结果解析步骤： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (resultSet.next())&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>    <span class="hljs-comment">// ...省略</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h1 id="预编译SQL"><a href="#预编译SQL" class="headerlink" title="预编译SQL"></a>预编译SQL</h1><ol><li><p>静态SQL</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 3. 获取SQL语句执行对象</span><br><span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br><br><span class="hljs-comment">// 4. 执行SQL语句</span><br><span class="hljs-comment">// 这个返回值代表的是执行语句之后影响到的数据库中的记录数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> statement.executeUpdate(<span class="hljs-string">&quot;update tb_user set age = 25 where id = 1&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>预编译SQL</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 3. 执行查询</span><br><span class="hljs-comment">// 注意：这里的 问号&quot;?&quot; 相当于占位符</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id, username, password, name, age from tb_user where username = ? and password = ?&quot;</span>;<br>stmt = conn.prepareStatement(sql); <span class="hljs-comment">// 这是一种预编译写法，这种写法性能与安全性都更好</span><br><span class="hljs-comment">// 替换占位符内的内容</span><br>stmt.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;daqiao&quot;</span>);<br>stmt.setString(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>预编译的优势：</p><ul><li>可以防止SQL注入，更加安全<br>  SQL注入：通过控制输入来修改实现定义好的SQL语句，以达到执行代码对服务器进行攻击的方法</li><li>性能更高</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2025/05/27/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL/"/>
      <url>/2025/05/27/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>数据库：DataBase(DB)，存储与管理数据的仓库<br>官网地址：<a href="https://www.oracle.com/cn/mysql/enterprise">https://www.oracle.com/cn/mysql/enterprise</a><br>百度网盘：<a href="https://pan.baidu.com/s/1q0_i9orTQXOQPEpJ9ZcUJw?pwd=2025">https://pan.baidu.com/s/1q0_i9orTQXOQPEpJ9ZcUJw?pwd=2025</a> </p><ul><li>提取码: 2025</li></ul><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><ol><li>下载压缩包</li><li>将压缩包复制到某一磁盘目录下，解压出来，<span style="color:red;">注意：路径不要有中文</span>(解压出来就是一个文件夹，里面有bin，lib文件夹)</li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><ol><li>进入系统的环境变量配置页面</li><li>添加系统变量，设置键为<span style="color:orange">MYSQL_HOME</span>，设置值为MySQL安装目录，也就是bin所在那一层目录<span style="color:orange">F:\mysql-8.0.34-winx64\mysql-8.0.34-winx64</span>(这是我的，你们需要输入你们自己的)</li><li>双击Path系统环境变量，输入<span style="color:orange">%MYSQL_HOME%\bin</span></li><li>以管理员方式运行终端，输入 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mysql<br></code></pre></td></tr></table></figure> 如果能够显示以下这种错误信息，就是配置成功了 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ERROR <span class="hljs-number">2003</span> (HY000): Can&#x27;t connect to MySQL server on &#x27;localhost:<span class="hljs-number">3306</span>&#x27; (<span class="hljs-number">10061</span>)<br></code></pre></td></tr></table></figure></li></ol><h4 id="初始化MySQL"><a href="#初始化MySQL" class="headerlink" title="初始化MySQL"></a>初始化MySQL</h4><p>以管理员身份运行终端，输入以下命令<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mysqld --initialize-insecure<br></code></pre></td></tr></table></figure></p><p>打开MySQL解压目录，发现多出一个data文件夹，则代表初始化成功</p><h4 id="注册MySQL服务"><a href="#注册MySQL服务" class="headerlink" title="注册MySQL服务"></a>注册MySQL服务</h4><p>以管理员身份运行终端，输入以下命令<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mysqld -install<br></code></pre></td></tr></table></figure></p><p>终端显示<span style="color:red">Service successfully installed.</span>代表服务已成功安装。也可以在系统左下角搜索栏搜索”服务”，打开系统服务，在里面如果可以找到MySQL，也能说明我们的MySQL已经安装成功<br>现在我们的计算机上就安装好了MySQL服务。</p><h4 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h4><p>以管理员身份运行终端<br>启动服务命令：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> mysql<br></code></pre></td></tr></table></figure></p><p>停止服务命令：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> stop mysql<br></code></pre></td></tr></table></figure></p><h4 id="修改默认账户密码"><a href="#修改默认账户密码" class="headerlink" title="修改默认账户密码"></a>修改默认账户密码</h4><p>以管理员身份运行终端<br>在里面输入一下命令，这里的“1234”就是指默认管理员(root账户)的密码，可以自行修改。但不要太复杂，避免忘了<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mysqladmin -u root password <span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure></p><h3 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h3><p>运行终端，输入一下命令：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mysql -uroot -p1234<br></code></pre></td></tr></table></figure></p><p>看到“Server version: 8.0.34 MySQL Community Server - GPL”说明登录成功</p><h3 id="退出MySQL"><a href="#退出MySQL" class="headerlink" title="退出MySQL"></a>退出MySQL</h3><p>直接在终端输入“exit”即可退出数据库<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure></p><h3 id="卸载MySQL"><a href="#卸载MySQL" class="headerlink" title="卸载MySQL"></a>卸载MySQL</h3><p>要卸载MySQL，需要先打开终端输入以下命令，停止MySQL服务<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> stop mysql<br></code></pre></td></tr></table></figure></p><p>然后输入以下命令：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mysqld -remove mysql<br></code></pre></td></tr></table></figure></p><p>然后删除相目录与环境变量即可</p><h2 id="MySQL链接"><a href="#MySQL链接" class="headerlink" title="MySQL链接"></a>MySQL链接</h2><p>语法：mysql -u用户名 -p密码 [-h数据库服务器IP地址 -P端口号]</p><ul><li>IP地址默认为：127.0.0.1</li><li>端口号默认为：3306</li></ul><blockquote><p>工作以后，其实大家是不需要在电脑上安装MySQL数据库的，因为在开发中，这台数据库内的数据是需要多人共享的，我们会将数据库安装在服务器上，然后通过远程链接来访问数据库。学习阶段，我们可以借助虚拟机的力量来体验一下这种企业开发模式。通过虚拟机我们可以虚拟出一台计算机，而服务器其实就是一台计算机</p></blockquote><h2 id="MySQL数据模型"><a href="#MySQL数据模型" class="headerlink" title="MySQL数据模型"></a>MySQL数据模型</h2><p>关系型数据库(RDBMS)：建立在关系模型的基础之上，由多张相互连接的<span style="color:red;">二维表</span><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="二维表：就类似于EXCEL表格那种的一张表">[1]</span></a></sup>组成的数据库。</p><p>特点： </p><ol><li>使用表存储数据，格式统一，便于维护</li><li>使用SQL语言操作，标准统一，使用方便，可用于复杂查询</li></ol><p><span style="color:red;">我们需要先连接数据库，才能操作数据内的数据</span></p><p>在数据库内，通常都会有一个内置的软件，就是DBMS，也就是数据库管理系统，它可以操作数据库中的数据。当我们在客户端连接了数据库之后，向数据库发送指令会被DBMS接收，然后它会根据我们发送的指令，操作数据库。</p><p>我们创建出的一个个数据库在我们的磁盘空间中都是以一个个文件夹形式存在的。我们可以打开MySQL安装目录，打开data文件夹，里面的一些文件夹就是安装MySQL时，系统自带的一些数据库。我们可以在终端输入一下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">create database db01;<br></code></pre></td></tr></table></figure><p>“create database”表示创建一个数据库，“db01”则是数据库的名字。创建完毕以后，就可以看见data内多了一个db01文件夹，对应的就是db01数据库。我们可以创建多个数据库，多个数据库在服务器内是互相独立的，它们之间互不影响。在数据库下，也可以创建多个表结构，表结构中存储的就是一条条的数据</p><p><span style="color:red;">实际项目开发中，针对数据库，我们实际上会分成三个阶段：</span></p><ol><li>在项目概要，详细，接口设计时，进行数据库设计</li><li>在编写项目时，通过Java或其他语言，进行数据库操作</li><li>在项目完成以后，进行数据库优化操作</li></ol><h2 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h2><p>SQL：一种操作关系型数据库的语言，定义操作所有关系型数据库的统一标准</p><h3 id="通用语法"><a href="#通用语法" class="headerlink" title="通用语法"></a>通用语法</h3><ol><li>SQL语句可以单行或多行书写，以分号结尾</li><li>SQL语句可以使用空格/缩进来增强语句的可读性</li><li>MySQL数据库的SQL语法不区分大小写</li><li>注释：使用“—”或者“#”</li></ol><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><p>SQL通常被分为四大类</p><div class="table-container"><table><thead><tr><th>简称</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据表中的记录</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言，用来创建数据库用户，控制数据库访问权限</td></tr></tbody></table></div><h2 id="数据库常用操作"><a href="#数据库常用操作" class="headerlink" title="数据库常用操作"></a>数据库常用操作</h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><ol><li><p>查询所有数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure></li><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database db01;<br><span class="hljs-keyword">create</span> database if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> db01;<br></code></pre></td></tr></table></figure><ul><li>“db01”为数据库名字</li><li>database后面可以加上<code>if not exists</code>可选参数，代表数据库不存在就创建，数据库存在则不创建</li></ul></li><li><p>数据库切换/数据库使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">use db01;<br></code></pre></td></tr></table></figure><p>使用db01数据库，也可以理解是进入db01这个数据库</p></li><li><p>查询当前正在使用的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> database();<br></code></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> database db01;<br><span class="hljs-keyword">drop</span> database if <span class="hljs-keyword">exists</span> db01;<br></code></pre></td></tr></table></figure><ul><li>在database后面加上可选参数<code>if exists</code>，代表有就删除，没有则不删除</li></ul></li></ol><p><strong>上述操作中的<code>database</code>关键字也可以换成schema关键字</strong></p><h3 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h3><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><ol><li><p>创建数据表语法：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> 表名(<br>    字段<span class="hljs-number">1</span> 字段类型 [约束] [comment 字段<span class="hljs-number">1</span>注解],<br>    ......<br>    字段n 字段类型 [约束] [comment 字段n注解]<br>)[comment 表注解];<br></code></pre></td></tr></table></figure><p> 如：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> tb_user(<br>    id <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;ID,用户唯一标识&#x27;</span>,<br>    username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) COMMENT <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    gender <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>) COMMENT <span class="hljs-string">&#x27;性别&#x27;</span><br>)COMMENT <span class="hljs-string">&#x27;用户表&#x27;</span>;<br></code></pre></td></tr></table></figure><p> <strong>注意：在SQL语法中，字符串使用<code>varchar()</code>表示，括号内的是字符串的长度，数据超过这个长度将报错</strong></p></li><li><p>约束<br> 上面插入的数据中，是没有做任何约束的。也就是说用户想输入什么数据都可以，但在实际开发中，我们通常是希望给数据加上约束的，比如：id不能为空</p><ul><li>概念：约束是作用在表中字段上的规则，用于限制存储在表中的数据</li><li>目的：保证数据库中数据的正确性，有效性和完整性</li></ul></li></ol><div class="table-container"><table><thead><tr><th>约束</th><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>非空约束</td><td>not null</td><td>限制该字段值不能为null</td></tr><tr><td>唯一约束</td><td>unique</td><td>保证字段的所有数据都是唯一的，不重复的</td></tr><tr><td>主键约束</td><td>primary key(auto_increment)</td><td>主键是一行数据的唯一标识，要求非空且唯一</td></tr><tr><td>默认约束</td><td>default</td><td>保存数据时，如果为指定字段值，则采用默认值</td></tr><tr><td>外键约束</td><td>foreign key</td><td>让两张表的数据建立连接，保证数据的一致性和完整性</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> tb_user(<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;ID,用户唯一标识&#x27;</span>,<br>    username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">UNIQUE</span> COMMENT <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT NULL</span> COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    gender <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;男&#x27;</span> COMMENT <span class="hljs-string">&#x27;性别&#x27;</span><br>)COMMENT <span class="hljs-string">&#x27;用户表&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="MySQL常见数据类型"><a href="#MySQL常见数据类型" class="headerlink" title="MySQL常见数据类型"></a>MySQL常见数据类型</h4><p>MySQL中的数据类型有很多种，主要分为三类：数值类型，字符串类型，日期时间类型</p><h5 id="数值类型："><a href="#数值类型：" class="headerlink" title="数值类型："></a>数值类型：</h5><div class="table-container"><table><thead><tr><th>类型</th><th>大小(byte)</th><th>有符号(SIGNED)范围</th><th>无符号(UNSIGNED)范围</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>tinyint</td><td>1</td><td>(-128, 127)</td><td>(0, 255)</td><td>小整数值</td><td></td></tr><tr><td>smallint</td><td>2</td><td>(-32768, 32767)</td><td>(0, 65535)</td><td>大整数值</td><td></td></tr><tr><td>mediumint</td><td>3</td><td>(-8388608, 8388607)</td><td>(0, 16777215)</td><td>大整数值</td><td></td></tr><tr><td>int</td><td>4</td><td>(-2147483648, 2147483647)</td><td>(0, 4294967295)</td><td>大整数值</td><td></td></tr><tr><td>bigint</td><td>8</td><td>(-2^63, 2^63-1)</td><td>(0, 2^64-1)</td><td>极大整数值</td><td></td></tr><tr><td>float</td><td>4</td><td>(-3.402823466 E+38, 3.402823466351 E+38)</td><td>0 和 (1.175494351 E-38, 3.402823466 E+38)</td><td>单精度浮点数值</td><td>float(5,2)：5表示整个数字长度，2表示小数位个数</td></tr><tr><td>double</td><td>8</td><td>(-1.7976931348623157 E+308, 1.7976931348623157 E+308)</td><td>0 和 (2.2250738585072014 E-308, 1.7976931348623157 E+308)</td><td>双精度浮点数值</td><td>double(5,2)：5表示整个数字长度，2表示小数位个数</td></tr><tr><td>decimal</td><td>-</td><td>-</td><td>-</td><td>小数值(精度更高)</td><td>decimal(5,2)：5表示整个数字长度，2表示小数位个数</td></tr></tbody></table></div><p>数值类型又分为有符号与无符号的：</p><ul><li>有符号：可以取负数</li><li>无符号：只能取正数<br>不论是有符号还是无符号的，它们的取值范围宽度都是一致的，有符号的就相当于是无符号的范围去掉了一半的正数取值，换为了负数取值。<span style="color:red;">默认取值范围是使用有符号的，如果想要使用无符号的，可以在类型后面加上<code>unsigned</code>关键词作为约束</span>。如果你认为该数值只需要使用正数，不需要负数，就可以使用无符号取值。</li></ul><h5 id="字符串类型："><a href="#字符串类型：" class="headerlink" title="字符串类型："></a>字符串类型：</h5><div class="table-container"><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>char</td><td>0 - 255 bytes</td><td>定长字符串</td></tr><tr><td>varchar</td><td>0 - 65535 bytes</td><td>变长字符串</td></tr><tr><td>tinyblob</td><td>0 - 255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>tinytext</td><td>0 - 255 bytes</td><td>短文本字符串</td></tr><tr><td>blob</td><td>0 - 65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>text</td><td>0 - 65 535 bytes</td><td>长文本数据</td></tr><tr><td>mediumblob</td><td>0 - 16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>mediumtext</td><td>0 - 16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>longblob</td><td>0 - 4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>longtext</td><td>0 - 4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table></div><ul><li>char定长字符串：定长字符串代表我的字符串长度是固定的。假设char(10)，即便数据内只存储了一个字符，占用的字符长度也是10个，长度是固定的。优点是：性能比较好，缺点是：浪费空间。</li><li>varchar()变长字符串：变长字符串则表示字符串的长度是可以变化的。同样的varchar(10)，如果数据内只存储了一个字符，则占用的就是一个字符的长度，长度是变化的。优点是：节省空间，缺点是：性能相对较差</li></ul><p><strong>如果记录的值长度固定，则使用char；反之，不固定，则使用varchar；</strong></p><p>关键字结尾为<code>blob</code>的类型，都是以二进制形式存储数据的，这种方式可以存储一些文件，比如图片，视频，音乐…文件类型，但实际中这些数据通常不会放在数据库中，而是放在专门的文件服务器中，所以这种数据类型用的比较少。</p><h5 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h5><div class="table-container"><table><thead><tr><th>分类</th><th>类型</th><th>大小(byte)</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>日期类型</td><td>date</td><td>3</td><td>1000-01-01 至 9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>日期类型</td><td>time</td><td>3</td><td>-838:59:59 至 838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>日期类型</td><td>year</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>日期类型</td><td>datetime</td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>日期类型</td><td>timestamp</td><td>4</td><td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table></div><h4 id="数据表查询"><a href="#数据表查询" class="headerlink" title="数据表查询"></a>数据表查询</h4><ol><li><p>查询当前数据库所有表：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> tables;<br></code></pre></td></tr></table></figure></li><li><p>查询表结构：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">desc</span> 表名;<br></code></pre></td></tr></table></figure></li><li><p>查询建表语句：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create table</span> 表名;<br></code></pre></td></tr></table></figure></li></ol><h4 id="数据表修改"><a href="#数据表修改" class="headerlink" title="数据表修改"></a>数据表修改</h4><p>所谓字段，其实就是每张表的表头，每一个表头就是一个字段</p><ol><li>添加字段： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter table</span> 表名 <span class="hljs-keyword">add</span> 字段名 类型(长度) [comment 注释] [约束]; <br></code></pre></td></tr></table></figure></li><li>修改字段类型： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter table</span> 表名 modify 字段名 新数据类型(长度);<br></code></pre></td></tr></table></figure></li><li>修改字段名和字段类型： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter table</span> 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束];<br></code></pre></td></tr></table></figure></li><li>删除字段： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter table</span> 表名 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> 字段名;<br></code></pre></td></tr></table></figure></li><li>修改表名： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">rename <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">to</span> 新表名;<br></code></pre></td></tr></table></figure></li><li>删除表： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> [if <span class="hljs-keyword">exists</span>] 表名;<br></code></pre></td></tr></table></figure> <strong>在删除表时，表中的数据也会被删除</strong></li></ol><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><p><strong>对数据库中，表的数据记录进行增，删，改的操作</strong></p><h4 id="添加数据insert"><a href="#添加数据insert" class="headerlink" title="添加数据insert"></a>添加数据insert</h4><ol><li><p>指定字段添加数据：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert into</span> 表名 (字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span>) <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure></li><li><p>全部字段添加数据：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert into</span> 表名 <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...);<br></code></pre></td></tr></table></figure></li><li><p>批量添加数据(指定字段)：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert into</span> 表名 (字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span>) <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure></li><li><p>批量添加数据(全部字段)：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert into</span> 表名 <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2.</span>..),(值<span class="hljs-number">1</span>,值<span class="hljs-number">2.</span>..);<br></code></pre></td></tr></table></figure></li><li><p>如：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 添加一条记录<br><span class="hljs-keyword">INSERT INTO</span> tb_user (id, username, name, age, gender, qq, update_time)<br>            <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;适者生存&#x27;</span>, <span class="hljs-string">&#x27;S.F&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;2796802061&#x27;</span>, NOW());<br></code></pre></td></tr></table></figure><p> <code>now()</code>是sql语言中的一个函数，可以获取当前系统时间</p></li></ol><h4 id="删除数据delete"><a href="#删除数据delete" class="headerlink" title="删除数据delete"></a>删除数据delete</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 [<span class="hljs-keyword">where</span> 条件];<br></code></pre></td></tr></table></figure><p>如：删除表中id=1的记录<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 删除数据<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> tb_user <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></p><p><strong>如果不写条件，则删除表中所有数据</strong></p><h4 id="修改数据update"><a href="#修改数据update" class="headerlink" title="修改数据update"></a>修改数据update</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 字段名<span class="hljs-number">1</span><span class="hljs-operator">=</span>值<span class="hljs-number">1</span>, 字段名<span class="hljs-number">2</span><span class="hljs-operator">=</span>值<span class="hljs-number">2</span>,...[<span class="hljs-keyword">where</span> 条件];<br></code></pre></td></tr></table></figure><p>如：将表中id=1的数据username改为”弱肉强食”<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 修改数据<br><span class="hljs-keyword">UPDATE</span> tb_user <span class="hljs-keyword">SET</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;弱肉强食&#x27;</span> <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></p><p><strong>注意：修改语句的条件可以有，也可以没有，如果没有条件，则修改整张表的所有数据</strong></p><h4 id="查询操作select"><a href="#查询操作select" class="headerlink" title="查询操作select"></a>查询操作select</h4><p>基本语法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>    字段列表<br><span class="hljs-keyword">from</span> <br>    表名列表<br><span class="hljs-keyword">where</span><br>    条件列表<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br>    分组字段列表<br><span class="hljs-keyword">having</span> <br>    分组后条件列表<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>    排序字段列表<br>limit<br>    分页参数<br></code></pre></td></tr></table></figure></p><h5 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h5><p>语法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br>    字段列表<br><span class="hljs-keyword">from</span> <br>    表名列表<br></code></pre></td></tr></table></figure></p><ol><li><p>查询多个字段：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span>,字段<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure></li><li><p>查询所有字段：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure></li><li><p>查询字段时，设置别名：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段<span class="hljs-number">1</span> [<span class="hljs-keyword">as</span> 别名],字段<span class="hljs-number">2</span> [<span class="hljs-keyword">as</span> 别名] <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure></li><li><p>去除重复记录：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> 字段列表 <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure></li></ol><p>例子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 基本查询<br># 查询表中的所有name字段的值<br><span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">FROM</span> tb_user;<br></code></pre></td></tr></table></figure></p><h5 id="条件查询-where"><a href="#条件查询-where" class="headerlink" title="条件查询(where)"></a>条件查询(where)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件列表;<br></code></pre></td></tr></table></figure><p>where后面跟条件列表，可以填写多个条件</p><div class="table-container"><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>between … and …</td><td>在某个范围之内(含最小、最大值)</td></tr><tr><td>in(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>like 占位符</td><td>模糊匹配(_匹配单个字符，%匹配任意个字符)</td></tr><tr><td>is null</td><td>是null</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>and 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>or</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>not 或 !</td><td>非，不是</td></tr></tbody></table></div><h5 id="分组查询-group-by"><a href="#分组查询-group-by" class="headerlink" title="分组查询(group by)"></a>分组查询(group by)</h5><p>聚合函数：<br>介绍：将一列数据作为一个整体，进行纵向计算。<br>语法：select 聚合函数(字段列表) from 表名;</p><div class="table-container"><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table></div><ul><li>null值不会被count统计</li><li>统计数量可以使用count(<code>*</code>)，count(字段)，count(常量)<br>  推荐使用：count(<code>*</code>)</li></ul><p>分组查询语法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名 [<span class="hljs-keyword">where</span> 条件] <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段名 [<span class="hljs-keyword">having</span> 分组后过滤条件];<br></code></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 根据性别分组,统计男性与女性人数<br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> tb_user <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br></code></pre></td></tr></table></figure><ol><li>where与having的区别：<ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组;而having是分组之后对结果进行过滤</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以</li></ul></li><li>分组之后，查询的字段一般是聚合函数和分组字段，查询其他字段无任何意义</li><li>执行顺序：where &gt; 聚合函数 &gt; having</li></ol><h5 id="排序查询-order-by"><a href="#排序查询-order-by" class="headerlink" title="排序查询(order by)"></a>排序查询(order by)</h5><p>排序查询语法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名 [<span class="hljs-keyword">where</span> 条件] [<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段名] <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段<span class="hljs-number">1</span> 排序方式<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span> 排序方式<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure></p><p>排序方式：</p><ul><li>ASC：升序(默认)</li><li>DESC：降序</li></ul><p><strong>注意：如果是多字段排序，当第一个字段值相同时，才会根据第二个字段值进行排序</strong></p><h5 id="分页查询-limit"><a href="#分页查询-limit" class="headerlink" title="分页查询(limit)"></a>分页查询(limit)</h5><p>分页查询语法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名 limit 起始索引,查询记录数;<br></code></pre></td></tr></table></figure></p><p>起始索引计算值：起始索引 = (页码 - 1) * 查询记录数;</p><h2 id="MySQL客户端图形化工具"><a href="#MySQL客户端图形化工具" class="headerlink" title="MySQL客户端图形化工具"></a>MySQL客户端图形化工具</h2><ol><li>SQLyog</li><li>Navicat</li><li>DataGrip</li><li>VSCode安装MySQL插件</li></ol><blockquote><p>VSCode中的MySQL插件有很多，我使用的是：<span style="color:red;">MySQL</span>插件，作者是：<span style="color:red;">Database Client</span><br>官方使用文档：<a href="https://github.com/cweijan/vscode-database-client/blob/da698b512cbf113f9db6e3b4c893ab4b4e84c33f/README_CN.md">https://github.com/cweijan/vscode-database-client/blob/da698b512cbf113f9db6e3b4c893ab4b4e84c33f/README_CN.md</a><br>也不是非要使用这个，具说DataGrip和Navicat都很好用，我使用这个只是因为我对VSCode比较熟悉，而且我也懒得去下个软件了，看各自喜好吧</p></blockquote><h2 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h2><p>由于业务之间相互关联，所以各个表结构之间也存在着各种联系</p><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><p>比如：一个部门有多个员工，可是一个员工只归属于一个部门</p><p>解决方法：<span style="color:red;">在多的一方建立外键，指向一的一方的唯一主键</span>。如：在员工表中添加一个dept_id字段，用来存储员工关联的部门的id值，有了部门id，就可以根据部门id到部门表中查询员工属于哪个部门</p><p><img src="https://pic1.imgdb.cn/item/684039d558cb8da5c82cc632.png" alt="一对多"></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>二维表：就类似于EXCEL表格那种的一张表<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2025/05/21/SpringBoot/SpringBoot/"/>
      <url>/2025/05/21/SpringBoot/SpringBoot/</url>
      
        <content type="html"><![CDATA[<ul><li>静态资源：服务器上存储的不会改变的资源，通常不会根据用户的请求而变化，如：HTML，CSS，JS，图片，视频…负责页面展示。</li><li>动态资源：服务器端根据用户请求和其他数据动态生成的资源，内容可能会在每次请求时都发生变化，如：Servlet，JSP…负责逻辑处理。</li></ul><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><p>Spring：<a href="https://spring.io">https://spring.io</a></p><p>SpringBoot是Spring框架下的一个子项目，可以快速构建应用程序，简化开发，提高效率。SpringBoot不是让Spring的功能更强，而是提供了一种快速开发Spring应用的方式</p><p>SpringBoot特点：</p><ol><li>嵌入式Tomcat，无需部署WAR文件<ul><li>SpringBoot使用嵌入式Servlet容器(如：Tomcat，Jetty，Undertow)，应用无需打包成WAR包</li></ul></li><li>简化Maven配置<ul><li>SpringBoot提供一系列<code>starter</code>(启动器)来简化Maven配置</li></ul></li><li>自动配置<ul><li>SpringBoot提供大量的自动配置类，开发人员无需过多xml配置</li></ul></li></ol><h3 id="使用Spring框架的问题"><a href="#使用Spring框架的问题" class="headerlink" title="使用Spring框架的问题"></a>使用Spring框架的问题</h3><ol><li>依赖导入问题：每个项目单独维护自己所依赖的jar包，手动导入依赖容易出错，且无法统一集中管理</li><li>配置繁琐：引入依赖后需要做繁琐的配置，且这些配置对每个项目来说都是有必要的，如：web.xml配置，数据库连接池配置，事务配置…这些配置复杂且重复</li></ol><p>而在SpringBoot中提供了一个功能来解决两个痛点，就是SpringBoot中的<code>starter启动器</code></p><h3 id="SpringBoot中的Starter"><a href="#SpringBoot中的Starter" class="headerlink" title="SpringBoot中的Starter"></a>SpringBoot中的Starter</h3><p>SpringBoot通过将常用的功能场景抽取出来，做成一系列启动器，只需在项目中引入这些启动器，相关的所有依赖就会被全部引入，并且可以不用进行繁琐的配置</p><p>在导入starter之后，SpringBoot会帮我们完成两件事</p><ul><li>相关依赖的自动导入</li><li>相关环境的自动配置</li></ul><p>Starter命名：</p><ul><li>官方启动器命名：<ol><li>前缀：spring-boot-starter-</li><li>规范：spring-boot-starter-模块名</li><li>举例：spring-boot-starter-web</li></ol></li><li>第三方启动器命名：<ol><li>后缀：-spring-boot-starter</li><li>规范：模块名-spring-boot-starter</li><li>举例：mybatis-spring-boot-starter</li></ol></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>需求：使用SpringBoot开发一个Web应用，浏览器发起请求/hello?name=Xxx后，返回一个Hello Xxx!的响应。</p><p>创建SpringBoot工程，并且选择web相关依赖：</p><ol><li>创建Java项目，选择SpringBoot构建工具，选择Maven项目，选择一个版本</li><li>输入包名，输入项目名，选择JDK版本，选择打包方式为jar，选择Spring Web依赖<ul><li>需要等待Maven将依赖下载完成在开始操作</li></ul></li><li>删除项目内没用的文件，只保留src与pom.xml文件</li><li>其中项目中的<code>src/main/java/项目名Application.java</code>类为项目的入口类，通过<code>@SpringBootApplication</code>注解与调用<code>SpringApplication.run()</code>方法启动整个项目<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 启动类 / 引导类  -- 程序入口</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoApplication</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(DemoApplication.class, args);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>创建好项目之后，我们就可以来编写一个简单的请求处理</p><ol><li>在启动类同一目录下，创建<span style="color:blue;">HelloController</span>类，作为请求处理类</li><li>在类名上面输入<span style="color:blue;">@RestController</span>注解，表示当前类为请求处理类</li><li>编写请求方法用于响应前端发起的请求<ul><li>请求响应的数据就是方法的返回值</li><li>加上<span style="color:blue;">@RequestMapping</span>注解，表示请求路径，并且为注解设置值为”/hello”</li><li>在方法形参中声明参数<code>name</code>，用于接收前端发起请求时，请求路径<code>?</code>后面携带的参数</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span> <span class="hljs-comment">// 表示当前类为请求处理类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 请求方法hello</span><br><span class="hljs-comment">     * 用于接收请求路径为/hello的请求</span><br><span class="hljs-comment">     * 形参name用于接收请求路径?后面携带的参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello &quot;</span> + name + <span class="hljs-string">&quot;&lt;h1&gt;Stady SpringBoot&lt;/h1&gt;&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行项目，在浏览器地址栏输入<code>localhost:8080/hello?name=Tom</code>，页面上显示对应返回值就是成功了</p><p>运行项目可以通过vscode或者idea直接启动，或在终端输入以下指令<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mvn spring-boot:run<br></code></pre></td></tr></table></figure></p><h2 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a>什么是HTTP协议</h2><p>Hyper Text Transfer Protocol，超文本传输协议，规定浏览器与服务器之间数据传输的规则</p><h3 id="请求标头与响应标头"><a href="#请求标头与响应标头" class="headerlink" title="请求标头与响应标头"></a>请求标头与响应标头</h3><p>在浏览器中，打开开发者模式，找到网络选项，然后重新发起请求，可以看到里面有很多请求信息</p><h3 id="请求标头"><a href="#请求标头" class="headerlink" title="请求标头"></a>请求标头</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/hello?name=%E8%83%A1%E4%BF%8A%E7%86%99</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:138.0) Gecko/20100101 Firefox/138.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br, zstd<br><span class="hljs-attribute">Sec-GPC</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0, i<br><span class="hljs-attribute">Pragma</span><span class="hljs-punctuation">: </span>no-cache<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>no-cache<br></code></pre></td></tr></table></figure><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>请求信息的第一行称为请求行，其中包括请求方式(GET)，请求路径(/hello?name=%E8%83%A1%E4%BF%8A%E7%86%99)，以及HTTP协议版本(HTTP/1.1)</p><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><p>下面的信息都为请求头，如果是post请求还会有请求体，get请求一般不会携带请求体</p><h3 id="响应标头"><a href="#响应标头" class="headerlink" title="响应标头"></a>响应标头</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> <br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/html;charset=UTF-8<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>40<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Thu, 22 May 2025 13:26:24 GMT<br><span class="hljs-attribute">Keep-Alive</span><span class="hljs-punctuation">: </span>timeout=60<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><br><span class="language-xml">Hello Tom<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Stady SpringBoot<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h4><p>响应行为第一行，其中包括HTTP协议版本以及响应状态码</p><h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><p>中间的部分就是响应头</p><h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">Hello Tom<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Stady SpringBoot<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p>就是响应体，里面是服务器响应过来的数据</p><h2 id="获取请求数据"><a href="#获取请求数据" class="headerlink" title="获取请求数据"></a>获取请求数据</h2><p>Web服务器对于HTTP协议的请求数据进行解析，并进行了封装(<code>HttpServletRequest</code>)，通过这个类就可以获取所有请求数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/request&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">request</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">// 获取请求方式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br>        System.out.println(<span class="hljs-string">&quot;请求方式 &quot;</span> + method);<br><br>        <span class="hljs-comment">// 获取请求url地址 getRequestURL() 返回值为StringButter 类型</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> request.getRequestURL().toString();<br>        System.out.println(<span class="hljs-string">&quot;请求地址 &quot;</span> + url);<br><br>        <span class="hljs-comment">// 获取请求uri</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> request.getRequestURI(); <span class="hljs-comment">// &#x27;/request&#x27;</span><br>        System.out.println(<span class="hljs-string">&quot;请求uri &quot;</span> + uri);<br><br>        <span class="hljs-comment">// 获取请求协议</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">http</span> <span class="hljs-operator">=</span> request.getProtocol();<br>        System.out.println(<span class="hljs-string">&quot;请求协议 &quot;</span> + http);<br><br>        <span class="hljs-comment">// 获取请求参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;请求参数 &quot;</span> + name);<br><br>        <span class="hljs-comment">// 获取请求头</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">header</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;Accept&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;请求头 &quot;</span> + header);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;request&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 请求方式 GET</span><br><span class="hljs-comment">     * 请求地址 http://localhost:8080/request</span><br><span class="hljs-comment">     * 请求uri /request</span><br><span class="hljs-comment">     * 请求协议 HTTP/1.1</span><br><span class="hljs-comment">     * 请求参数 Tom</span><br><span class="hljs-comment">     * 请求头 text/html,application/xhtml+xml,application/xml;q=0.9,</span><br><span class="hljs-comment">     * ;q=0.8</span><br><span class="hljs-comment">     */</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="设置响应数据"><a href="#设置响应数据" class="headerlink" title="设置响应数据"></a>设置响应数据</h2><p>Web服务器对响应数据封装为了<code>HttpServletResponse</code>类，通过这个类就可以设置服务器的响应信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseController</span> &#123;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/response&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">response</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-comment">// 设置响应状态码</span><br>        response.setStatus(<span class="hljs-number">200</span>);<br><br>        <span class="hljs-comment">// 设置响应头</span><br>        response.setHeader(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;Java&quot;</span>);<br><br>        <span class="hljs-comment">// 设置响应体</span><br>        response.getWriter().write(<span class="hljs-string">&quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SpringBoot基本Web案例"><a href="#SpringBoot基本Web案例" class="headerlink" title="SpringBoot基本Web案例"></a>SpringBoot基本Web案例</h2><h3 id="前端页面准备"><a href="#前端页面准备" class="headerlink" title="前端页面准备"></a>前端页面准备</h3><p>首先，我们需要先准备一个简单的前端页面，用于显示用户列表，用户信息包括(id，name，age，phone，email)。然后将原本前端的数据删除，通过axios向<code>http://localhost:8080/user</code>地址发送请求，将请求获取的数据赋值给前端原本用来渲染的数据。</p><p>可以直接将这些代码复制到App.vue文件中，也可以自己写<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; onMounted, reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> users = <span class="hljs-title function_">reactive</span>([])</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-string">&#x27;http://127.0.0.1:8080/user&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getUser</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> r = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(http)</span><br><span class="language-javascript">  <span class="hljs-comment">// 通过Object.assign方法赋值，以确保响应式不会丢失</span></span><br><span class="language-javascript">  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(users, r.<span class="hljs-property">data</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">getUser</span>()</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user-list&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>用户列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user in users&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;user.id&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user-info&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic-info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span>&#123;&#123; user.age &#125;&#125;岁<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;contact-info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;phone&quot;</span>&gt;</span>&#123;&#123; user.phone &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>&#123;&#123; user.email &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.user-list</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Segoe UI&#x27;</span>, Tahoma, Geneva, Verdana, sans-serif;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#2c3e50</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.8rem</span>;</span><br><span class="language-css">  <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">background</span>: white;</span><br><span class="language-css">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">8px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>);</span><br><span class="language-css">  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.3s</span> ease;</span><br><span class="language-css">  <span class="hljs-attribute">border-left</span>: <span class="hljs-number">4px</span> solid <span class="hljs-number">#3498db</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">2px</span>);</span><br><span class="language-css">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-number">12px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.15</span>);</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.user-info</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">  <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">  <span class="hljs-attribute">gap</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.basic-info</span>,</span><br><span class="language-css"><span class="hljs-selector-class">.contact-info</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">  <span class="hljs-attribute">gap</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.meta-info</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">  <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="language-css">  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#eee</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.name</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;</span><br><span class="language-css">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2em</span>;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#2c3e50</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.age</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#7f8c8d</span>;</span><br><span class="language-css">  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f8f9fa</span>;</span><br><span class="language-css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span> <span class="hljs-number">8px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.9em</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.phone</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#3498db</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.email</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#e74c3c</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h3 id="定义实体类封装用户信息"><a href="#定义实体类封装用户信息" class="headerlink" title="定义实体类封装用户信息"></a>定义实体类封装用户信息</h3><p><code>xyz.xiaohu.app</code>这个包的子包pojo下面，定义一个实体类<code>User.java</code>。在pom.xml文件中引入<code>lombok</code>依赖，可以让我们快速构建构造方法以及get，set方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 使用最新版本 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在User.java实体类中封装用户信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xyz.xiaohuzg.app.pojo;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Data 注解来自lombok依赖，表示提供类中所有get,set方法</span><br><span class="hljs-comment"> * @NoArgsConstructor 注解来自lombok依赖，表示提供类中无参构造</span><br><span class="hljs-comment"> * @AllArgsConstructor 注解来自lombok依赖，表示提供类中全参构造</span><br><span class="hljs-comment"> * 封装用户信息实体类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">// 在定义信息时，一般使用包装类，而不会直接使用基本类</span><br>    <span class="hljs-comment">// 因为在基本类中一般都是有默认值的</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String phone;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> LocalDateTime createdAt;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="定义请求处理类，接收前端请求"><a href="#定义请求处理类，接收前端请求" class="headerlink" title="定义请求处理类，接收前端请求"></a>定义请求处理类，接收前端请求</h3><ol><li>在<code>xyz.xiaohu.app</code>中创建controller包，专门存放Controller相关类</li><li>在controller包中，创建UserController.java类，用来做用户信息Controller处理</li><li>编写list方法，接收/user请求，并且返回用户数据 - 新建ArrayList集合，将处理前的用户数据放在里面。对用户数据处理后，封装为User对象，并且放在list集合中。返回集合</li><li>为方法设置<code>@CrossOrigin(origins = &quot;*&quot;)</code>注解用来解决跨域问题</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xyz.xiaohuzg.app.controller;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.CrossOrigin;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> xyz.xiaohuzg.app.pojo.User;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 用户信息Controller</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <br>    <span class="hljs-meta">@CrossOrigin(origins = &quot;*&quot;)</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 封装User对象到list集合中 - 创建并读取数据</span><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;001,xiaohu,22,15779485599,2796802061@qq.com&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;002,xiaoli,21,15779485599,2796802061@qq.com&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;003,xiaozhang,20,15779485599,2796802061@qq.com&quot;</span>);<br><br>        <span class="hljs-comment">// 遍历数据进行操作 并且 返回数据(JSON格式) - 逻辑处理</span><br>        List&lt;User&gt; user = list.stream().map( line -&gt; &#123;<br>            String[] parts = line.split(<span class="hljs-string">&quot;,&quot;</span>);<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> Integer.parseInt(parts[<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> parts[<span class="hljs-number">1</span>];<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> Integer.parseInt(parts[<span class="hljs-number">2</span>]);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> parts[<span class="hljs-number">3</span>];<br>            <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> parts[<span class="hljs-number">4</span>];<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(id,name,age,phone,email);<br>        &#125;).toList();<br><br>        <span class="hljs-comment">// 响应</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行前后端项目，前端正常显示数据，就大功告成了<br><img src="https://pic1.imgdb.cn/item/6832dadb58cb8da5c80d3942.png" alt="整体效果"></p><p><strong>为什么不需要手动响应数据？并且响应的数据也不是Json格式，前端却能正常接收？：</strong>其实@RestController注解底层的@ResponseBody注解会直接将controller的返回值直接作为响应数据响应给前端。并且会将对象或者集合类型的数据先转化为Json格式</p><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><h3 id="Web开发中的三层架构"><a href="#Web开发中的三层架构" class="headerlink" title="Web开发中的三层架构"></a>Web开发中的三层架构</h3><p>刚才我们将数据访问，逻辑处理以及响应数据的代码全都写在了一个方法中，这样不利于项目维护。通常我们会尽量让每个类，每个接口以及每个方法只完成一件事(单一职责原则)，所以在JavaWeb开发中通常有三层架构</p><ol><li>表示层(控制层)：controller(汉译：控制器)层，负责接收请求，响应数据</li><li>逻辑处理层：Service(汉译：业务)业务逻辑层，处理业务逻辑</li><li>数据访问层：Dao层，数据访问层，包括数据的增，删，改，查</li></ol><p>那我们就可以通过三层架构来优化一下刚才写的案例</p><ol><li>因为controller包我们已经有了，所以在xyz.xiaohu.app包下在新建两个子包service，dao</li><li>在dao包下先定义一个统一的接口UserDao.java，然后在dao包下定义一个子包impl用来存放实现类，impl内定义一个实现类UserDaoImpl.java，让实现类实现UserDao接口</li><li>准备service包，service也是以相同的方式实现service结构</li><li>编写dao层：在UserDao.java接口中，定义一个findAll方法，然后在UserDaoImpl.java实现类中实现该方法，并且将UserController.java中加载数据的代码复制到该方法中<ol><li>接口中的findAll方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在接口中定义一个方法</span><br><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li><li>实现类中的findAll方法 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 封装User对象到list集合中</span><br>    ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    list.add(<span class="hljs-string">&quot;001,xiaohu,22,15779485599,2796802061@qq.com&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;002,xiaoli,21,15779485599,2796802061@qq.com&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;003,xiaozhang,20,15779485599,2796802061@qq.com&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li>编写service层：在UserService.java接口中定义findAll方法，并且在实现类中实现该方法，将UserController中逻辑处理的代码复制到里面。<br><span style="color:red;">注意：因为UserServiceImpl.java中的findAll方法需要使用到UserDaoImpl.java中findAll方法处理完的数据，所以这边我们需要声明接口，new一个userDao对象，通过对象调用方法，获取数据</span><ol><li>接口中的findAll方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li><li>实现类中的findAll方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 接口声明</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 调用Dao获取数据</span><br>    List&lt;String&gt; list = userDao.findAll();<br><br>    <span class="hljs-comment">// 遍历数据进行操作 并且 返回数据(JSON格式)</span><br>    <span class="hljs-keyword">return</span> list.stream().map( line -&gt; &#123;<br>        String[] parts = line.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> Integer.parseInt(parts[<span class="hljs-number">0</span>]);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> parts[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> Integer.parseInt(parts[<span class="hljs-number">2</span>]);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> parts[<span class="hljs-number">3</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> parts[<span class="hljs-number">4</span>];<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(id,name,age,phone,email);<br>    &#125;).toList();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li>在UserController.java中，同样声明接口，调用UserServiceImpl中的findAll方法获取最终数据<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br><br><span class="hljs-meta">@CrossOrigin(origins = &quot;*&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 调用userService.findAll获取最终数据</span><br>    <span class="hljs-keyword">return</span> userService.findAll();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>这样就完成了三层架构分离，将代码都从一个方法中，分离到了三层架构中</p><h2 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h2><h3 id="控制反转与依赖注入-IoC-amp-DI"><a href="#控制反转与依赖注入-IoC-amp-DI" class="headerlink" title="控制反转与依赖注入(IoC &amp; DI)"></a>控制反转与依赖注入(IoC &amp; DI)</h3><p>在Java开发中，控制反转(IoC)与依赖注入(DI)是Spring框架的核心概念，它们旨在降低代码的耦合度，提高代码的内聚度：</p><ul><li>耦合：指模块之间的依赖程度。高耦合度意味着一个模块的修改将直接影响其他模块，低耦合则与之相反</li><li>内聚：指模块内部元素(方法，属性)的关联程度。高内聚意味着模块专注于单一职责，低内聚则指功能更加分散</li><li>Bean对象：通过IoC容器管理的对象，就称为Bean对象</li></ul><blockquote><p>在软件开发中，耦合(Cupling)和内聚(Cohesion)是两个核心概念，用于评估代码的设计质量。它们直接影响软件的可维护性，可扩展性和可复用性。开发人员通常奉行<strong>低耦合高内聚</strong>原则</p></blockquote><h4 id="控制反转-Inversion-of-Control，IoC"><a href="#控制反转-Inversion-of-Control，IoC" class="headerlink" title="控制反转(Inversion of Control，IoC)"></a>控制反转(Inversion of Control，IoC)</h4><p>按照之前的方式：对象的创建和依赖关系由程序自身控制(如：通过new关键字)<br>像之前，需要使用UserDaoImpl对象直接new了一个<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>  <span class="hljs-comment">// 接口声明</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>&#125;<br></code></pre></td></tr></table></figure><br><strong>控制反转</strong>则是将对象创建以及依赖关系的管理权交给了外部容器(如：Spring的IoC容器)，程序仅仅只是使用对象。这样一来控制权从程序内部转移到外部容器，以此来实现程序的解耦<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">// IoC方式，不在通过new创建，而是通过容器注入</span><br>    <span class="hljs-keyword">private</span> UserDao userDao; <span class="hljs-comment">// 仅仅声明依赖</span><br>&#125;<br></code></pre></td></tr></table></figure></p><h5 id="将实现类对象交给IoC容器管理"><a href="#将实现类对象交给IoC容器管理" class="headerlink" title="将实现类对象交给IoC容器管理"></a>将实现类对象交给IoC容器管理</h5><p>为需要交给IoC容器管理的实现类，都添加上<span style="color:green;">@Component</span>注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 封装User对象到list集合中</span><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;001,xiaohu,22,15779485599,2796802061@qq.com&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;002,xiaoli,21,15779485599,2796802061@qq.com&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;003,xiaozhang,20,15779485599,2796802061@qq.com&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p>为了更好的区分三层架构中的每一层，Spring框架又提供了三个@Component注解的衍生注解</p><div class="table-container"><table><thead><tr><th>注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>@Component</td><td>声明Bean的基础注解</td><td>不属于一下三类时，使用此注解</td></tr><tr><td>@Controller</td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td>@Service</td><td>@Component的衍生注解</td><td>标注在业务类上</td></tr><tr><td>@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问类上</td></tr></tbody></table></div><p><span style="color:red;">可以全都使用@Component注解，但为了规范，官方推荐对应的类使用对应的衍生注解</span></p><p>在使用了<span style="color:green;">@RestController</span>注解的类上就不需要再使用<span style="color:green;">@Controller</span>注解了，因为@RestController注解底层就已经包括了@Controller注解</p><blockquote><p>声明Bean的时候，可以通过在注解后面加上”(value = “bean名字”)”来指定bean的名字。如果没有指定，bena名字通常是类名首字母小写。</p></blockquote><h4 id="依赖注入-Dependency-Injection，DI"><a href="#依赖注入-Dependency-Injection，DI" class="headerlink" title="依赖注入(Dependency Injection，DI)"></a>依赖注入(Dependency Injection，DI)</h4><p><strong>依赖注入</strong>：IoC的具体实现方式，通过<strong>外部容器</strong>将对象依赖注入到目标对象中</p><h5 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h5><p>通过Spring框架的<span style="color:green;">@AutoWired</span>注解，实现自动注入依赖<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// IoC方式，不在通过new创建，而是通过容器注入</span><br><span class="hljs-meta">@Autowired</span> <span class="hljs-comment">// 自动注入</span><br><span class="hljs-keyword">private</span> UserDao userDao; <span class="hljs-comment">// 依赖声明</span><br></code></pre></td></tr></table></figure></p><h5 id="构造器注入-官方推荐"><a href="#构造器注入-官方推荐" class="headerlink" title="构造器注入(官方推荐)"></a>构造器注入(官方推荐)</h5><p>通过构造函数传递依赖对象，以此来实现依赖注入<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// IoC方式，不在通过new创建，而是通过容器注入</span><br><span class="hljs-keyword">private</span> UserDao userDao; <span class="hljs-comment">// 依赖声明</span><br><br><span class="hljs-comment">// 构造器注入</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">UserServiceImpl</span><span class="hljs-params">(UserDaoImpl userDaoImpl)</span>&#123;<br>    <span class="hljs-built_in">this</span>.userDao = userDaoImpl;<br>&#125;<br></code></pre></td></tr></table></figure></p><h5 id="Setter注入"><a href="#Setter注入" class="headerlink" title="Setter注入"></a>Setter注入</h5><p>通过set方法传递依赖，实现依赖注入<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// IoC方式，不在通过new创建，而是通过容器注入</span><br><span class="hljs-keyword">private</span> UserDao userDao; <span class="hljs-comment">// 依赖声明</span><br><br><span class="hljs-comment">// Setter注入</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserDao</span><span class="hljs-params">(UserDaoImpl userDaoImpl)</span>&#123;<br>    <span class="hljs-built_in">this</span>.userDao = userDaoImpl;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="SpringBoot项目配置文件"><a href="#SpringBoot项目配置文件" class="headerlink" title="SpringBoot项目配置文件"></a>SpringBoot项目配置文件</h2><p><span style="color:purple;">updateTime：2025-6-2 00:34:00</span></p><p>SpringBoot项目提供多种属性配置方式(properties，yaml，yml)</p><p>properties格式：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 配置数据库连接信息</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/tb_user</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">1234</span><br></code></pre></td></tr></table></figure><p>  properties格式会显得有点臃肿，层级结构不清晰</p><p>yaml/yml格式：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>    <span class="hljs-attr">datasource:</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/tb_user</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-number">1234</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><p>yml配置文件中，支持多层级嵌套，层级结构更加清晰</p><p>在Java项目开发中，我们可以将配置文件切换为yml格式配置文件<code>applaication.yml</code></p><p>将applaication.properties配置文件切换为applaication.yml配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">app</span><br><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-comment"># 配置数据库连接信息</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/tb_user</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">1234</span><br><br>    <span class="hljs-comment"># 配置数据库连接池使用Druid连接池</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><br><span class="hljs-comment"># 配置MyBatis日志</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2025/05/20/Maven/Maven/"/>
      <url>/2025/05/20/Maven/Maven/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Maven？"><a href="#什么是Maven？" class="headerlink" title="什么是Maven？"></a>什么是Maven？</h2><p>Maven是一款用于管理和构建Java项目的工具，是apache旗下的一个开源项目。</p><p>下载地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><p>作用：</p><ul><li>依赖管理：方便快捷的管理项目依赖的资源(jar包)</li><li>项目构建：标准化的跨平台(Linux，Windows，MacOS)的自动化项目构建方式</li><li>统一项目结构：提供标准，统一的项目结构</li></ul><h2 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h2><ol><li>在电脑的非C盘中创建一个Maven文件夹，并且将下载好的Maven压缩包解压到该文件夹中</li><li>找到安装的Maven解压文件夹中的<code>apache-maven-3.8.8\conf\settings.xml</code>文件<ol><li>在bin的同级目录下创建<code>mvn_repo</code>文件夹，用来作为本地仓库文件夹</li><li>打开<code>conf\settings.xml</code>文件，修改文件内的<code>&lt;localRepository&gt;</code>标签，将该标签复制到注释外，并且将里面的值修改为本地仓库路径，也就是mvn_repo目录的路径 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>F:\Maven\apache-maven-3.8.8-bin\apache-maven-3.8.8\mvn_repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>配置国内阿里云远程仓库(不配置阿里云远程仓库的话，默认会去国外的公共仓库下载jar包，速度很慢)，将原本的mirror标签注释，复制以下代码加入 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span><br>        http://maven.aliyun.com/nexus/content/groups/public/<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>        <br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li>配置Maven环境变量，配置好以后就可以在电脑任意地方通过<code>mvn</code>命令使用Maven的功能<ol><li>右键<code>此电脑</code> -&gt; <code>属性</code> -&gt; <code>高级系统设置</code> -&gt; <code>环境变量</code> -&gt; <code>系统变量</code> -&gt; <code>新建</code></li><li>变量名：<code>MAVEN_HOME</code>，变量值：<code>Maven解压的路径</code>(bin的上级目录)</li><li>在<code>Path</code>目录中，新建<code>%MAVEN_HOME%\bin</code></li><li>打开cmd，执行<code>mvn -v</code>，如果出现Maven的版本信息，则表示安装成功</li></ol></li><li>在终端输入<code>mvn help:system</code>，初始化Maven仓库</li></ol><h2 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h2><p>Maven中的坐标是资源的唯一标识，通过坐标可以定位唯一资源位置。可以使用坐标来定义项目中使用的jar包</p><ol><li>groupId：定义当前项目隶属的组织名称，一般使用域名反写</li><li>artifactId：定义当前Maven项目名称</li><li>version：定义当前项目版本号<ul><li>SNAPSHOT：快照版本，表示当前版本不稳定</li><li>RELEASE：正式版本，表示当前版本稳定</li></ul></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>xyz.xiaohuzg<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="在Maven中使用依赖"><a href="#在Maven中使用依赖" class="headerlink" title="在Maven中使用依赖"></a>在Maven中使用依赖</h2><p>在Maven中，使用Jar包，不需要导包等一系列操作，只需在Maven的配置文件<code>pom.xml</code>中描述要使用的jar包即可。一个项目可以引用多个jar包</p><ol><li>在<code>&lt;dependencies&gt;</code>标签中，描述所有的jar包</li><li>在<code>dependency</code>标签中，描述要使用的jar包</li><li>定义要是用的jar包的坐标groupId，artifactId，version</li><li>编译一下项目，Maven会自动下载jar包并且加入到本地仓库中</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置要使用的jar包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 要使用的jar包 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- jar包版本 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><p>默认情况下，jar包可以在项目的任意地方使用。通过<code>&lt;scope&gt;</code>标签可以设置其作用范围</p><ol><li>主程序范围：main文件夹内有效</li><li>测试程序范围：test文件夹内有效</li><li>是否参与打包运行：package范围内有效</li></ol><div class="table-container"><table><thead><tr><th>值</th><th>主</th><th>测试</th><th>打包</th></tr></thead><tbody><tr><td>compile</td><td>√</td><td>√</td><td>√</td></tr><tr><td>test</td><td>×</td><td>√</td><td>×</td></tr><tr><td>provided</td><td>√</td><td>√</td><td>×</td></tr><tr><td>runtime</td><td>√</td><td>√</td><td>×</td></tr></tbody></table></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 要使用的jar包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- jar包版本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 依赖范围 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Maven生命周期"><a href="#Maven生命周期" class="headerlink" title="Maven生命周期"></a>Maven生命周期</h2><p>Maven生命周期是为了对所有Maven项目构建过程进行抽象和统一<br>Maven中三层相互独立的生命周期：</p><ul><li>clean：清理周期</li><li>default：核心周期，如：编译，测试，打包，安装，部署</li><li>site：生成日志，发布站点…</li></ul><p>生命周期关键阶段：</p><ol><li>clean：移除上一次构建生成的文件(target)</li><li>compile：编译项目源代码</li><li>test：使用单元测试框架运行测试(junit)</li><li>package：将编译好的项目打包成jar/war/ear</li><li>install：将打包好的项目安装到本地仓库</li></ol><p><strong>同一层生命周期中，后面的阶段运行，前面的阶段也会运行</strong></p><h2 id="标准化的项目构建流程"><a href="#标准化的项目构建流程" class="headerlink" title="标准化的项目构建流程"></a>标准化的项目构建流程</h2><ol><li><p>清除指令：</p> <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mvn</span> clean<br></code></pre></td></tr></table></figure></li><li><p>编译指令：</p> <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mvn</span> compile<br></code></pre></td></tr></table></figure></li><li>测试指令： <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mvn</span> test<br></code></pre></td></tr></table></figure></li><li>打包指令： <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">mvn <span class="hljs-keyword">package</span><br></code></pre></td></tr></table></figure></li><li>安装指令： <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">mvn</span> install<br></code></pre></td></tr></table></figure></li></ol><h2 id="单元测试JUnit"><a href="#单元测试JUnit" class="headerlink" title="单元测试JUnit"></a>单元测试JUnit</h2><p>测试：一种用来促进鉴定软件正确性，完整性，安全性和质量的过程。<br>测试阶段：单元测试 -&gt; 集成测试 -&gt; 系统测试 -&gt; 验收测试</p><ol><li>单元测试：对软件的基本组成单元进行测试，检验软件基本组成单元的正确性</li><li>集成测试：将以通过测试的单元，按照设计组合成系统或子系统，再次进行测试。检验单元之间协作是否正确</li><li>系统测试：对以集成好的软件系统进行彻底测试，验证软件系统的正确性，性能是否满足需求</li><li>验收测试：针对用户需求，业务流程进行正式测试，验证软件系统是否满足验收需求</li></ol><p>在Java中，<a href="https://junit.org/junit5/">JUnit</a>是一个单元测试框架，提供了一些功能方便用来进行单元测试。</p><div class="table-container"><table><thead><tr><th>main方法测试</th><th>JUnit单元测试</th></tr></thead><tbody><tr><td>测试代码与源代码未分开，难以维护</td><td>测试代码与源代码分开，易于维护</td></tr><tr><td>单个方法测试失败，影响后续方法</td><td>可根据需求进行自动化测试</td></tr><tr><td>无法自动化测试得到测试报告</td><td>可以自动化测试产出测试报告</td></tr></tbody></table></div><h3 id="使用JUnit进行单元测试"><a href="#使用JUnit进行单元测试" class="headerlink" title="使用JUnit进行单元测试"></a>使用JUnit进行单元测试</h3><p>首先在main/java目录中创建一个类，类里面写两个工具方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xyz.xiaohuzg;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">// 传入身份证号，返回年龄</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">(String idCard)</span> &#123;<br>        <span class="hljs-keyword">if</span> (idCard == <span class="hljs-literal">null</span> || idCard.length() != <span class="hljs-number">18</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;无效的身份证号&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 获取第六位到第14位</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">birthday</span> <span class="hljs-operator">=</span> idCard.substring(<span class="hljs-number">6</span>, <span class="hljs-number">14</span>);<br>        <span class="hljs-comment">// 获取当前时间</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">currentDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-comment">// 创建一个时间格式化对象</span><br>        <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">formatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyyMMdd&quot;</span>);<br>        <span class="hljs-comment">// 格式化时间</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">newTime</span> <span class="hljs-operator">=</span> currentDateTime.format(formatter);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isNotBirthday</span> <span class="hljs-operator">=</span> Integer.parseInt(birthday.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>)) &gt; Integer.parseInt(newTime.substring(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> Integer.parseInt(newTime.substring(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>)) - Integer.parseInt(birthday.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>));<br><br>        <span class="hljs-keyword">if</span>(isNotBirthday)&#123;<br>            <span class="hljs-keyword">return</span> age;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> age + <span class="hljs-number">1</span>; <br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取性别</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">(String idCard)</span> &#123;<br>        <span class="hljs-keyword">if</span>(idCard == <span class="hljs-literal">null</span> || idCard.length() != <span class="hljs-number">18</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;无效的身份证号&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> Integer.parseInt(idCard.substring(<span class="hljs-number">16</span>,<span class="hljs-number">17</span>)) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;女&quot;</span> : <span class="hljs-string">&quot;男&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>接下来，我们要使用JUnit对UserService中的方法进行单元测试<br>在pom.xml中，引入JUnit依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在test/java目录下，创建测试类，并编写对应的测试方法，并在方法上声明<code>@Test注解</code><br><span style="color:red">JUnit单元测试类的命名规范为：XxxxxTest。而单元测试的方法必须声明为public void</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">import</span> xyz.xiaohuzg.UserService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTese</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetAge</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 测试getAge方法</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<br>        userService.getAge(<span class="hljs-string">&quot;360222200212222317&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetGender</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<br>        userService.getGender(<span class="hljs-string">&quot;360222200212222317&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试方法编写完成以后，点击左边的运行按钮就可以运行单元测试了。</p><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>JUnit提供了一些辅助方法，用来确定被测试的方法是否按照预期的效果正常运行，这种方式就称为断言</p><div class="table-container"><table><thead><tr><th>断言方法</th><th>说明</th></tr></thead><tbody><tr><td>Assertions.assertEquals(Object exp, Object act)</td><td>判断两个对象是否相等</td></tr><tr><td>Assertions.assertNotEquals(Object unexp, Object act)</td><td>判断两个对象是否不相等</td></tr><tr><td>Assertions.assertTrue(boolean condition)</td><td>判断给定的条件是否为true</td></tr><tr><td>Assertions.assertFalse(boolean condition)</td><td>判断给定的条件是否为false</td></tr><tr><td>Assertions.assertNull(Object obj)</td><td>判断给定的对象是否为null</td></tr><tr><td>Assertions.assertNotNull(Object obj)</td><td>判断给定的对象是否不为null</td></tr><tr><td>Assertions.assertThrows(Class&lt;? extends Throwable&gt; exp, Executable exec)</td><td>判断给定的方法是否抛出指定的异常</td></tr></tbody></table></div><p>exp代表期望值，act代表实际值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 断言</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetGenderWithAssert</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> userService.getGender(<span class="hljs-string">&quot;360222200212222317&quot;</span>);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 期望值为&quot;男&quot;</span><br><span class="hljs-comment">    * 如果返回值不为男，则报错</span><br><span class="hljs-comment">    * message为错误提示信息，可写可不写</span><br><span class="hljs-comment">    */</span><br>    Assertions.assertEquals(gender, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;性别获取逻辑有误&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h3><div class="table-container"><table><thead><tr><th>注解</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>@Test</td><td>声明一个测试方法</td><td>单元测试</td></tr><tr><td>@ParameterizedTest</td><td>声明一个参数化测试方法(可以让单元测试运行多次，每次运行仅参数不同)</td><td>用了该注解，就不需要用@Test注解了</td></tr><tr><td>@ValueSource</td><td>参数化测试的参数来源，赋予测试方法参数</td><td>与参数化测试注解配合使用</td></tr><tr><td>@DisplayName</td><td>为测试类或测试方法指定显示名称</td><td>方便阅读测试报告</td></tr><tr><td>@BeforeEach</td><td>修饰一个实例方法，在每个测试方法执行之前执行一次</td><td>初始化资源</td></tr><tr><td>@AfterEach</td><td>修饰一个实例方法，在每个测试方法执行之后执行一次</td><td>释放资源</td></tr><tr><td>@BeforeAll</td><td>修饰一个静态方法，在所有测试方法执行之前执行一次</td><td>初始化资源</td></tr><tr><td>@AfterAll</td><td>修饰一个静态方法，在所有测试方法执行之后执行一次</td><td>释放资源</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 参数化测试</span><br><span class="hljs-comment">* @ParameterizedTest注解用于参数化测试</span><br><span class="hljs-comment">* @ValueSource注解用于提供测试数据</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@DisplayName(&quot;测试用户性别&quot;)</span><br><span class="hljs-meta">@ParameterizedTest</span><br><span class="hljs-meta">@ValueSource(strings = &#123;&quot;360222200212222317&quot;, &quot;360222200212222322&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parrameterizedTestGetGender</span><span class="hljs-params">(String idCard)</span>&#123;<br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> userService.getGender(idCard);<br>    Assertions.assertEquals(gender, <span class="hljs-string">&quot;男&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>原则：在编写单元测试时，要尽可能的覆盖方法中，所有有可能出现的情况，以确保代码的正确性。</p><h2 id="Maven常见问题"><a href="#Maven常见问题" class="headerlink" title="Maven常见问题"></a>Maven常见问题</h2><p>由于网络问题，有时下载依赖会出现下载失败，但是我们的电脑中会存在该依赖的残留文件，此时如果重新下载，则Maven不会下载该依赖<br>解决方法：找到bin上级目录，打开终端，运行一下指令，删除所有残留文件<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">del</span> /s *.lastUpdated<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios发送请求</title>
      <link href="/2025/05/20/AJAX/Axios/Axios/"/>
      <url>/2025/05/20/AJAX/Axios/Axios/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是AJAX"><a href="#什么是AJAX" class="headerlink" title="什么是AJAX"></a>什么是AJAX</h2><p>AJAX意为：Asynchronous JavaScript And XML，异步的JavaScript和XML。其中XML为<code>可扩展标记语言</code>，本质是一种数据格式，可用来存储复杂的数据结构。</p><p>作用：</p><ul><li>数据交互：通过AJAX可以给服务器发送请求，并获取服务器响应的数据。</li><li>异步交互：可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页。如：百度的搜索联想，用户名与密码是否可用的校验等等。</li></ul><h2 id="Axios是什么？"><a href="#Axios是什么？" class="headerlink" title="Axios是什么？"></a>Axios是什么？</h2><p>Axios对原生AJAX进行了封装，简化书写，快速开发。<br>Axios中文官网：<a href="https://www.axios-http.cn">https://www.axios-http.cn</a></p><p>安装：</p><ul><li>使用npm<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i axios<br></code></pre></td></tr></table></figure></li><li>使用HTML的script标签引入<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 或者 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="Axios发送GET请求"><a href="#Axios发送GET请求" class="headerlink" title="Axios发送GET请求"></a>Axios发送GET请求</h2><p>参数：</p><ol><li>method：请求方法，大写</li><li>url：请求url</li><li>data：请求数据(POST请求)</li><li>params：发送请求时携带的url参数，如：<code>https://127.0.0.1:3000?name=zs&amp;age=18</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 发送GET请求</span><br><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-comment">// 请求方法</span><br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://127.0.0.1:3000&#x27;</span> <span class="hljs-comment">// 请求url</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 请求成功，返回数据</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r.<span class="hljs-property">data</span>)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 请求失败，返回错误信息</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">lgo</span>(err)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="Axios发送POST请求"><a href="#Axios发送POST请求" class="headerlink" title="Axios发送POST请求"></a>Axios发送POST请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 发送POST请求</span><br><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-comment">// 请求方法</span><br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://127.0.0.1:3000&#x27;</span>,<br>    <span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;id = 1&#x27;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">lgo</span>(r.<span class="hljs-property">data</span>)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="Axios发送请求简写形式"><a href="#Axios发送请求简写形式" class="headerlink" title="Axios发送请求简写形式"></a>Axios发送请求简写形式</h2><p>Axios以为所有提供的请求方式提供了简写形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 发送GET请求</span><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://127.0.0.1:3000&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r.<span class="hljs-property">data</span>)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="将Axios变为同步操作"><a href="#将Axios变为同步操作" class="headerlink" title="将Axios变为同步操作"></a>将Axios变为同步操作</h2><p>在开发大型项目时，有时我们希望是先执行上面的代码，然后执行下面的代码，一行一行执行。但有时，Axios内的逻辑太多，会先执行下面的代码，然后在执行Axios内的代码，会让项目变得难以维护，并且可读性很差。如果想让Axios变为同步操作，可以使用<code>async</code>与<code>await</code>关键字。async与await可以让异步操作变为同步操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// async声明异步方法</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">search</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// await等待异步任务执行</span><br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://127.0.0.1:3000/search&#x27;</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = result.<span class="hljs-property">data</span><br>&#125;<br></code></pre></td></tr></table></figure><p>await关键字只允许出现在async声明的函数内部使用。await关键字取代then函数，等待获取到请求成功的结果值。</p>]]></content>
      
      
      <categories>
          
          <category> Axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Axios </tag>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iHRM人力资源后台管理-登录模块</title>
      <link href="/2025/05/19/iHRM%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/2.%E7%99%BB%E5%BD%95%E6%A8%A1%E5%9D%97/"/>
      <url>/2025/05/19/iHRM%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/2.%E7%99%BB%E5%BD%95%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="登录页结构与表单结构"><a href="#登录页结构与表单结构" class="headerlink" title="登录页结构与表单结构"></a>登录页结构与表单结构</h2><h3 id="登录页结构"><a href="#登录页结构" class="headerlink" title="登录页结构"></a>登录页结构</h3><p>复制以下代码，替换掉<code>src/views/login/index.vue</code>文件中的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logo&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-card</span> <span class="hljs-attr">shadow</span>=<span class="hljs-string">&quot;never&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-card&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--登录表单--&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-card</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Login&quot;</span>,</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.login-container</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">  <span class="hljs-attribute">align-items</span>: stretch;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="language-css">  <span class="hljs-selector-class">.logo</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">flex</span>: <span class="hljs-number">3</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">38</span>, <span class="hljs-number">72</span>, <span class="hljs-number">176</span>) <span class="hljs-built_in">url</span>(<span class="hljs-string">../../assets/common/login_back.png</span>) no-repeat</span><br><span class="language-css">      center / cover;</span><br><span class="language-css">    <span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">    <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">    <span class="hljs-attribute">align-items</span>: flex-end;</span><br><span class="language-css">    <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">100px</span>;</span><br><span class="language-css">    <span class="hljs-selector-class">.icon</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../../assets/common/logo.png</span>) no-repeat <span class="hljs-number">70px</span> center /</span><br><span class="language-css">        contain;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.form</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">flex</span>: <span class="hljs-number">2</span>;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">    <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">    <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">176px</span>;</span><br><span class="language-css">    <span class="hljs-selector-class">.el-card</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.el-input</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">350px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">44px</span>;</span><br><span class="language-css">      <span class="hljs-selector-class">.el-input__inner</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>: <span class="hljs-number">#f4f5fb</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.el-checkbox</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#606266</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="表单结构"><a href="#表单结构" class="headerlink" title="表单结构"></a>表单结构</h3><p>登录页表单结构可以借助<code>element-ui</code>组件库内的组件来填充<br>复制以下代码，放在<code>src/views/login/index.vue</code>文件内的 el-card 元素标签内</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入手机号&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-checkbox</span>&gt;</span> 用户平台使用协议 <span class="hljs-tag">&lt;/<span class="hljs-name">el-checkbox</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:350px;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="登录表单校验"><a href="#登录表单校验" class="headerlink" title="登录表单校验"></a>登录表单校验</h3><p>首先，需要给<code>el-form</code>标签绑定三个属性</p><ul><li>ref：值设置为 form</li><li>:model：双向数据绑定，值设置为 loginForm</li><li>:rules：rules 属性是 element-ui 内的属性，专门用来完成表单验证，值设置为 loginRules 作为规则</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;loginForm&quot;</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;loginRules&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 data 内声明对应的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-comment">// 数据</span><br>        <span class="hljs-attr">loginForm</span>: &#123;<br>            <span class="hljs-attr">mobile</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">isAgree</span>: <span class="hljs-literal">false</span><br>        &#125;,<br>        <span class="hljs-comment">// 规则</span><br>        <span class="hljs-attr">loginRules</span>: &#123;<br>            <span class="hljs-attr">mobile</span>: [],<br>            <span class="hljs-attr">password</span>: [],<br>            <span class="hljs-attr">isAgree</span>: []<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>给手机号输入框，密码输入框以及勾选按钮外层的 el-form-item 表单设置 prop 属性，分别设置为mobile，password以及isAgree(给三个个表单分别绑定loginRules内的规则)，然后给三个表单组件分别双向绑定上数据内的 loginForm.modile， loginForm.password，loginForm.isAgree这时用户就可以输入数据了，但是我们还没有编写校验规则，用户想输入什么数据都可以。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;mobile&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;loginForm.mobile&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入手机号&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;loginForm.password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;isAgree&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">el-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;loginForm.isAgree&quot;</span>&gt;</span><br>    用户平台使用协议<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">el-checkbox</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="编写校验规则"><a href="#编写校验规则" class="headerlink" title="编写校验规则"></a>编写校验规则</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">loginRules</span>: &#123;<br>  <span class="hljs-attr">mobile</span>: [&#123;<br>    <span class="hljs-comment">// 第一条规则</span><br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 必须填写</span><br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入手机号&#x27;</span>, <span class="hljs-comment">// 违反规则提示信息</span><br>    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> <span class="hljs-comment">// 一直提示</span><br>  &#125;, &#123;<br>    <span class="hljs-comment">// 第二条规则</span><br>    <span class="hljs-attr">pattern</span>: <span class="hljs-regexp">/^1[3-9]\d&#123;9&#125;$/</span>, <span class="hljs-comment">// 正则表达式</span><br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;手机号格式不正确&#x27;</span>,<br>    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span><br>  &#125;],<br>  <span class="hljs-attr">password</span>: [&#123;<br>    <span class="hljs-comment">// 第一条规则</span><br>    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 必须填写</span><br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入密码&#x27;</span>, <span class="hljs-comment">// 违反规则提示信息</span><br>    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> <span class="hljs-comment">// 一直提示</span><br>  &#125;, &#123;<br>    <span class="hljs-attr">min</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-attr">max</span>: <span class="hljs-number">16</span>,<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;密码长度应该为6~16之间&#x27;</span>,<br>    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span><br>  &#125;],<br>  <span class="hljs-attr">isAgree</span>: [&#123;<br>    <span class="hljs-comment">// 因为required 只能用于校验 null undefind &quot; &quot;,无法校验flase值</span><br>    <span class="hljs-comment">// 因此这里需要我们自己写自定义校验规则</span><br>    <span class="hljs-attr">validator</span>: <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">/**</span><br><span class="hljs-comment">       * rule 为校验规则</span><br><span class="hljs-comment">       * value 为要校验的值</span><br><span class="hljs-comment">       * callback 为函数，代表执行成功或者失败，失败的话callback里面会有一个err表示执行失败信息</span><br><span class="hljs-comment">       */</span><br>      value ? <span class="hljs-title function_">callback</span>() : <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;必须勾选用户协议&#x27;</span>))<br>    &#125;<br>  &#125;]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="密码输入框显示密文"><a href="#密码输入框显示密文" class="headerlink" title="密码输入框显示密文"></a>密码输入框显示密文</h4><p>给密码输入框添加<code>show-password</code>属性，确保密码在输入时显示密文</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;loginForm.password&quot;</span> <span class="hljs-attr">show-password</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java进阶】 网络编程</title>
      <link href="/2025/05/18/Java/%E3%80%90Java%E8%BF%9B%E9%98%B6%E3%80%91%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2025/05/18/Java/%E3%80%90Java%E8%BF%9B%E9%98%B6%E3%80%91%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是网络编程？"><a href="#什么是网络编程？" class="headerlink" title="什么是网络编程？"></a>什么是网络编程？</h2><p>在网络通信协议下，不同计算机上运行的程序，进行数据的传输。应用场景主要有：即时通信，邮件，网游…。不管什么场景都是计算机与计算机之间通过网络传递数据。Java中可以使用<code>java.net</code>包开发常见网络应用程序</p><hr><p>常见的软件架构：</p><ul><li>C/S(Client客户端/Server服务器)：在用户本地需下载并安装客户端程序，在远程还有一个服务器端(QQ，微信)。</li><li>B/S(Browser浏览器/Server服务器)：只需一个网址，用户通过不同网址，访问不同服务器(淘宝，京东)。</li></ul><div class="table-container"><table><thead><tr><th>架构</th><th>优</th><th>缺</th></tr></thead><tbody><tr><td>B/S架构</td><td>不需要开发客户端程序，只需前端页面和服务器，非常便捷</td><td>所有资源都需要通过网络传播，网络差时或者资源太多时，用户体验非常差</td></tr><tr><td>C/S架构</td><td>资源可以下载到本地，画面可以做的非常精美，用户体验会很好</td><td>需要开发客户端与服务端，服务器更新用户需要同步更新</td></tr></tbody></table></div><h2 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h2><ol><li>接收数据的电脑在互联网中的地址，这个地址是唯一的，也称之为<code>IP</code><ul><li>IP：设备在网络中的地址，也是唯一标识</li></ul></li><li>接收数据的电脑用于接收数据的软件，也就是<code>端口号</code>，一个端口号只能被一个软件绑定使用<ul><li>端口号：应用程序在设备中唯一的表示</li></ul></li><li>网络传输时的规则，也就是<code>协议</code><ul><li>协议：网络传输规则</li></ul></li></ol><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p>Internet Protocol，是互联网协议地址，也称为IP地址，是分配给上网设备的数字标签</p><p>IPv4：互联网通信协议第四版，采用32位地址长度，分为4组，采用<code>点分十进制表示法</code>，为了解决IPv4不够用的问题，所以有了IPv6<br>IPv6：互联网通信协议第六版，采用128位地址长度，分为8组，采用<code>冒分16进制表示法</code></p><hr><p>IPv4的地址分类形式分为公网IP和私网IP，其中<code>192.168.</code>开头的为私有IP(局域网IP)，专门为组织机构内部使用<br>特殊IP地址：<code>127.0.0.1</code>也可以是<code>localhose:</code>为本机IP，永远只会寻找当前所在本机</p><p>常用CMD命令：</p><ul><li>ipconfig：查看本机IP地址</li><li>ping：检查网络是否连通(ping www.baidu.com)，后面可以跟上IP或者网址</li></ul><h3 id="InetAddress类的使用"><a href="#InetAddress类的使用" class="headerlink" title="InetAddress类的使用"></a>InetAddress类的使用</h3><p>InetAddress类表示互联网协议IP地址</p><div class="table-container"><table><thead><tr><th>方法</th><th>使用</th></tr></thead><tbody><tr><td>static InetAddress getByName(String host)</td><td>确定主机名称的IP地址，可以是设备名称，也可以是IP地址</td></tr><tr><td>String getHostName()</td><td>获取IP地址主机名</td></tr><tr><td>String getHostAddress()</td><td>返回文本显示中的IP地址字符串</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.InetAddress;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 获取InetAddress对象，该对象表示的就是IP对象，也可以看做是一台电脑</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;192.168.0.102&quot;</span>);<br><br>        <span class="hljs-comment">// 获取IP对象对应设备主机名</span><br>        System.out.println(address.getHostName());<br>        <span class="hljs-comment">// 获取IP对象对应设备IP地址</span><br>        System.out.println(address.getHostAddress());<br><br>        <span class="hljs-comment">// 获取对应电脑以后就可以给对应电脑发送信息</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>应用程序在设备中的唯一标识，其中0~1023之间的端口号用于一些知名的网络服务或对象，一般自己使用1024以上的端口号就可以。一个端口号只能被一个应用程序使用。端口相当于网络传递数据时的出口或者入口，应用程序在启动时，一定要与一个端口号绑定，如果不绑定，该应用程序就相当于单机版，无法与外界联系。</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>在计算机中通信中，连接与通信的规则就被称为网络协议。</p><ul><li>TCP协议：也被称为传输控制协议，是<span style="color:red;">面向连接</span>(发送前会检查接收方的网络)通信协议。速度慢，没有大小限制，数据安全</li></ul><h4 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h4><p>UDP协议：也被称为用户数据报协议，是<span style="color:red;">面向无连接</span>(不会检查接收方的网络，直接发，能收到就能收到，收不到也不管)通信协议。速度非常快，但大小有限制(每次64K)，数据不安全，易丢失数据</p><ol><li><p>发送数据</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 创建对象(快递公司)</span><br><span class="hljs-comment">// 绑定端口使用,空参使用随机端口,有参指定端口号绑定</span><br><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br><br><span class="hljs-comment">// 2. 打包数据</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HelloWorld!!!&quot;</span>;<br><span class="hljs-type">byte</span>[] by = str.getBytes();<br><br><span class="hljs-comment">// 发送地址</span><br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br><br><span class="hljs-comment">// 端口</span><br><span class="hljs-type">int</span> <span class="hljs-variable">post</span> <span class="hljs-operator">=</span> <span class="hljs-number">10086</span>;<br><br><span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(by,by.length,address,post);<br><br><span class="hljs-comment">// 3. 发送数据</span><br>ds.send(dp);<br><br><span class="hljs-comment">// 4. 释放资源</span><br>ds.close();<br></code></pre></td></tr></table></figure></li><li><p>接收数据</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 创建对象</span><br><span class="hljs-comment">// 在创建的时候一定要绑定端口,并且端口需要与发送时一致</span><br><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">10086</span>);<br><br><span class="hljs-comment">// 2. 接收数据</span><br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><br><span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length);<br><br>ds.receive(dp);<br><br><span class="hljs-comment">// 3. 解析数据包</span><br><span class="hljs-type">byte</span>[] data = dp.getData();<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> dp.getLength();<br><br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> dp.getAddress();<br><span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> dp.getPort();<br><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data,<span class="hljs-number">0</span>,len));<br>System.out.println(address);<br>System.out.println(port);<br></code></pre></td></tr></table></figure></li></ol><p>先运行接收端，在运行发送端，此时是可以接受到数据的</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iHRM人力资源后台管理-基础架构解析</title>
      <link href="/2025/05/15/iHRM%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/1.%E9%A1%B9%E7%9B%AE%E4%BB%A5%E5%8F%8A%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/"/>
      <url>/2025/05/15/iHRM%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/1.%E9%A1%B9%E7%9B%AE%E4%BB%A5%E5%8F%8A%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>该项目是<a href="https://www.itheima.com/">黑马程序员</a>为学习<code>Vue</code>的初学者特地准备的<code>Vue人力资源后台管理系统项目</code>，觉得不错的可以去B站搜索<code>黑马程序员</code>，关注收藏一下。本人也非常喜欢黑马的课程，非常适合新手，不要在乎别人的流言蜚语，感兴趣的小伙伴可以一起学习，变得更强。加油！！！</p></blockquote><p><img src="https://pic1.imgdb.cn/item/682585db58cb8da5c8f28805.png" alt="项目介绍"></p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="项目架构："><a href="#项目架构：" class="headerlink" title="项目架构："></a>项目架构：</h3><ol><li>Vue2</li><li>VueRouter</li><li>Vuex</li><li>Vue-cli</li><li>Element</li><li>Axios</li><li>sass</li><li>js-cookie</li></ol><h3 id="开发工具："><a href="#开发工具：" class="headerlink" title="开发工具："></a>开发工具：</h3><ol><li>VSCode</li><li>Vetur</li><li>ESLint</li><li>Git</li><li>Sass</li><li>Nginx</li></ol><h3 id="项目流程安排："><a href="#项目流程安排：" class="headerlink" title="项目流程安排："></a>项目流程安排：</h3><ol><li><a href="">基础架构拆解</a></li><li><a href="">登录模块</a></li><li><a href="">主页模块</a></li><li><a href="">组织架构</a></li><li><a href="">角色管理</a></li><li><a href="">员工管理</a></li><li><a href="">员工详情</a></li><li><a href="">云储存</a></li><li><a href="">权限应用</a></li><li><a href="">上线部署</a></li></ol><h2 id="拉取基础模板"><a href="#拉取基础模板" class="headerlink" title="拉取基础模板"></a>拉取基础模板</h2><h3 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h3><ol><li><p>创建一个空目录</p></li><li><p>打开终端，输入以下<code>git命令</code>克隆仓库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/PanJiaChen/vue-admin-template.git heimahr<br></code></pre></td></tr></table></figure><p> <code>heimahr</code>代表克隆出来的仓库被放在heimahr目录内，如果不写克隆出来的仓库将被默认放在vue-admin-template目录内。完成之后出现heimahr目录，克隆成功</p></li><li><p>用VSCode打开克隆出来的heimahr项目</p></li></ol><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><ol><li><p>进入<code>package.json</code>文件，找到<code>&quot;core-js&quot;</code>配置，此时的版本号已经有点滞后了，将后面的版本号改为<code>3.25.5</code></p></li><li><p>输入<code>npm install</code>安装依赖</p></li></ol><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> dev<br></code></pre></td></tr></table></figure><h3 id="安装VSCode插件"><a href="#安装VSCode插件" class="headerlink" title="安装VSCode插件"></a>安装VSCode插件</h3><ol><li>Vetur</li><li>ESLint</li></ol><p>这俩插件可以提高开发效率和检查错误，不过不安装也无伤大雅</p><h2 id="项目目录以及入口文件介绍"><a href="#项目目录以及入口文件介绍" class="headerlink" title="项目目录以及入口文件介绍"></a>项目目录以及入口文件介绍</h2><h3 id="src源目录"><a href="#src源目录" class="headerlink" title="src源目录"></a>src源目录</h3><h4 id="api目录"><a href="#api目录" class="headerlink" title="api目录"></a>api目录</h4><p>api目录主要用来存放一下与<code>请求</code>相关的代码，比如登录请求。这样一来别的组件需要发送/接收请求直接引入使用相应方法就可以</p><h4 id="assets目录"><a href="#assets目录" class="headerlink" title="assets目录"></a>assets目录</h4><p>assets目录为静态资源目录，该目录主要用来存放一些图片资源，字体资源之类的资源文件</p><h4 id="components目录"><a href="#components目录" class="headerlink" title="components目录"></a>components目录</h4><p>components目录为组件目录，一般多数组件都能用到的公共组件会被放在此目录下</p><h4 id="icons目录"><a href="#icons目录" class="headerlink" title="icons目录"></a>icons目录</h4><p>icons目录就是一个小图标目录，里面都是用来存放小图标的，因为里面都是使用SVG所以没有放在assets目录下，并且里面还有关于自动引入小图标的代码</p><h4 id="layout目录"><a href="#layout目录" class="headerlink" title="layout目录"></a>layout目录</h4><p>layout目录为布局目录，与布局相关组件会放在layout目录下</p><h4 id="router目录"><a href="#router目录" class="headerlink" title="router目录"></a>router目录</h4><p>router目录是存放项目路由的目录，与路由相关的配置文件会被放在此目录下</p><h4 id="store目录"><a href="#store目录" class="headerlink" title="store目录"></a>store目录</h4><p>store目录是Vuex配置文件的存放位置，也就是状态管理工具管理的数据会放在里面</p><h4 id="styles目录"><a href="#styles目录" class="headerlink" title="styles目录"></a>styles目录</h4><p>styles目录就是样式目录，里面都是一些公共样式</p><h4 id="utils目录"><a href="#utils目录" class="headerlink" title="utils目录"></a>utils目录</h4><p>utils目录为工具目录，里面都是一些工具文件，这些工具文件完成某些特定功能，别的地方需要使用这些功能，直接引入使用即可</p><h4 id="views目录"><a href="#views目录" class="headerlink" title="views目录"></a>views目录</h4><p>views目录也是一个组件目录，只不过里面存放的都是路由器组件，也就是路由需要使用到的组件</p><h4 id="main-js文件"><a href="#main-js文件" class="headerlink" title="main.js文件"></a>main.js文件</h4><p>main.js文件为项目的入口文件，该文件引入了一些其他文件，并且实例化了<code>Vue</code>，挂载了router，Vuex状态管理工具以及渲染app.vue根组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入一些外部文件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;normalize.css/normalize.css&#x27;</span> <span class="hljs-comment">// A modern alternative to CSS resets</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><br><span class="hljs-keyword">import</span> locale <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui/lib/locale/lang/en&#x27;</span> <span class="hljs-comment">// lang i18n</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@/styles/index.scss&#x27;</span> <span class="hljs-comment">// global css</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@/icons&#x27;</span> <span class="hljs-comment">// icon</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@/permission&#x27;</span> <span class="hljs-comment">// permission control</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 判断如果当前处于production(生产环境)进行一下操作</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; mockXHR &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../mock&#x27;</span>)<br>  <span class="hljs-title function_">mockXHR</span>()<br>&#125;<br><br><span class="hljs-comment">// 注册ElementUI组件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>, &#123; locale &#125;)<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">// 实例化</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  router,<br>  store,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="app-vue文件"><a href="#app-vue文件" class="headerlink" title="app.vue文件"></a>app.vue文件</h4><p>app.vue为项目的根组件</p><h4 id="settings-js文件"><a href="#settings-js文件" class="headerlink" title="settings.js文件"></a>settings.js文件</h4><p>settings.js为基础设置文件，包括网站标题，固定header，是否显示logo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><br>  <span class="hljs-comment">// 网站标题</span><br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;人力资源后台管理系统&#x27;</span>,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">boolean</span>&#125; true | false</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description</span> Whether fix the header</span><br><span class="hljs-comment">   * 头部菜单栏是否固定</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">fixedHeader</span>: <span class="hljs-literal">false</span>,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">boolean</span>&#125; true | false</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@description</span> Whether show the logo in sidebar</span><br><span class="hljs-comment">   * 侧边栏是否显示logo</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">sidebarLogo</span>: <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="permission-js文件"><a href="#permission-js文件" class="headerlink" title="permission.js文件"></a>permission.js文件</h4><p>permission.js为路由守卫文件，里面有一个<code>路由前置守卫</code>(路由跳转之前执行)与一个<code>路由后置守卫</code>(路由跳转之后执行)</p><h2 id="Vuex结构介绍"><a href="#Vuex结构介绍" class="headerlink" title="Vuex结构介绍"></a>Vuex结构介绍</h2><p>模板中Vuex(状态管理工具)的设计思想：</p><ol><li>页面交互状态使用全局状态Vuex</li><li>根据功能拆分为不同模块(modules)进行状态管理</li><li>通过getters建立对于模板中属性的快捷访问</li></ol><p><img src="https://pic1.imgdb.cn/item/6825b87558cb8da5c8f3959a.png" alt="Vuex结构介绍"></p><h2 id="使用模板中的icon图标"><a href="#使用模板中的icon图标" class="headerlink" title="使用模板中的icon图标"></a>使用模板中的icon图标</h2><p>打开<code>icons/svg目录</code>可以看到有很多svg图标，这些图标都是可以使用的，但是还需要借助一个组件<code>components/SvgIcon</code>。现在组件已经是注册好的，可以直接使用拥有的svg图标</p><blockquote><p>首先，先找到<code>views/dashboard组件</code>。往<span style="color:blue">dashboard-container</span>元素内添加<code>&lt;svg-icon /&gt;</code>标签并且设置<code>icon-class</code>属性，属性值就是svg目录内要使用的svg图标文件的文件名，不需要带文件后缀</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dashboard-container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dashboard-text&quot;</span>&gt;</span>name: &#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 使用svg图标(不需要后缀) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">icon-class</span>=<span class="hljs-string">&quot;dashboard&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启动项目，可以看见svg图标可以正常显示在页面上</p><h3 id="添加自己的svg图标"><a href="#添加自己的svg图标" class="headerlink" title="添加自己的svg图标"></a>添加自己的svg图标</h3><ol><li>将自己的svg文件放入svg目录下</li><li>icon-class属性值，设置为自己的svg图标文件的文件名</li></ol><h2 id="模板中icon图标实现思路"><a href="#模板中icon图标实现思路" class="headerlink" title="模板中icon图标实现思路"></a>模板中icon图标实现思路</h2><ol><li><p>首先看main.js入口文件</p><p>可以看见main.js内引入了icons目录内的index.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 会自动查找icons目录内的index文件引入</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@/icons&#x27;</span> <span class="hljs-comment">// icon</span><br></code></pre></td></tr></table></figure></li><li><p>进入icons/index.js文件</p><p>在index.js文件内，首先：</p><ol><li>将<code>svg-icon</code>注册为全局组件，在任何组件内都可以直接使用</li><li>扫描svg目录下所有以.svg结尾的文件<br>require.context(‘目标目录’,是否扫描子目录,正则表达式[这里代表以.svg结尾的文件])，它的返回值是一个函数</li><li>获取所有文件路径，进行处理<br><code>requireAll</code>为箭头函数，通过<code>req.keys()</code>方法可以获取所有的svg文件路径。接着调用<code>.map()</code>方法循环，并且传递<code>req</code>。目的就是将所有的svg图标引入到项目中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 注册全局组件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;svg-icon&#x27;</span>, <span class="hljs-title class_">SvgIcon</span>)<br><br><span class="hljs-comment">// 扫描svg目录下所有以.svg结尾的文件</span><br><span class="hljs-keyword">const</span> req = <span class="hljs-built_in">require</span>.<span class="hljs-title function_">context</span>(<span class="hljs-string">&#x27;./svg&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-regexp">/\.svg$/</span>)<br><br><span class="hljs-comment">// 获取所有的文件路径，并且进行处理</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">requireAll</span> = requireContext =&gt; requireContext.<span class="hljs-title function_">keys</span>().<span class="hljs-title function_">map</span>(requireContext)<br><span class="hljs-title function_">requireAll</span>(req)<br><br><span class="hljs-comment">// webpack loader</span><br></code></pre></td></tr></table></figure><p>将svg图标引入到项目后，接着还需要借助<code>webpack loader</code>插件，把svg图标打包为html标签形式，才可以使用</p></li><li><p>进入<code>vue.config.js</code>文件</p><p>在文件内，找到<code>set svg-sprite-loader</code>配置，代表设置svg精灵图，这里就是进一步的配置了svg</p></li></ol><h2 id="导入样式和资源"><a href="#导入样式和资源" class="headerlink" title="导入样式和资源"></a>导入样式和资源</h2><ol><li><p>素材：<a href="https://pan.baidu.com/s/1OqhZQsx-S-TF9vmpkBznzQ?pwd=9999">https://pan.baidu.com/s/1OqhZQsx-S-TF9vmpkBznzQ?pwd=9999</a><br>提取码：9999</p></li><li><p>下载里面替换的资源文件，里面有styles,assets以及icons文件夹</p></li><li>将这三个文件夹拖入项目的src目录下，点击替换掉项目里面的文件夹</li></ol><h2 id="使用git管理项目"><a href="#使用git管理项目" class="headerlink" title="使用git管理项目"></a>使用git管理项目</h2><p>在管理项目之前，可以先使用<code>git log</code>命令查看当前的项目日志</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Author:</span> <span class="hljs-string">花裤衩</span> <span class="hljs-string">&lt;panfree23@gmail.com&gt;</span><br><span class="hljs-attr">Date:</span>   <span class="hljs-string">Sun</span> <span class="hljs-string">Jul</span> <span class="hljs-number">26</span> <span class="hljs-number">10</span><span class="hljs-string">:07:01</span> <span class="hljs-number">2020</span> <span class="hljs-string">+0800</span><br><span class="hljs-string">:</span><br></code></pre></td></tr></table></figure><p>可以看到，作者是叫花裤衩。这样肯定不行，我们的项目要使用git提交到仓库的话不能提交到人家的仓库，而且我们也没有权限。<br>先找到项目中的<code>.git</code>文件夹，将其删除(这个目录一般是隐藏状态，找不到的话需要打开文件夹显示影藏项目的设置试试)，删除以后项目就没有git记录了，需要重新初始化一个仓库。</p><ol><li><p>初始化仓库</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure></li><li><p>将文件添加到暂存区</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> .<br></code></pre></td></tr></table></figure></li><li><p>提交修改</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;初始化项目&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>查看提交历史</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Author:</span> <span class="hljs-string">***</span> <span class="hljs-string">&lt;***@qq.com&gt;</span><br><span class="hljs-attr">Date:</span>   <span class="hljs-string">Mon</span> <span class="hljs-string">May</span> <span class="hljs-number">19</span> <span class="hljs-number">11</span><span class="hljs-string">:24:05</span> <span class="hljs-number">2025</span> <span class="hljs-string">+0800</span><br><br>    <span class="hljs-string">初始化仓库</span><br></code></pre></td></tr></table></figure><p>可以看到项目此时已经有了一个我们自己的提交记录了，但还需要创建一个远程仓库才行。我们可以使用<a href="https://gitee.com">gitee</a>新建一个远程仓库，只需要填入远程仓库名称即可</p><p><img src="https://pic1.imgdb.cn/item/682aa7a358cb8da5c8fbbbe9.png" alt=""></p><p>新建好仓库以后会生成一个地址，复制地址。回到项目，在终端使用<code>git remote add origin</code>命令，后面加上生成的地址，相当于给本地仓库起了个别名<code>origin</code>。然后使用<code>git push -u origin &quot;master&quot;</code>命令，代表将本地仓库推送到远程。回到gitee，查看仓库，就可以看到我们提交的代码已经在仓库里面了</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> remote <span class="hljs-keyword">add</span> origin https:<span class="hljs-comment">//gitee.com/hu_junxi/i-hrm-human-resources.git</span><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> -u origin <span class="hljs-string">&quot;master&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java进阶】 多线程</title>
      <link href="/2025/05/14/Java/%E3%80%90Java%E8%BF%9B%E9%98%B6%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2025/05/14/Java/%E3%80%90Java%E8%BF%9B%E9%98%B6%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是多线程？"><a href="#什么是多线程？" class="headerlink" title="什么是多线程？"></a>什么是多线程？</h2><ol><li>进程：每个进程之间拥有自己的一整套变量，一个进程可以包含多个线程，进程之间互不影响，如：QQ是一个进程，微信是一个进程，相互之间互不影响</li><li>线程：线程属于进程，多个线程会有共享数据的情况，也就是多个线程会共享同一块内存区域</li><li>并发：多线程就是并发的例子，一块CPU调度时会分为多个时间片，每个时间片内调度一个线程，这样就可以提高CPU的利用率。因为对于类似IO这种操作，CPU调度了，IO便干活，但CPU却闲下来了，为了提高CPU利用率，可以让他去干别的活。只不过由于时间片特别短，所以看上去每个线程像是同时工作一样。在同一时刻，有多个指令在单个CPU上<code>交替</code>执行</li><li>并行：类似于使用多块CPU一起工作，它不会分时间片调度，而是真正的同时工作，在同一时刻，有多个指令在多个CPU上<code>同时</code>执行(2核4线程CPU)</li></ol><blockquote><p>对于类似IO这种慢操作，可以开多个线程出来，尽量不要让CPU空闲下来，提高系统的资源利用率。但也不是说线程开的越多，资源利用率就越好的，执行IO相关的慢操作，线程可以适当多一些，因为很多时候CPU是空闲的，但如果是计算型操作，CPU不空闲的情况下，依然开很多线程，不仅不会提高资源利用率，反而会达到反效果，因为线程切换也是需要耗费资源的。</p></blockquote><h3 id="进程和线程的区别："><a href="#进程和线程的区别：" class="headerlink" title="进程和线程的区别："></a>进程和线程的区别：</h3><ol><li>资源管理：每个进程有独立的资源，线程共享所属进程的资源</li><li>通信方式：进程间通信需要通过<code>IPC机制</code>，线程间通信直接访问共享内存即可</li><li>开销：进程创建和切换开销大，线程创建和切换开销较小</li><li>并发能力：线程支持更好的并发执行</li><li>安全性：进程提供更好的隔离和安全性</li><li>定义：进程是系统分配资源的最小单位，线程是系统调度的最小单位</li></ol><h2 id="多线程的实现方式："><a href="#多线程的实现方式：" class="headerlink" title="多线程的实现方式："></a>多线程的实现方式：</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><ol><li>定义一个类，继承Thread类</li><li>重写run方法</li><li>创建子类对象，并启动线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 创建一个类并且继承Thread</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-comment">// 2. 重写run方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 3. 创建对象 (该对象就是一条线程) 并且开启线程(调用start方法)</span><br>        <span class="hljs-type">ThreadDemo</span> <span class="hljs-variable">td</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadDemo</span>();<br>        td.start();<br>        <br>        <span class="hljs-comment">// 输出100此&quot;hello&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试线程的并发机制"><a href="#测试线程的并发机制" class="headerlink" title="测试线程的并发机制"></a>测试线程的并发机制</h4><ol><li>沿用以上的代码接着开启一条线程td2</li><li>用线程对象调用<code>setName()</code>方法，给线程设置名字</li><li>在打印时，通过线程对象调用<code>getName()</code>方法获取当前执行的线程名字，就可以知道当前是哪一条线程在执行</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 创建一个类并且继承Thread</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-comment">// 2. 重写run方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;hello&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 3. 创建对象 (该对象就是一条线程) 并且开启线程(调用start方法)</span><br>        <span class="hljs-type">ThreadDemo</span> <span class="hljs-variable">td</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadDemo</span>();<br>        <span class="hljs-type">ThreadDemo</span> <span class="hljs-variable">td2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadDemo</span>();<br><br>        <span class="hljs-comment">// 给线程取名字</span><br>        td.setName(<span class="hljs-string">&quot;Thread-1&quot;</span>);<br>        td2.setName(<span class="hljs-string">&quot;Thread-2&quot;</span>);<br><br>        td.start();<br>        td2.start();<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * Thread-1hello与Thread-2hello交替输出</span><br><span class="hljs-comment">        */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><ol><li>创建一个类，实现Runnable接口</li><li>重写run方法</li><li>在入口函数中，创建实现Runnable接口的类对象</li><li>创建Thread线程对象，并且把<code>Runnable接口的类对象</code>作为参数传递进构造函数中</li><li>开启线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 实现Runnable接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunnableDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-comment">// 2. 重写run方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Run&quot;</span>);<br><br>        <span class="hljs-comment">// 这里不能使用this.getNmae获取线程对象,this指向RunnableDemo对象,而不是线程对象</span><br>        <span class="hljs-comment">// 需要调用Thread.currentThread()获取当前线程对象,哪条线程执行的这个方法,获取的就是哪个线程对象</span><br>        System.out.println(Thread.currentThread().getName());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 3. 创建RunnableDemo类对象,表示多线程要执行的任务</span><br>        <span class="hljs-type">RunnableDemo</span> <span class="hljs-variable">rd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RunnableDemo</span>();<br><br>        <span class="hljs-comment">// 4. 创建Thread线程对象,并且传递RunnableDemo类对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">td</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(rd);<br><br>        <span class="hljs-comment">// 设置名字</span><br>        td.setName(<span class="hljs-string">&quot;Thread-1&quot;</span>);<br><br>        <span class="hljs-comment">// 开启线程</span><br>        td.start();<br><br>        <span class="hljs-comment">// 输出run</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>通过实现Runnable接口的方法时，不能在run方法内使用<code>this</code>关键字来获取线程对象，而是需要使用<code>Thread.currentThread()</code>方法来获取线程对象，它代表哪条线程执行的这个方法,获取的就是哪个线程对象。</p><h3 id="通过Callable接口和Future接口方式实现"><a href="#通过Callable接口和Future接口方式实现" class="headerlink" title="通过Callable接口和Future接口方式实现"></a>通过Callable接口和Future接口方式实现</h3><p><strong>这种方式在书写方面会比之前麻烦，但是它可以获取<code>多线程运行的结果</code></strong></p><ol><li>创建一个CallableDemo类，实现Callable接口(Callable接口需要传递一个泛型,泛型类型就是多线程运行结果返回值类型)</li><li>重写抽象方法call()，call方法是有返回值的,返回值就是多线程运行结果(返回值类型与Callable接口传递的泛型类型保持一致)</li><li>创建CallableDemo类对象(表示多线程要执行的任务)</li><li>创建FutureTask(Future的实现类)对象(管理多线程运行的结果)</li><li>创建Thread对象(表示线程)，并且传入FutureTask对象作为参数，启动</li><li>通过FutureTask对象调用<code>get()</code>方法获取线程运行结果即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><br><span class="hljs-comment">// 1. 创建一个CallableDemo类，实现Callable接口</span><br><span class="hljs-comment">// Callable接口需要传递一个泛型,泛型类型就是多线程运行结果返回值类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CallableDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt; &#123;<br>    <span class="hljs-comment">// 2. 重写抽象方法call()，call方法是有返回值的,返回值就是多线程运行结果</span><br>    <span class="hljs-comment">// 返回值类型与Callable接口传递的泛型类型保持一致</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">997</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 3. 创建CallableDemo对象</span><br>        <span class="hljs-type">CallableDemo</span> <span class="hljs-variable">cd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CallableDemo</span>();<br><br>        <span class="hljs-comment">// 4. 创建FutuerTask对象</span><br>        <span class="hljs-type">FutureTask</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(cd);<br><br>        <span class="hljs-comment">// 5. 创建线程对象,并且启动</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">td</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ft);<br>        td.start();<br><br>        <span class="hljs-comment">// 获取运行结果 997</span><br>        System.out.println(ft.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三种实现方法对比"><a href="#三种实现方法对比" class="headerlink" title="三种实现方法对比"></a>三种实现方法对比</h3><div class="table-container"><table><thead><tr><th>实现方法</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>继承Thread</td><td>编程简单，可以直接使用Thread中的方法</td><td>可拓展性差，不能继续继承其他类</td></tr><tr><td>实现Runnable接口</td><td>拓展性强，还可以继承其他类</td><td>编程相对复杂，不能使用Thread中的方法</td></tr><tr><td>实现Callable接口</td><td>拓展性强，还可以继承其他类，<code>并且可以获取线程运行结果</code></td><td>编程相对复杂，不能使用Thread中的方法</td></tr></tbody></table></div><h2 id="Thread线程中常见的成员方法"><a href="#Thread线程中常见的成员方法" class="headerlink" title="Thread线程中常见的成员方法"></a>Thread线程中常见的成员方法</h2><div class="table-container"><table><thead><tr><th>成员方法</th><th>使用</th></tr></thead><tbody><tr><td>String getName()</td><td>获取线程名称</td></tr><tr><td>void setName(String name)</td><td>设置线程名称</td></tr><tr><td>static Thread currentThread()</td><td>获取当前执行的线程对象</td></tr><tr><td>static void sleep(long time)</td><td>使线程休眠指定时间，单位毫秒(1s=1000ms)</td></tr><tr><td>setPriority(int newPriority)</td><td>设置线程优先级</td></tr><tr><td>final int getPrinrity()</td><td>获取线程优先级</td></tr><tr><td>final void setDaemon(boolean on)</td><td>设置为守护线程</td></tr><tr><td>public static void yield()</td><td>出让线程/礼让线程</td></tr><tr><td>public static void join()</td><td>插入线程</td></tr></tbody></table></div><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><ol><li>抢占式调度：多个线程抢夺CPU的执行权，CPU执行的线程，执行线程的时间都是不确定的(随机性)</li><li>非抢占式调度：所有线程轮流执行</li></ol><p>Java中采用的就是<code>抢占式调度</code>。当前线程的优先级越大，那么该线程抢到CPU的调度概率也就越大(优先级最小为1，最大为10，默认为5)</p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>当其他的非守护线程执行完毕以后，那么守护线程也会陆陆续续<span style="color:red;">(守护线程不会立马结束)</span>的结束。</p><h2 id="礼让线程与插入线程"><a href="#礼让线程与插入线程" class="headerlink" title="礼让线程与插入线程"></a>礼让线程与插入线程</h2><ol><li>礼让线程表示出让当前CPU的执行权</li><li>插入线程表示将一个线程插入当前线程之前，当插入的线程执行完毕，才会执行插入线程</li></ol><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><ol><li>当创建线程时，线程为新建状态</li><li>使用start()启动线程之后，线程为就绪状态(有执行资格，但是没有执行权)，此时线程会不停的抢CPU的执行权</li><li>抢到CPU的执行权，线程为运行状态(有执行资格，有执行权)，运行代码<ol><li>如果此时CPU执行权被其他线程抢走，回到就绪状态</li><li>如果遇到sleep()方法，线程进入阻塞状态，当等待时间结束以后，进入就绪状态</li></ol></li><li>如果run方法执行完毕，线程结束</li></ol><h2 id="线程的安全问题"><a href="#线程的安全问题" class="headerlink" title="线程的安全问题"></a>线程的安全问题</h2><blockquote><p>线程的执行具有随机性。当多个线程同时操作同一个数据时(static)，有时上一个线程还有没有完全执行完毕，CPU的操作权就会被下一个线程抢走，从而停止执行，想要避免这一结果就需要使用锁</p></blockquote><h3 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h3><p>把操作共享数据的代码锁起来，这样只要上一个线程还没有执行完毕，下一个线程就无法进入代码执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 上锁,需要传入一个锁对象,锁对象可以是任何对象但一定需要是唯一的</span><br>        <span class="hljs-keyword">synchronized</span> (ThreadDemo.class) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;hello&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>锁默认打开，有一个线程进入，锁就会自动关闭</li><li>当里面的所有代码执行完毕，线程出来以后，锁自动打开</li><li><code>synchronized(锁对象)</code>内的锁对象一定需要是唯一的，一般会写为当前类的字节码文件(类名.class)</li></ol><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>把synchronized加在方法上，这个方法就是同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 <span class="hljs-keyword">synchronized</span> 返回值类型 方法名(参数..)&#123;...&#125;<br></code></pre></td></tr></table></figure><ol><li>同步方法会锁住方法内的所有代码</li><li>锁对象不能自己指定，是Java已经规定好的<ul><li>非静态：this</li><li>静态：当前类字节码文件对象</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        printLn();<br>    &#125;<br><br>    <span class="hljs-comment">// 同步方法,其实就是把同步代码块提取为一个方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printLn</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;hello&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="lock锁"><a href="#lock锁" class="headerlink" title="lock锁"></a>lock锁</h3><p>Lock可以手动上锁和开锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-comment">// 创建锁对象</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 上锁</span><br>        lock.lock();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;hello&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 开锁</span><br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="生产者与消费者-等待唤醒机制"><a href="#生产者与消费者-等待唤醒机制" class="headerlink" title="生产者与消费者(等待唤醒机制)"></a>生产者与消费者(等待唤醒机制)</h2><p>生产者与消费者模式是一个十分经典的多线程协作模式</p><div class="table-container"><table><thead><tr><th>方法</th><th>使用</th></tr></thead><tbody><tr><td>void wait()</td><td>当前线程等待，直到被其他线程唤醒</td></tr><tr><td>void notify()</td><td>随机唤醒单个线程</td></tr><tr><td>void notifyAll()</td><td>唤醒所有线程</td></tr></tbody></table></div><ol><li><p>生产者</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span>(Table.lock)&#123;<br>                <span class="hljs-keyword">if</span>(Table.count == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">if</span>(Table.foodFlog == <span class="hljs-number">1</span>)&#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-comment">// 如果有食物等待</span><br>                            Table.lock.wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">// 如果没有食物</span><br>                        System.out.println(<span class="hljs-string">&quot;厨师证在制作食物&quot;</span>);<br>                        Table.foodFlog = <span class="hljs-number">1</span>;<br>                        Table.lock.notifyAll();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Foodie</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (Table.lock) &#123;<br>                <span class="hljs-keyword">if</span> (Table.count == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (Table.foodFlog == <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-comment">// 没有食物,等待</span><br>                            <span class="hljs-comment">// 通过锁对象调用wait()方法,让当前线程与锁对象进行绑定</span><br>                            Table.lock.wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;正在吃面条,还能再吃&quot;</span> + (Table.count-<span class="hljs-number">1</span>) + <span class="hljs-string">&quot;碗&quot;</span>);<br>                        <span class="hljs-comment">// 唤醒锁绑定的所有线程</span><br>                        Table.lock.notifyAll();<br><br>                        <span class="hljs-comment">// 吃的总数--</span><br>                        Table.count--;<br>                        <span class="hljs-comment">// 修改桌子上面条的状态</span><br>                        Table.foodFlog = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>中间控制者</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Table</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-comment">// 是否有面条 0/没有 1/有</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">foodFlog</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 总个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">// 锁对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>入口函数</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建线程对象</span><br>        <span class="hljs-type">Cook</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cook</span>();<br>        <span class="hljs-type">Foodie</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foodie</span>();<br><br>        c.setName(<span class="hljs-string">&quot;厨师&quot;</span>);<br>        f.setName(<span class="hljs-string">&quot;吃货&quot;</span>);<br><br>        c.start();<br>        f.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><blockquote><p>阻塞队列就是连接生产者与消费者之间的管道。生产者生产出数据以后，将数据放在管道之中，而消费者从管道中获取数据去消费数据，我们可以规定管道中最多能放多上个数据，如果是一个数据，结果将与上方一样，生产者生产一个，消费者消费一个。</p></blockquote><ol><li><p>生产者</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-comment">// 阻塞队列对象</span><br>    ArrayBlockingQueue&lt;String&gt; queue;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cook</span><span class="hljs-params">(ArrayBlockingQueue&lt;String&gt; queue)</span> &#123;<br>        <span class="hljs-built_in">this</span>.queue = queue;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 不断把面条放在阻塞队列中</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// put方法底层已经有锁了</span><br>                queue.put(<span class="hljs-string">&quot;面条&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;厨师往阻塞队列中加入了一碗面条&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Foodie</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-comment">// 阻塞队列对象</span><br>    ArrayBlockingQueue&lt;String&gt; queue;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Foodie</span><span class="hljs-params">(ArrayBlockingQueue&lt;String&gt; queue)</span> &#123;<br>        <span class="hljs-built_in">this</span>.queue = queue;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 不断的从阻塞队列中获取面条</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// put方法底层已经有锁了</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">food</span> <span class="hljs-operator">=</span> queue.take();<br>                System.out.println(food);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>入口函数</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建阻塞队列对象</span><br>        ArrayBlockingQueue&lt;String&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 创建线程对象，并且传递线程</span><br>        <span class="hljs-type">Cook</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cook</span>(queue);<br>        <span class="hljs-type">Foodie</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foodie</span>(queue);<br><br>        c.start();<br>        f.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="线程的六大状态"><a href="#线程的六大状态" class="headerlink" title="线程的六大状态"></a>线程的六大状态</h2><ol><li>新建</li><li>就绪</li><li>阻塞：无法获取锁</li><li>等待：需要别人唤醒</li><li>计时等待：计时结束后，会自己醒来</li><li>死亡</li><li>运行：Java中是没有定义运行状态的，当线程抢夺到CPU执行权之后，线程会被交给操作系统，所以就没有定义运行状态</li></ol><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>之前写多线程时的弊端：用到线程时创建，用完之后线程消失，这种方式会浪费操作系统的资源。</p><p>解决方案：创建一个容器(线程池)，当给线程池提交一个任务以后，线程池会创建一个线程执行任务，执行完以后线程会存放在线程池中，当下次在给线程池提交任务时，就会在拿出线程执行任务，就不需要重新创建了。</p><p>创建线程池：Executors是线程池的工具类，通过调用方法返回不同类型的线程池对象</p><div class="table-container"><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public static ExecutorService newCachedThreadPool()</td><td>创建一个没有上限的线程池</td></tr><tr><td>public static ExecutorService newFixedThreadPool(int nThreads)</td><td>创建有上限的线程池</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 获取线程池对象</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool1</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();<br><br>        <span class="hljs-comment">// 2. 提交任务,传入一个线程任务,可以是Runnable/Call</span><br>        pool1.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RunnableDemo</span>());<br><br>        <span class="hljs-comment">// 3. 销毁线程池,一般来说不会销毁</span><br>        <span class="hljs-comment">// pool1.shutdown();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h3><p>ThreadPoolExecutor的七个参数：</p><ol><li>corePoolSize：核心线程数</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：空闲线程最大存活时间</li><li>unit：空闲线程最大存活时间单位</li><li>workQueue：任务队列</li><li>threadFactory：创建线程工厂，也就是线程池中线程的创建方式</li><li>handler：线程拒绝策略</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 自定义线程池</span><br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>            <span class="hljs-number">3</span>, <span class="hljs-comment">// 核心线程数 &gt; 0</span><br>            <span class="hljs-number">6</span>, <span class="hljs-comment">// 最大线程数 &gt;= 核心线程数</span><br>            <span class="hljs-number">60</span>, <span class="hljs-comment">// 空闲线程最大存活时间 60</span><br>            TimeUnit.SECONDS, <span class="hljs-comment">// 空闲线程最大存活时间单位 妙</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">3</span>), <span class="hljs-comment">// 任务队列</span><br>            Executors.defaultThreadFactory(), <span class="hljs-comment">// 创建线程工厂 </span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy() <span class="hljs-comment">// 任务拒绝策略</span><br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>当核心线程都在运行并且任务队列已经排满时，才会创建临时线程</li><li>线程的执行顺序不是先提交就先运行</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript箭头函数与this关键字</title>
      <link href="/2025/05/14/JavaScript/JavaScript%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8Ethis%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2025/05/14/JavaScript/JavaScript%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8Ethis%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><p>this是JS中的一个特殊关键字，它在函数执行时自动定义，指向当前执行的上下文对象。不同于其他语言，JS中的this不一定是指向函数所在的对象，这取决于函数的调用方式</p><h3 id="this的基本概念"><a href="#this的基本概念" class="headerlink" title="this的基本概念"></a>this的基本概念</h3><p>this是一个在运行时进行绑定的引用，它的值取决函数的执行环境：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">// Window</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">// Window</span><br>&#125;<br><br><span class="hljs-title function_">fun</span>()<br></code></pre></td></tr></table></figure><ol><li>在浏览器环境下，全局环境中this指向<code>Window</code>对象<ol><li>在非严格模式下，<code>函数内</code>的this指向Window对象</li><li>在<code>严格模式</code>下，函数内的this指向undefined</li></ol></li><li>在NodeJs环境下，全局环境中this指向<code>global</code>对象</li></ol><h3 id="this的作用"><a href="#this的作用" class="headerlink" title="this的作用"></a>this的作用</h3><p>this的作用是让方法可以使用其所属对象的其他属性与方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> person = &#123;<br>    name : <span class="hljs-string">&#x27;张三&#x27;</span>,<br>    <span class="hljs-attr">sayHello</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello,我是&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>    &#125;<br>&#125;<br><br>person.<span class="hljs-title function_">sayHello</span>()<br></code></pre></td></tr></table></figure><h3 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h3><p>this的值取决于函数的调用方式，而不是函数的定义方法</p><h4 id="全局上下文中"><a href="#全局上下文中" class="headerlink" title="全局上下文中"></a>全局上下文中</h4><p>全局执行上下文中(任何函数之外)，this指向全局对象</p><ol><li>浏览器中：this -&gt; window</li><li>NodeJs中：this -&gt; global</li></ol><h4 id="函数上下文中"><a href="#函数上下文中" class="headerlink" title="函数上下文中"></a>函数上下文中</h4><p>在函数内部，this指向的值取决于函数的调用方式(一般情况下，谁调用就指向谁)：</p><h5 id="普通函数中的this"><a href="#普通函数中的this" class="headerlink" title="普通函数中的this"></a>普通函数中的this</h5><p>普通函数(普通函数默认是Window调用)中，this指向全局对象(浏览器中是Window)，严格模式下是undefined：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">normalFun</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">strictFun</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 开启严格模式</span><br>    <span class="hljs-string">&#x27;use strict&#x27;</span> <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><br><span class="hljs-title function_">normalFun</span>() <span class="hljs-comment">// 输出 Window</span><br><span class="hljs-title function_">strictFun</span>() <span class="hljs-comment">// 输出 undefined</span><br></code></pre></td></tr></table></figure><h5 id="对象方法中的this"><a href="#对象方法中的this" class="headerlink" title="对象方法中的this"></a>对象方法中的this</h5><p>当函数作为对象的方法调用时，this指向调用该方法的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;javascript&#x27;</span>,<br>    <span class="hljs-attr">print</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>    &#125;<br>&#125;<br><br>obj.<span class="hljs-title function_">print</span>() <span class="hljs-comment">// 打印 javascript</span><br><br><span class="hljs-comment">// 方法引用 - this会丢失原始上下文</span><br><span class="hljs-keyword">const</span> printFun = obj.<span class="hljs-property">print</span>;<br><span class="hljs-title function_">printFun</span>() <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><h5 id="构造函数中的this"><a href="#构造函数中的this" class="headerlink" title="构造函数中的this"></a>构造函数中的this</h5><p>当使用new关键字调用函数时，this指向新创建的实例对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hello</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>)<br>person.<span class="hljs-title function_">hello</span>() <span class="hljs-comment">// 张三</span><br><br><span class="hljs-comment">// 如果忘记使用new , 没有返回值并且this指向window</span><br><span class="hljs-keyword">const</span> person2 = <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;李四&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Window</span>.<span class="hljs-property">name</span>) <span class="hljs-comment">// 李四</span><br></code></pre></td></tr></table></figure><h5 id="事件处理函数中的this"><a href="#事件处理函数中的this" class="headerlink" title="事件处理函数中的this"></a>事件处理函数中的this</h5><p>在DOM事件处理程序中，this一般指向触发事件的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myButton&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 输出: button元素</span><br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="内联事件处理中的this"><a href="#内联事件处理中的this" class="headerlink" title="内联事件处理中的this"></a>内联事件处理中的this</h5><p>在HTML属性中定义的事件处理程序，this指向所属的DOM元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;console.log(this)&quot;</span>&gt;</span>点击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h5><p>箭头函数中，不会创建自己的this，而是继承外部作用域的this值</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript异步处理Promise和Async</title>
      <link href="/2025/05/13/JavaScript/JavaScript%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86Promise%E5%92%8CAsync/"/>
      <url>/2025/05/13/JavaScript/JavaScript%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86Promise%E5%92%8CAsync/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript异步"><a href="#JavaScript异步" class="headerlink" title="JavaScript异步"></a>JavaScript异步</h2><blockquote><p>异步与同步是指在运行代码的过程中碰见了需要等待的代码，比如：计时器。此时同步运行会等待计时器执行完毕以后才会执行后面的代码，这会大大增加代码的执行时间。有时我们想要在程序遇见需要等待的代码时，先执行后面的代码，等待结束之后在回来执行相应的代码，这就是异步。</p></blockquote><h3 id="什么是异步？"><a href="#什么是异步？" class="headerlink" title="什么是异步？"></a>什么是异步？</h3><ol><li>同步：代码一行一行执行，之前的代码没有执行完，就不会执行后面的代码</li><li>异步：代码跳过等待部分，先执行后面的，在回来处理</li></ol><h3 id="常见异步条件"><a href="#常见异步条件" class="headerlink" title="常见异步条件"></a>常见异步条件</h3><ol><li>读写文件</li><li>计时器(setTimeout)</li><li>网络请求(fetch)</li><li>服务器请求数据</li></ol><p><strong>这些事件需要使用JavaScript提供的异步处理机制，否则页面会卡住，用户体验很差</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br>&#125;,<span class="hljs-number">1000</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">// 输出顺序 1 3 2</span><br></code></pre></td></tr></table></figure><h3 id="回调函数地狱-callback-hell-问题"><a href="#回调函数地狱-callback-hell-问题" class="headerlink" title="回调函数地狱(callback hell)问题"></a>回调函数地狱(callback hell)问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params">fun</span>)&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;计时器完毕&#x27;</span>)<br>        <span class="hljs-title function_">fun</span>();<br>    &#125;,<span class="hljs-number">1000</span>)<br>&#125;<br><br><span class="hljs-title function_">demo</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;回调函数地狱&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>回调函数嵌套太多可读性太差，会触发回调函数地狱(callback hell)问题，使用Promise可以有效的解决回调函数地狱问题</strong></p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><blockquote><p>Promise是JavaScript中为异步编程提供的一种解决方案，它代表一个将来才会结束的操作，操作的结果可能成功，也可能失败。Promise是一个装着将来操作结果的盒子，盒子打开之前，无法知道里面的结果是成功或者失败。</p></blockquote><h3 id="Promise-的三种状态"><a href="#Promise-的三种状态" class="headerlink" title="Promise 的三种状态"></a>Promise 的三种状态</h3><div class="table-container"><table><thead><tr><th>状态</th><th>结果</th></tr></thead><tbody><tr><td>pending</td><td>等待中，初始状态</td></tr><tr><td>fulfilled</td><td>已完成，操作成功，得到结果</td></tr><tr><td>rejected</td><td>已拒绝，操作失败，返回错误</td></tr></tbody></table></div><blockquote><p>Promise创建后为pending状态，获得结果之后，切换为fulfilled/rejected状态，状态变为fulfilled/rejected就不能再切换了。</p></blockquote><h3 id="Promsie基本使用"><a href="#Promsie基本使用" class="headerlink" title="Promsie基本使用"></a>Promsie基本使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-comment">// 异步操作</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">const</span> success = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(success)&#123;<br>            <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;操作成功&quot;</span>)<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-title function_">reject</span>(<span class="hljs-string">&quot;操作失败&quot;</span>)<br>        &#125;<br>    &#125;,<span class="hljs-number">1000</span>)<br>&#125;)<br><br><span class="hljs-comment">// 使用.then 与 .catch 处理回调</span><br>pro.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">r</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;操作成功&#x27;</span>)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;操作失败&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><ol><li>resolve(value)：代表成功，返回数据</li><li>reject(err)：代表失败，返回错误</li><li>.then()：处理成功回调</li><li>.catch()：处理失败回调</li></ol><h3 id="Promise中的静态方法"><a href="#Promise中的静态方法" class="headerlink" title="Promise中的静态方法"></a>Promise中的静态方法</h3><div class="table-container"><table><thead><tr><th>静态方法</th><th>使用</th></tr></thead><tbody><tr><td>Promise.resolve(value)</td><td>快速创建一个成功状态的Promise</td></tr><tr><td>Promise.reject(err)</td><td>快速创建一个失败状态的Promise</td></tr><tr><td>Promise.all([])</td><td>多个Promise，全部成功才算成功</td></tr><tr><td>Promise.race([])</td><td>哪个Promise先完成，就使用对应的Promise结果</td></tr></tbody></table></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>),<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>),<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>),<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>),<br>    <span class="hljs-comment">// 有一个为false 就会进入catch</span><br>])<br></code></pre></td></tr></table></figure><h2 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h2><blockquote><p>async和await是Promise的语法糖，它是对Promise更清晰的写法，本质还是Promise。</p></blockquote><ol><li>async：声明一个函数为异步函数</li><li>await：只能在异步函数内使用，代表等待Promise执行完以后才继续执行</li></ol><h3 id="使用async声明一个异步函数"><a href="#使用async声明一个异步函数" class="headerlink" title="使用async声明一个异步函数"></a>使用async声明一个异步函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// 等同于</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>async函数一定返回一个Promise对象</strong></p><h3 id="使用await等待Promise结果"><a href="#使用await等待Promise结果" class="headerlink" title="使用await等待Promise结果"></a>使用await等待Promise结果</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1000毫秒之后&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params">ms</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve,<span class="hljs-number">1000</span>))<br>&#125;<br><br><span class="hljs-title function_">hello</span>()<br><br><span class="hljs-comment">// 执行顺序是 输出hello -&gt; 等待1000毫秒 -&gt; 输出1000毫秒之后 </span><br><span class="hljs-comment">// await会等待delay函数执行完毕后才继续执行后面的代码</span><br></code></pre></td></tr></table></figure><ol><li>函数前的关键字<code>await</code>会等待Promise结果</li><li>await只能在<code>async</code>函数中使用</li></ol><h3 id="错误处理try…catch…"><a href="#错误处理try…catch…" class="headerlink" title="错误处理try…catch…"></a>错误处理try…catch…</h3><blockquote><p>在<code>await</code>等待过程中，如果Promise被reject，就会抛出异常，有时我们需要通过try…catch…将其包裹防止程序崩溃。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1000毫秒之后&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Promise出错&#x27;</span> + err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="async与await常见问题"><a href="#async与await常见问题" class="headerlink" title="async与await常见问题"></a>async与await常见问题</h3><div class="table-container"><table><thead><tr><th>问题</th><th>说明</th></tr></thead><tbody><tr><td>await外面不能使用</td><td>await只能写在async修饰的函数内</td></tr><tr><td>忘记try…catch…</td><td>一旦出错，整个程序将会崩溃</td></tr><tr><td>不会自动等待多个异常</td><td>需要Promise.all([])并发等待</td></tr><tr><td>async默认返回Promise</td><td>不是立即返回，而是承诺返回</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java进阶】 IO体系中的各种高级流</title>
      <link href="/2025/05/12/Java/%E3%80%90Java%E8%BF%9B%E9%98%B6%E3%80%91%20IO%E4%BD%93%E7%B3%BB%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E9%AB%98%E7%BA%A7%E6%B5%81/"/>
      <url>/2025/05/12/Java/%E3%80%90Java%E8%BF%9B%E9%98%B6%E3%80%91%20IO%E4%BD%93%E7%B3%BB%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E9%AB%98%E7%BA%A7%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p><img src="https://pic1.imgdb.cn/item/6821ff7158cb8da5c8eeb231.png" alt="缓冲流"></p><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3><p>原理： 底层自带了长度为<code>8192</code>(字节)的缓冲区提高性能</p><div class="table-container"><table><thead><tr><th>构造器</th><th>使用</th></tr></thead><tbody><tr><td>public BufferedInputStream(InputStream is)</td><td>把基本流<code>包装</code>成高级流，提高<code>读取数据</code>的性能</td></tr><tr><td>public BufferedOutputStream(OutputStream os)</td><td>把基本流<code>包装</code>成高级流，提高<code>写出数据</code>的性能</td></tr></tbody></table></div><h4 id="单字节拷贝"><a href="#单字节拷贝" class="headerlink" title="单字节拷贝"></a>单字节拷贝</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedInputStream;<br><span class="hljs-keyword">import</span> java.io.BufferedOutputStream;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建 BufferedInputStream 读取数据对象</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;IO.txt&quot;</span>));<br>        <span class="hljs-comment">// 创建 BufferedOutputStream 写出数据对象</span><br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;copyIO.txt&quot;</span>));<br><br>        <span class="hljs-comment">// 循环读取</span><br>        <span class="hljs-type">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = bis.read()) != -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 写入数据</span><br>            bos.write(b);<br>        &#125;<br><br>        bos.close();<br>        bis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多字节拷贝"><a href="#多字节拷贝" class="headerlink" title="多字节拷贝"></a>多字节拷贝</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedInputStream;<br><span class="hljs-keyword">import</span> java.io.BufferedOutputStream;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建 BufferedInputStream 读取数据对象</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;IO.txt&quot;</span>));<br>        <span class="hljs-comment">// 创建 BufferedOutputStream 写出数据对象</span><br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;copyIO.txt&quot;</span>));<br><br>        <span class="hljs-comment">// 循环读取</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = bis.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 写入数据</span><br>            bos.write(bytes,<span class="hljs-number">0</span>,b);<br>        &#125;<br><br>        bos.close();<br>        bis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字节缓冲流读写原理"><a href="#字节缓冲流读写原理" class="headerlink" title="字节缓冲流读写原理"></a>字节缓冲流读写原理</h4><p><img src="https://pic1.imgdb.cn/item/6821ff7258cb8da5c8eeb23b.png" alt="字节缓冲流读写原理"></p><ol><li>基本流读取数据放在缓冲区中，一次性读取8192个字节</li><li>变量b在内存中不断将左边缓冲区中的数据一个一个的放入右边的缓冲区中</li><li>右边缓冲区装满时，自动写入到目标文件</li></ol><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><div class="table-container"><table><thead><tr><th>构造器</th><th>使用</th></tr></thead><tbody><tr><td>public BufferedReader(Reader r)</td><td>把基本流包装为高级流</td></tr><tr><td>public BufferedWriter(Writer r)</td><td>把基本流包装为高级流</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>特有方法</th><th>使用</th></tr></thead><tbody><tr><td>public String readLine()</td><td>读取一行数据，如果没有数据可读，返回null</td></tr><tr><td>public void newLine()</td><td>跨平台的换行</td></tr></tbody></table></div><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p>转换流是字符流和字节流之间的桥梁</p><p>作用: </p><pre><code class="hljs">1. 指定字符集进行读写数据（JDK11之后淘汰）2. 字节流想要使用字符流的方法</code></pre><hr><h3 id="指定字母编码格式读取数据"><a href="#指定字母编码格式读取数据" class="headerlink" title="指定字母编码格式读取数据"></a>指定字母编码格式读取数据</h3><ol><li><p>JDK11之前</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建对象并指定字符编码</span><br><span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;IOGDK.txt&quot;</span>), <span class="hljs-string">&quot;GBK&quot;</span>);<br><br><span class="hljs-comment">// 读取数据</span><br><span class="hljs-type">int</span> ch;<br><span class="hljs-keyword">while</span>((ch = isr.read()) != -<span class="hljs-number">1</span>)&#123;<br>    System.out.print((<span class="hljs-type">char</span>)ch);<br>&#125;<br><br><span class="hljs-comment">// 释放资源</span><br>isr.close();<br></code></pre></td></tr></table></figure></li><li><p>JDK11之后</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建对象并指定字符编码</span><br><span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;IOGDK.txt&quot;</span>,Charset.forName(<span class="hljs-string">&quot;GBK&quot;</span>));<br><br><span class="hljs-comment">// 读取数据</span><br><span class="hljs-type">int</span> ch;<br><span class="hljs-keyword">while</span>((ch = fr.read()) != -<span class="hljs-number">1</span>)&#123;<br>    System.out.print((<span class="hljs-type">char</span>)ch);<br>&#125;<br><br><span class="hljs-comment">// 释放资源</span><br>fr.close();<br></code></pre></td></tr></table></figure></li></ol><h3 id="指定字符编码格式写出数据"><a href="#指定字符编码格式写出数据" class="headerlink" title="指定字符编码格式写出数据"></a>指定字符编码格式写出数据</h3><ol><li><p>JDK11之前</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建转换流对象</span><br><span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;IOGDK.txt&quot;</span>),<span class="hljs-string">&quot;GBK&quot;</span>);<br><br><span class="hljs-comment">// 写出数据</span><br>osw.write(<span class="hljs-string">&quot;神不惧死亡&quot;</span>);<br><br><span class="hljs-comment">// 释放资源</span><br>osw.close();<br></code></pre></td></tr></table></figure></li><li><p>JDK11之后</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 直接创建FileWriter对象</span><br><span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;IOGDK.txt&quot;</span>,Charset.forName(<span class="hljs-string">&quot;GBK&quot;</span>));<br><br><span class="hljs-comment">// 写入数据</span><br>fw.write(<span class="hljs-string">&quot;神不惧死亡&quot;</span>);<br><br><span class="hljs-comment">// 释放资源</span><br>fw.close();<br></code></pre></td></tr></table></figure></li></ol><h3 id="将本地GBK文件转为UTF-8文件"><a href="#将本地GBK文件转为UTF-8文件" class="headerlink" title="将本地GBK文件转为UTF-8文件"></a>将本地GBK文件转为UTF-8文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建读取对象</span><br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;IOGDK.txt&quot;</span>,Charset.forName(<span class="hljs-string">&quot;GBK&quot;</span>));<br>        <span class="hljs-comment">// 创建写入对象</span><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;IOUTF.txt&quot;</span>,Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br><br>        <span class="hljs-comment">// 读取数据</span><br>        <span class="hljs-type">int</span> ch;<br>        <span class="hljs-keyword">while</span>((ch = fr.read()) != -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 写入数据</span><br>            fw.write((<span class="hljs-type">char</span>)ch);<br>        &#125;<br><br>        <span class="hljs-comment">// 关闭资源 - 先开的后关</span><br>        fw.close();<br>        fr.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="序列化流与反序列化流"><a href="#序列化流与反序列化流" class="headerlink" title="序列化流与反序列化流"></a>序列化流与反序列化流</h2><blockquote><p><code>序列化流</code>可以将Java中的<code>对象类型数据</code>写入到本地文件之中，写入之后是看不懂的一堆乱码(类似于：��srStudent/�l�_�QIageLnametLjava/lang/String;xptzhangsan)。但是可以使用<code>反序列化流</code>读取出来，读取出来以后就是正常对象类型数据。读取出来后，类型默认为Object类型，如果需要的是其他自定义的对象类型，可以使用<code>强制类型转换</code>，将数据转换为其他类型。</p></blockquote><h3 id="序列化流"><a href="#序列化流" class="headerlink" title="序列化流"></a>序列化流</h3><p><strong>将程序中的对象，写入到文件中</strong></p><div class="table-container"><table><thead><tr><th>构造器</th><th>使用</th></tr></thead><tbody><tr><td>public ObjectOutputStream(OutputStream out)</td><td>把基本流包装为高级流</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>成员方法</th><th>使用</th></tr></thead><tbody><tr><td>public final void writeObject(Obejct obj)</td><td>把对象序列化(写出)到文件中</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建要写出到文件中的对象</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">21</span>);<br><br><span class="hljs-comment">// 创建序列化流对象</span><br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;IO.txt&quot;</span>));<br><br><span class="hljs-comment">// 写出对象数据</span><br>oos.writeObject(stu);<br><br><span class="hljs-comment">// 释放资源</span><br>oos.close();<br></code></pre></td></tr></table></figure><blockquote><p>注意：在利用序列化流写出数据时，里面会出现<code>NotSerializableException</code>异常。解决方法是：让对应对象类型的Javabean类(我这边创建的是Student类)实现一个<code>Serializable接口</code>(Serializable接口：里面没有任何抽象方法，为<code>标记型接口</code>，一旦实现这个接口表示当前的javabean类可以被序列化)。</p></blockquote><h3 id="反序列化流"><a href="#反序列化流" class="headerlink" title="反序列化流"></a>反序列化流</h3><p><strong>将文件中的对象，读取到程序中</strong></p><div class="table-container"><table><thead><tr><th>构造器</th><th>使用</th></tr></thead><tbody><tr><td>public ObjectInputStream(InputStream)</td><td>把基本流包装为高级流</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>成员方法</th><th>使用</th></tr></thead><tbody><tr><td>public Object readObject()</td><td>将序列化到本地中的对象，读取到程序中</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建反序列化对象</span><br><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;IO.txt&quot;</span>));<br><br><span class="hljs-comment">// 读取数据</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (Student)ois.readObject();<br><br><span class="hljs-comment">// 打印</span><br>System.out.println(s);<br><br><span class="hljs-comment">// 释放资源</span><br>ois.close();<br></code></pre></td></tr></table></figure><hr><blockquote><p>问题：假设：我们已经使用序列化流将对象写入到本地文件中，但是又在后续对javabean类做了修改，比如添加了一个属性，此时如果我们使用反序列化流从本地文件中读取对象时会发现，程序出现报错。</p><p>原因：如果一个类实现了Serializable接口，那么表示这个类是可被序列化的。此时java底层会根据这个类的所有内容(成员变量，构造方法，成员方法…)进行计算，计算出一个long类型的序列号(版本号)，假如此时计算出的版本号为0011，那么java会将0011版本号记录到本地文件中。如果此时修改javabean内的代码，会计算一个新的版本号，当我们读取本地对象时，两个版本号不一致，所以程序出现错误。</p><p>解决方案:在定义javabean类时定义一个固定的版本号。版本号为私有，不让外界使用，也不提供get,set方法。版本号的变量名一定要写成<code>serialVersionUID</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Serial</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">0011L</span>;<br></code></pre></td></tr></table></figure><p><strong>如果一个对象中的某个变量的值不想被序列化，给该成员变量加上<code>transient</code>关键字修饰，表示该成员变量不参与序列化过程。</strong></p><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><blockquote><p>打印流不能读,只能写。打印流只有输出流</p></blockquote><ol><li>打印流只操作文件目的地，不操作数据源</li><li>特有的写出方法可以实现，数据原样写出</li><li>特有的写出方法可以实现，自动换行，自动刷新</li></ol><h3 id="字节打印流"><a href="#字节打印流" class="headerlink" title="字节打印流"></a>字节打印流</h3><div class="table-container"><table><thead><tr><th>构造方法</th><th>使用</th></tr></thead><tbody><tr><td>public PrintStream(OutputStream/File/String)</td><td>关联字节输出流/文件/文件路径</td></tr><tr><td>public PrintStream(String fileName, Chatset charset)</td><td>指定字符编码</td></tr><tr><td>public PrintStream(OutputStream os, boolean autoFlush)</td><td>自动刷新</td></tr><tr><td>public PrintStream(OutputStream os, boolean autoFlush, String encoding)</td><td>指定字符编码且自动刷新</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>成员方法</th><th>使用</th></tr></thead><tbody><tr><td>public void write(int b)</td><td>常规方法：将指定字节写出</td></tr><tr><td>public void println(XXX xxx)</td><td>特有方法：打印任意数据，自动刷新换行</td></tr><tr><td>public void print(XXX xxx)</td><td>特有方法：打印任意数据，不换行</td></tr><tr><td>public void printf(String format, Object… args)</td><td>特有方法：带占位符的打印，不换行</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建字节打印流</span><br><span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-string">&quot;io.txt&quot;</span>);<br><br><span class="hljs-comment">// 写出数据</span><br>ps.println(<span class="hljs-string">&quot;岂不闻光阴如骏马加鞭&quot;</span>);<br>ps.println(<span class="hljs-string">&quot;岁月如落花流水&quot;</span>);<br><br><span class="hljs-comment">// 释放资源</span><br>ps.close();<br></code></pre></td></tr></table></figure><h3 id="字符打印流"><a href="#字符打印流" class="headerlink" title="字符打印流"></a>字符打印流</h3><p><strong>字符打印流与字节打印流构造方法与成员方法都是类似，只是底层多了一个缓冲区</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建字节打印流对象</span><br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-string">&quot;io.txt&quot;</span>);<br><br><span class="hljs-comment">// 写出数据</span><br>pw.println(<span class="hljs-string">&quot;岂不闻天无绝人之路&quot;</span>);<br>pw.println(<span class="hljs-string">&quot;只要我想走，路就在脚下&quot;</span>);<br><br><span class="hljs-comment">// 释放资源</span><br>pw.close();<br></code></pre></td></tr></table></figure><h3 id="输出语句与打印流之间的关系"><a href="#输出语句与打印流之间的关系" class="headerlink" title="输出语句与打印流之间的关系"></a>输出语句与打印流之间的关系</h3><blockquote><p>输出语句其实底层用的就是打印流。如果进入<code>System</code>类，可以看见，<code>out</code>是System中一个<code>PrintStream</code>类的静态变量，那么<code>System.out.peintln</code>，其实就是通过System类调用out静态变量，然后在调用PrintStream中的<code>println()</code>方法。out这个<code>打印流对象</code>，是在虚拟机启动时，由虚拟机自动创建的。out打印流对象默认指向控制台，也可以把它称为：<code>系统中的标准输出流</code>。</p></blockquote><h2 id="压缩流与解压缩流"><a href="#压缩流与解压缩流" class="headerlink" title="压缩流与解压缩流"></a>压缩流与解压缩流</h2><h3 id="解压缩流"><a href="#解压缩流" class="headerlink" title="解压缩流"></a>解压缩流</h3><p>压缩包里面的每一个文件都是一个<code>ZipEntry</code>对象，解压的本质就是把每一个ZipEntry对象按照层级拷贝到本地另一个文件夹中。在Java中只能识别<code>.zip</code>的压缩文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.util.zip.ZipEntry;<br><span class="hljs-keyword">import</span> java.util.zip.ZipInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 定义一个File对象表示压缩包,数据源</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;IOUTF.zip&quot;</span>);<br>        <span class="hljs-comment">// 定义一个File对象表示解压文件的位置,目的地</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src&quot;</span>);<br><br>        unzip(src, dest);<br>    &#125;<br><br>    <span class="hljs-comment">// 定义一个方法用来解压</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unzip</span><span class="hljs-params">(File src, File dest)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建一个解压缩流用来读取压缩包中的数据</span><br>        <span class="hljs-type">ZipInputStream</span> <span class="hljs-variable">zis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(src));<br>        <span class="hljs-comment">// 获取压缩包中的每一个zipentry对象</span><br>        ZipEntry zipEntry;<br>        <span class="hljs-keyword">while</span> ((zipEntry = zis.getNextEntry()) != <span class="hljs-literal">null</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (zipEntry.isDirectory()) &#123;<br>                <span class="hljs-comment">// 如果是文件夹</span><br>                <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dest, zipEntry.toString());<br>                file.mkdirs();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dest, zipEntry.toString()));<br>                <span class="hljs-comment">// 如果是文件</span><br>                <span class="hljs-type">int</span> b;<br>                <span class="hljs-keyword">while</span> ((b = zis.read()) != -<span class="hljs-number">1</span>) &#123;<br>                    fos.write(b);<br>                &#125;<br>                fos.close();<br>                zis.closeEntry();<br>            &#125;<br>        &#125;<br>        zis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="压缩流"><a href="#压缩流" class="headerlink" title="压缩流"></a>压缩流</h3><p>压缩的本质：把每一个ZipEntry对象放到压缩包中</p><h4 id="压缩单个文件"><a href="#压缩单个文件" class="headerlink" title="压缩单个文件"></a>压缩单个文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.zip.ZipEntry;<br><span class="hljs-keyword">import</span> java.util.zip.ZipOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建File对象表示要压缩的文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;IOGDK.txt&quot;</span>);<br>        <span class="hljs-comment">// 创建File表示压缩到的位置</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src&quot;</span>);<br><br>        toZip(src, dest);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toZip</span><span class="hljs-params">(File src, File dest)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">ZipOutputStream</span> <span class="hljs-variable">zos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dest,<span class="hljs-string">&quot;IOGBK.zip&quot;</span>)));<br><br>        <span class="hljs-type">ZipEntry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipEntry</span>(<span class="hljs-string">&quot;GBK.txt&quot;</span>);<br><br>        zos.putNextEntry(entry);<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(src);<br>        <span class="hljs-type">int</span> b;<br>        <span class="hljs-keyword">while</span>((b = fis.read()) != -<span class="hljs-number">1</span>)&#123;<br>            zos.write(b);<br>        &#125;<br>        fis.close();<br>        zos.closeEntry();<br>        zos.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Commons-io工具包"><a href="#Commons-io工具包" class="headerlink" title="Commons-io工具包"></a>Commons-io工具包</h2><h3 id="第三方包使用步骤"><a href="#第三方包使用步骤" class="headerlink" title="第三方包使用步骤"></a>第三方包使用步骤</h3><ol><li>下载第三方Commons-io包:<a href="https://commons.apache.org/io/download_io.cgi">https://commons.apache.org/io/download_io.cgi</a></li><li>在项目中新建一个<code>lib</code>文件夹，用来专门存放第三方包</li><li>将<code>jar包</code>复制粘贴到lib文件夹</li><li>右键点击jar包，选择<code>Add as Library</code> -&gt; 点击OK</li></ol><p><a href="https://commons.apache.org/proper/commons-io/">Commons-io</a>是<code>apache</code>(专门为开源软件项目办的一个非营利性组织)开源基金组织提供的一组关于IO操作的开源工具包(还达不到框架级别)，可以提高IO流的开发效率。</p><h3 id="Commons-io常见方法"><a href="#Commons-io常见方法" class="headerlink" title="Commons-io常见方法"></a>Commons-io常见方法</h3><div class="table-container"><table><thead><tr><th>FileUtils类(文件/文件夹)</th><th>说明</th></tr></thead><tbody><tr><td>static void copyFile(File srcFile, File destFile)</td><td>复制文件</td></tr><tr><td>static void copyDirectory(File srcDir, File destDir)</td><td>复制文件夹</td></tr><tr><td>static void copyDirectoryToDirectory(File srcDir, File destDir)</td><td>复制文件夹</td></tr><tr><td>static void deleteDirectory(File directory)</td><td>删除文件夹</td></tr><tr><td>static void cleanDirectory(File directory)</td><td>清空文件夹</td></tr><tr><td>static String readFileToString(File file, Charset encoding)</td><td>读取文件中的数据为字符串</td></tr><tr><td>static void write(File file, CharSequence data, String encoding)</td><td>写出数据</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>IOUtils类(流相关)</th><th>说明</th></tr></thead><tbody><tr><td>public static int copy(InputStream input, OutputStream output)</td><td>复制文件</td></tr><tr><td>public static int copyLarge(Reader input, Writer output)</td><td>复制大文件</td></tr><tr><td>public static String readLines(Reader input)</td><td>读取数据</td></tr><tr><td>public static void write(String data, OutputStream output)</td><td>写出数据</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于计算机中的字符集</title>
      <link href="/2025/04/28/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E9%9B%86/"/>
      <url>/2025/04/28/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<ol><li>计算机中, 任意数据以<code>二进制</code>形式存储</li><li>计算机中, 最小的存储单元为<code>一个字节</code></li><li>ASCll字符集中, 一个英文占一个字节</li><li>简体中文版Windows, 默认使用GBK字符集</li><li>GBK字符集完全兼容ASCll字符集</li></ol><h3 id="计算机存储规则"><a href="#计算机存储规则" class="headerlink" title="计算机存储规则"></a>计算机存储规则</h3><blockquote><p>计算机中,任意数据都是以<code>二进制</code>方式存储,一个0/1通常称为1<code>bit/比特位</code>。8个bit为一组,称为<code>字节</code>,字节是计算机中最小的存储单位。计算机存储英文,通常只需要一个字节。而汉字需要两个字节存储,这也是有时会出现乱码的原因。</p></blockquote><h3 id="ASCll-字符集"><a href="#ASCll-字符集" class="headerlink" title="ASCll 字符集"></a>ASCll 字符集</h3><blockquote><p>计算机存储英文时,会将要存储的英文拿到ASCll表中查询,获得对应的二进制数据,然后编码(ASCll的编码规则:前面补0,补齐8位,也就是一个字节),将编码之后的二进制存储到计算机中。反之则是解码,然后去ASCll获取对应的字符显示即可。</p></blockquote><h3 id="GBK字符集"><a href="#GBK字符集" class="headerlink" title="GBK字符集"></a>GBK字符集</h3><blockquote><p>最早<code>GB2312字符集</code>,1980年发布,为简体中文汉字国家标准,其中包括6763个简体汉字(没有繁体)。台湾省用不了,所以对岸小朝廷就自己搞了一个<code>BIG5字符集</code>,收录13053个中文字。2000年,发布<code>GBK字符集</code>收录21003汉字,其中包含了GB13000-1中的中日韩汉字和BIG5编码中的所有汉字。windows系统默认使用的就是GBK。但是系统显示的是<code>ANSI</code>。</p></blockquote><ol><li>英文占一个字节,汉字占两个字节存储</li><li>高位字节二进制一定以1开头,转为十进制之后为负数</li></ol><h3 id="Unicode字符集"><a href="#Unicode字符集" class="headerlink" title="Unicode字符集"></a>Unicode字符集</h3><blockquote><p>国际标准字符集,将世界各语言字符定义了一个唯一编码,以满足跨语言,跨平台,称为<code>万国码</code>。</p></blockquote><ol><li>存储英文</li></ol><p>Unicode也完全兼容ASCll表,但是编码的时候就要复杂一些</p><pre><code class="hljs">1. UTF-16编码规则: 用2-4个字节保存2. UTF-32编码规则: 固定使用四个字节保存3. UTF-8编码规则: 用1-4字节保存(常见)</code></pre><p>UTF-8规定,如果是ASCll中的<code>英文字母</code>,统一用一个字节保存。可如果是阿拉伯文,希腊语使用两个字节表示。如果是<code>中日韩</code>,中东文字,使用三个字节表示。其他一些语言使用四个字节表示。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java进阶】 IO流中的基础流</title>
      <link href="/2025/04/20/Java/%E3%80%90Java%E8%BF%9B%E9%98%B6%E3%80%91IO%E6%B5%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2025/04/20/Java/%E3%80%90Java%E8%BF%9B%E9%98%B6%E3%80%91IO%E6%B5%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是IO流"><a href="#什么是IO流" class="headerlink" title="什么是IO流?"></a>什么是IO流?</h2><p><strong>IO(Input &amp;&amp; Output)流是存储与读取数据的解决方案</strong>。</p><ol><li>把程序中的数据保存在文件中(写)</li><li>把文件中的数据加载到程序中(读)</li></ol><p>IO流的分类</p><ol><li>按照流的方向: 输入流(读取)与输出流(写入)</li><li>按照操作文件的类型: 字节流(所有类型文件,图片,视频,音频)与字符流(纯文本文件,.txt,.md,.xml)</li></ol><p>纯文本文件: 用Windows自带的记事本能<code>打开并且能读懂</code>的文件</p><h2 id="IO流体系"><a href="#IO流体系" class="headerlink" title="IO流体系"></a>IO流体系</h2><ol><li><p>字节流</p><ol><li>InputStream: 字节输入流</li><li>OutputStream: 字节输出流</li></ol></li><li><p>字符流</p><ol><li>Reader: 字符输入流</li><li>Write: 字符输出流</li></ol></li></ol><p>都是抽象类, 无法创建实例</p><h2 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h2><p>操作本地文件的字节输出流,可以把程序中的数据写到本地文件中</p><ol><li>创建对象</li><li>写数据</li><li>释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个字节输出流</span><br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;IO.txt&quot;</span>);<br><span class="hljs-comment">// 1. 参数是字符串路径, 或者File对象都可以</span><br><span class="hljs-comment">// 2. 如果路径文件不存在, 会自动创建新文件, 但需要确保父级路径存在</span><br><span class="hljs-comment">// 3, 如果文件已经存在, 则会清空文件</span><br><br><span class="hljs-comment">// 写出数据</span><br>fos.write(<span class="hljs-number">97</span>);<br><span class="hljs-comment">// 1. write参数是整数, 但是实际写在文件中的是ASCLL表中对应的字符</span><br><br><span class="hljs-comment">// 释放资源</span><br>fos.close();<br><span class="hljs-comment">// 每次使用完流之后, 都需要释放资源</span><br><span class="hljs-comment">// 如果不释放资源, Java会一直占用资源, 相当于一直打开文件, 释放相当于关闭文件</span><br></code></pre></td></tr></table></figure><p>运行程序,IO.txt文件内已经写入了一个<code>a</code></p><div class="table-container"><table><thead><tr><th>方法</th><th>使用</th></tr></thead><tbody><tr><td>void write(int b)</td><td>一次写一个字节数据</td></tr><tr><td>void write(byte[] b)</td><td>一次写一个字节数组数据</td></tr><tr><td>void write(byte[] b,int off,int len)</td><td>一次写一个字节数组的部分数据</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] bytes = &#123;<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>&#125;;<br><br><span class="hljs-comment">// 创建一个字节输出流</span><br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;IO.txt&quot;</span>);<br><br><span class="hljs-comment">// 写出数据</span><br>fos.write(bytes);<br><br><span class="hljs-comment">// 释放资源</span><br>fos.close();<br></code></pre></td></tr></table></figure><h3 id="换行和续写"><a href="#换行和续写" class="headerlink" title="换行和续写"></a>换行和续写</h3><ol><li>getBytes方法</li></ol><blockquote><p>如果需要写入一个字符串可以使用<code>字符串.gteBytes()</code>,会将字符串转换为字符数组,返回值刚好是一个Byte类型的字符数组,可以当做write()方法的形参</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个字节输出流</span><br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;IO.txt&quot;</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java,Python&quot;</span>;<br><br><span class="hljs-comment">// 写出数据</span><br>fos.write(str.getBytes());<br><br><span class="hljs-comment">// 释放资源</span><br>fos.close();<br></code></pre></td></tr></table></figure><ol><li>换行</li></ol><p>想要换行只需要在写出一个换行符就可以了</p><p>换行符: </p><pre><code class="hljs">1. Windows: \r\n2. Linux: \n3. Mac: \r在Windows操作系统中,Java进行了优化, 只需输入\r或\n都可以实现换行,因为Java会帮我们补全</code></pre><ol><li>续写</li></ol><p>创建对象时,传入第二个参数<code>append参数</code>,默认为false(关闭续写),传入true表示打开续写</p><h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><p>字节输入流,从磁盘文件中读取字节数据到程序中</p><ol><li>创建输入流对象</li><li>读取数据</li><li>释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;IO.txt&quot;</span>);<br><br><span class="hljs-comment">// 读取数据</span><br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> file.read();<br><br>file.close()<br></code></pre></td></tr></table></figure><ol><li><strong>如果读不到会返回-1</strong></li><li>如果文件不存在会报错</li></ol><h3 id="FileInputStream-循环读取"><a href="#FileInputStream-循环读取" class="headerlink" title="FileInputStream 循环读取"></a>FileInputStream 循环读取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;IO.txt&quot;</span>);<br><br><span class="hljs-comment">// 循环读取</span><br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">while</span> ((b = file.read()) != -<span class="hljs-number">1</span>) &#123;<br><br>    System.out.print((<span class="hljs-type">char</span>)b + <span class="hljs-string">&quot; &quot;</span>);<br><br>&#125;<br><br>file.close()<br></code></pre></td></tr></table></figure><h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;IO.txt&quot;</span>);<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;copyIO.txt&quot;</span>);<br><br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">while</span> ((b = file.read()) != -<span class="hljs-number">1</span>) &#123;<br>    fos.write(b);<br>&#125;<br><br>fos.close();<br>file.close();<br></code></pre></td></tr></table></figure><p><strong>一次读写一个字节拷贝速度非常慢,只适用于拷贝小文件</strong></p><div class="table-container"><table><thead><tr><th>方法</th><th>使用</th></tr></thead><tbody><tr><td>public int read()</td><td>一次读一字节</td></tr><tr><td>public int read(byte[] buffer)</td><td>一次读多字节</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;IO.txt&quot;</span>);<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;copyIO.txt&quot;</span>);<br><br><span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">while</span> ((b = file.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 拷贝大文件,一次拷贝5MB</span><br>    fos.write(b);<br>&#125;<br><br>fos.close();<br>file.close();<br></code></pre></td></tr></table></figure><p>大文件拷贝可以使用长度为<code>1024*1024*5</code>的数组,也就是一次拷贝<code>5MB</code></p><h2 id="为什么会出现乱码"><a href="#为什么会出现乱码" class="headerlink" title="为什么会出现乱码?"></a>为什么会出现乱码?</h2><ol><li>读取数据时,未读完整个汉字</li><li>编码和解码方式不统一</li></ol><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><blockquote><p>字符流的底层就是一个字节流，只不过在字节流的基础上再加上字符集。特点是在读取数据时，一次读取一个字节，遇到中文时，一次读取多个字节。字符流非常适合操作纯文本文件，文本中有中文时，不会出现乱码。</p></blockquote><ol><li>Reader - 字符输入流</li><li>Write - 字符输出流</li></ol><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><ol><li>创建字符输入流对象</li><li>读取数据</li><li>释放资源</li></ol><div class="table-container"><table><thead><tr><th>方法</th><th>使用</th></tr></thead><tbody><tr><td>public int read()</td><td>读取数据，读到结尾返回-1</td></tr><tr><td>public int read(char[] buffer)</td><td>读取多个数据，读到末尾返回-1</td></tr></tbody></table></div><ol><li>空参read()方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建对象</span><br><span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;IO.txt&quot;</span>);<br><br><span class="hljs-comment">// 循环读取</span><br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">while</span> ((b = fileReader.read()) != -<span class="hljs-number">1</span>) &#123;<br>    System.out.print((<span class="hljs-type">char</span>) b);<br>&#125;<br><br><span class="hljs-comment">// 释放资源</span><br>fileReader.close();<br></code></pre></td></tr></table></figure><ol><li>带参read()方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建对象</span><br><span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;IO.txt&quot;</span>);<br><br><span class="hljs-comment">// 循环读取</span><br><span class="hljs-type">char</span>[] cha = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span> ((len = fileReader.read(cha)) != -<span class="hljs-number">1</span>) &#123;<br>    System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cha, <span class="hljs-number">0</span> , len));<br>&#125;<br><br><span class="hljs-comment">// 释放资源</span><br>fileReader.close();<br></code></pre></td></tr></table></figure><h2 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h2><div class="table-container"><table><thead><tr><th>方法</th><th>使用</th></tr></thead><tbody><tr><td>public FileWriter(File file,boolean append)</td><td>创建字符输出流，append为续写开关可以省略，默认为false</td></tr><tr><td>public FileWriter(String pathname,boolean append)</td><td>创建字符输出流，append为续写开关可以省略</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建对象</span><br><span class="hljs-type">FileWriter</span> <span class="hljs-variable">fileWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;IO.txt&quot;</span>);<br><br><span class="hljs-comment">// 写入数据</span><br>fileWriter.write(<span class="hljs-string">&quot;Hello 世界&quot;</span>);<br><br><span class="hljs-comment">// 释放资源</span><br>fileWriter.close();<br></code></pre></td></tr></table></figure><p>write()可以传入string，int，char[]类型</p><hr><h2 id="字符流原理"><a href="#字符流原理" class="headerlink" title="字符流原理"></a>字符流原理</h2><ol><li><p>字符输入流</p><ol><li><p>创建字符输入流对象</p><ul><li>关联文件，并创建缓冲区（长度为8192的字节数组）</li></ul></li><li><p>读取数据</p><ul><li>判断缓冲区中是否有数据可以被读取</li><li>没有数据：从文件中获取数据，装到缓冲区中，每次尽可能装满缓冲区。如果文件中也没有剩余数据，返回-1</li><li>有数据：直接从缓冲区中读取数据</li></ul></li></ol></li><li><p>字符输出流</p></li></ol><blockquote><p>字符输出流会现将数据写入缓冲区中，缓冲区写满了才会写入到文件。如果想要直接写入文件可以通过<code>flush()</code>方法或者<code>close()</code>方法刷新或释放。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java进阶】 Stream流</title>
      <link href="/2025/04/16/Java/%E3%80%90Java%E8%BF%9B%E9%98%B6%E3%80%91Stream%E6%B5%81/"/>
      <url>/2025/04/16/Java/%E3%80%90Java%E8%BF%9B%E9%98%B6%E3%80%91Stream%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Stream流"><a href="#什么是Stream流" class="headerlink" title="什么是Stream流?"></a>什么是Stream流?</h2><p>Stream流就是对数据并像流水线一样<code>操作数据</code>。可以结合Lambda表达式,简化数组,集合的操作。</p><p>Stream流使用步骤:</p><pre><code class="hljs">1. 得到Stream流,并把数据放上去。2. 利用Stream流中的各种API进行数据的操作。</code></pre><h2 id="获取Stream流"><a href="#获取Stream流" class="headerlink" title="获取Stream流"></a>获取Stream流</h2><ol><li><p>单列集合获取Stream流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list,<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>);<br><span class="hljs-comment">// 获取stream流,并将数据放在stream流内,处理数据</span><br>list.stream().forEach(item -&gt; System.out.print(item + <span class="hljs-string">&quot; &quot;</span>));<br></code></pre></td></tr></table></figure></li><li><p>双列集合获取Stream流</p></li></ol><p>双列集合无法直接使用Stream流,需要用单列集合转换一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;String, Integer&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>hm.put(<span class="hljs-string">&quot;Java&quot;</span>, <span class="hljs-number">1</span>);<br>hm.put(<span class="hljs-string">&quot;Python&quot;</span>, <span class="hljs-number">2</span>);<br>hm.put(<span class="hljs-string">&quot;C#&quot;</span>, <span class="hljs-number">3</span>);<br>hm.put(<span class="hljs-string">&quot;C++&quot;</span>, <span class="hljs-number">4</span>);<br><br><br><span class="hljs-comment">// 获取Stream流</span><br><span class="hljs-comment">// 拥有所有key的stream流</span><br>hm.keySet().stream().forEach(item -&gt; System.out.print(item + <span class="hljs-string">&quot; &quot;</span>));<br><span class="hljs-comment">// 拥有每一个键值对的stream流</span><br>hm.entrySet().stream().forEach(item -&gt; System.out.print(item + <span class="hljs-string">&quot;&quot;</span>));<br></code></pre></td></tr></table></figure><ol><li>数据获取stream流</li></ol><p>数组需要通过<code>Arrays类</code>来获取stream流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>&#125;;<br>Arrays.stream(arr).forEach(item -&gt; System.out.println(item));<br></code></pre></td></tr></table></figure><ol><li>一堆零散的数据</li></ol><p>这堆零散的数据需要是同种数据类型的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 直接通过Stream.of获取Stream流</span><br>Stream.of(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>).forEach(item -&gt; System.out.println(item));<br></code></pre></td></tr></table></figure><h2 id="Stream流的中间方法"><a href="#Stream流的中间方法" class="headerlink" title="Stream流的中间方法"></a>Stream流的中间方法</h2><div class="table-container"><table><thead><tr><th>方法</th><th>使用</th></tr></thead><tbody><tr><td>filter(function)</td><td>过滤</td></tr><tr><td>limit(int num)</td><td>获取前几个元素</td></tr><tr><td>skip(int num)</td><td>跳过几个元素</td></tr><tr><td>distinct()</td><td>元素去重(依赖<code>hashCode,equals</code>方法,需要重写)</td></tr><tr><td>concat(Stream a, Stream b)</td><td>合并a,b两个流为一个流(两个流的数据类型,尽量保持一致)</td></tr><tr><td>map(new Function<T, R>(){})</td><td>转换流中的数据类型</td></tr></tbody></table></div><pre><code class="hljs">1. 中间方法返回新的Stream流,可以使用链式编程2. 修改Stream流中的数据,不会影响原来集合,数组中的数据</code></pre><ol><li>filter - 过滤</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;Java&quot;</span>,<span class="hljs-string">&quot;Html&quot;</span>,<span class="hljs-string">&quot;JavaScript&quot;</span>,<span class="hljs-string">&quot;Python&quot;</span>,<span class="hljs-string">&quot;C#&quot;</span>,<span class="hljs-string">&quot;C++&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>);<br><span class="hljs-comment">// 过滤掉不是以&#x27;C&#x27;开头的数据</span><br>list.stream().filter(item -&gt; item.startsWith(<span class="hljs-string">&quot;C&quot;</span>));<br><span class="hljs-comment">// 输出 C# C++ C</span><br></code></pre></td></tr></table></figure><ol><li>limit - 获取前几个</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;Java&quot;</span>,<span class="hljs-string">&quot;Html&quot;</span>,<span class="hljs-string">&quot;JavaScript&quot;</span>,<span class="hljs-string">&quot;Python&quot;</span>,<span class="hljs-string">&quot;C#&quot;</span>,<span class="hljs-string">&quot;C++&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>);<br><span class="hljs-comment">// 获取前三个元素</span><br>list.stream().limit(<span class="hljs-number">3</span>).forEach(item -&gt; System.out.println(item));<br><span class="hljs-comment">// 输出 Java Html JavaScript</span><br></code></pre></td></tr></table></figure><ol><li>skip - 跳过几个元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;Java&quot;</span>,<span class="hljs-string">&quot;Html&quot;</span>,<span class="hljs-string">&quot;JavaScript&quot;</span>,<span class="hljs-string">&quot;Python&quot;</span>,<span class="hljs-string">&quot;C#&quot;</span>,<span class="hljs-string">&quot;C++&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>);<br><br><span class="hljs-comment">// 跳过前三个元素</span><br>list.stream().skip(<span class="hljs-number">3</span>).forEach(item -&gt; System.out.println(item));<br><span class="hljs-comment">// 输出 Python C# C++ C</span><br></code></pre></td></tr></table></figure><ol><li>distinct - 元素去重</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;Java&quot;</span>,<span class="hljs-string">&quot;Html&quot;</span>,<span class="hljs-string">&quot;JavaScript&quot;</span>,<span class="hljs-string">&quot;Python&quot;</span>,<span class="hljs-string">&quot;C#&quot;</span>,<span class="hljs-string">&quot;C++&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;Java&quot;</span>,<span class="hljs-string">&quot;Html&quot;</span>);<br><br><span class="hljs-comment">// 元素去重</span><br>list.stream().distinct().forEach(item -&gt;System.out.println(item));<br><span class="hljs-comment">// 输出 Java Html JavaScript Python C# C++ C</span><br></code></pre></td></tr></table></figure><p><strong>如果类型不是字符串类型,而是自定义的一些类型,需要重写<code>hashCode,equals</code>方法,因为String底层已经重写这两个方法了,所以这里我不需要重写</strong></p><ol><li>concat - 合并流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;Java&quot;</span>,<span class="hljs-string">&quot;Html&quot;</span>,<span class="hljs-string">&quot;JavaScript&quot;</span>,<span class="hljs-string">&quot;Python&quot;</span>,<span class="hljs-string">&quot;C#&quot;</span>,<span class="hljs-string">&quot;C++&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>);<br>ArrayList&lt;String&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list2, <span class="hljs-string">&quot;CSS&quot;</span>,<span class="hljs-string">&quot;Vue&quot;</span>,<span class="hljs-string">&quot;Webpack&quot;</span>);<br><br><span class="hljs-comment">// 合并流</span><br>Stream.concat(list.stream(), list2.stream()).forEach(item -&gt; System.out.print(item + <span class="hljs-string">&quot; &quot;</span>));<br><span class="hljs-comment">// 输出 Java Html JavaScript Python C# C++ C CSS Vue Webpack</span><br></code></pre></td></tr></table></figure><ol><li>map - 转换数据流中的类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>Collections.addAll(list, <span class="hljs-string">&quot;Java-30&quot;</span>,<span class="hljs-string">&quot;Html-20&quot;</span>,<span class="hljs-string">&quot;JavaScript-18&quot;</span>,<span class="hljs-string">&quot;Python-15&quot;</span>,<span class="hljs-string">&quot;C#-13&quot;</span>,<span class="hljs-string">&quot;C++-33&quot;</span>,<span class="hljs-string">&quot;C-50&quot;</span>);<br><br><span class="hljs-comment">// 只获取后面的数字</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 泛型中第一个类型表示原本的类型,第二个类型表示转换之后的类型</span><br><span class="hljs-comment"> * 返回值类型表示转换之后的类型</span><br><span class="hljs-comment"> * s就代表原本的每一个数据</span><br><span class="hljs-comment"> * return 返回的是转换之后的数据</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 可以使用Lambda简写</span><br>list.stream().map(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;String, Integer&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-comment">// 通过&#x27;-&#x27;切割字符串</span><br>        String[] arr = s.split(<span class="hljs-string">&quot;-&quot;</span>);<br><br>        <span class="hljs-comment">// 获取数字</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">1</span>];<br><br>        <span class="hljs-comment">// 转换为Integer类型并且返回</span><br>        <span class="hljs-keyword">return</span> Integer.parseInt(age);<br>    &#125;<br>&#125;).forEach(item -&gt; System.out.print(item + <span class="hljs-string">&quot; &quot;</span>));<br><span class="hljs-comment">// 输出 30 20 18 15 13 33 50</span><br></code></pre></td></tr></table></figure><h2 id="Stream流的结束方法"><a href="#Stream流的结束方法" class="headerlink" title="Stream流的结束方法"></a>Stream流的结束方法</h2><p>结束方法,调用以后不能在调用其他方法了</p><div class="table-container"><table><thead><tr><th>方法</th><th>使用</th></tr></thead><tbody><tr><td>forEach()</td><td>遍历</td></tr><tr><td>count()</td><td>统计</td></tr><tr><td>toArray()</td><td>收集数据,放在数组中</td></tr><tr><td>collect(Collector collector)</td><td>收集数据,放在集合中</td></tr></tbody></table></div><ol><li>forEach - 遍历</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;Java-30&quot;</span>,<span class="hljs-string">&quot;Html-20&quot;</span>,<span class="hljs-string">&quot;JavaScript-18&quot;</span>,<span class="hljs-string">&quot;Python-15&quot;</span>,<span class="hljs-string">&quot;C#-13&quot;</span>,<span class="hljs-string">&quot;C++-33&quot;</span>,<span class="hljs-string">&quot;C-50&quot;</span>);<br><br><span class="hljs-comment">// 遍历流中的数据</span><br>list.stream().forEach(item -&gt; System.out.print(item + <span class="hljs-string">&quot; &quot;</span>));<br><span class="hljs-comment">// 输出 Java-30 Html-20 JavaScript-18 Python-15 C#-13 C++-33 C-50</span><br></code></pre></td></tr></table></figure><ol><li>count - 统计</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;Java-30&quot;</span>,<span class="hljs-string">&quot;Html-20&quot;</span>,<span class="hljs-string">&quot;JavaScript-18&quot;</span>,<span class="hljs-string">&quot;Python-15&quot;</span>,<span class="hljs-string">&quot;C#-13&quot;</span>,<span class="hljs-string">&quot;C++-33&quot;</span>,<span class="hljs-string">&quot;C-50&quot;</span>);<br><br><span class="hljs-comment">// 统计数据流中的数据,返回值为long类型</span><br><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> list.stream().count();<br>System.out.println(count);<br><span class="hljs-comment">// 输出 7</span><br></code></pre></td></tr></table></figure><ol><li>toArray() - 收集数据放入数组中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;Java-30&quot;</span>,<span class="hljs-string">&quot;Html-20&quot;</span>,<span class="hljs-string">&quot;JavaScript-18&quot;</span>,<span class="hljs-string">&quot;Python-15&quot;</span>,<span class="hljs-string">&quot;C#-13&quot;</span>,<span class="hljs-string">&quot;C++-33&quot;</span>,<span class="hljs-string">&quot;C-50&quot;</span>);<br><br><span class="hljs-comment">// 如果方法内不写参数,默认返回Object类型的数据</span><br>String[] arr = list.stream().toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntFunction</span>&lt;String[]&gt;() &#123;<br>    <span class="hljs-comment">// IntFunction泛型可以选择自己需要的类型,apply返回值的类型需要保持一致</span><br>    <span class="hljs-comment">// apply()中的形参表示流中数据的个数,要跟数组的长度保持一致</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] apply(<span class="hljs-type">int</span> value) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[value];<br>    &#125;<br>&#125;);<br><br>System.out.println(Arrays.toString(arr));<br></code></pre></td></tr></table></figure><pre><code class="hljs">参数的作用:负责创建指定类型的数组方法的底层:依次得到流中的每个数据,放在数组中方法的返回值:一个装着流里面所有数据的数组</code></pre><ol><li>collect - 收集数据,放入集合中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;Java-30&quot;</span>,<span class="hljs-string">&quot;Html-20&quot;</span>,<span class="hljs-string">&quot;JavaScript-18&quot;</span>,<span class="hljs-string">&quot;Python-15&quot;</span>,<span class="hljs-string">&quot;C#-13&quot;</span>,<span class="hljs-string">&quot;C++-33&quot;</span>,<span class="hljs-string">&quot;C-50&quot;</span>);<br><br><span class="hljs-comment">// 收集到List集合中</span><br>List&lt;String&gt; newList = list.stream().collect(Collectors.toList());<br>System.out.println(newList);<br><br><span class="hljs-comment">// 收集到Set集合中</span><br>Set&lt;String&gt; newSet = list.stream().collect(Collectors.toSet());<br>System.out.println(newSet);<br><br><span class="hljs-comment">// 收集到Map集合中 - 规定谁作为key,谁作为value</span><br><span class="hljs-comment">// toMap()方法内需要规定Key的规则,value的规则</span><br><span class="hljs-comment">// Function内的第一个泛型类型对应apply()方法的参数类型,第二个泛型类型对应apply()返回值类型</span><br><span class="hljs-comment">// new Function()也可以使用Lambda简写</span><br>Map&lt;String, Integer&gt; map = list.stream().collect(Collectors.toMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;String,String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">apply</span><span class="hljs-params">(String t)</span> &#123;<br>        <span class="hljs-keyword">return</span> t.split(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;String,Integer&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(String t)</span> &#123;<br>        <span class="hljs-keyword">return</span> Integer.parseInt(t.split(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;));<br><br>System.out.println(map);<br></code></pre></td></tr></table></figure><p><strong>数据收集到Map集合中,key是不能重复的</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java进阶】 File，异常以及方法引用</title>
      <link href="/2025/04/12/Java/%E3%80%90Java%E8%BF%9B%E9%98%B6%E3%80%91File&amp;%E5%BC%82%E5%B8%B8%E4%BB%A5%E5%8F%8A%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/"/>
      <url>/2025/04/12/Java/%E3%80%90Java%E8%BF%9B%E9%98%B6%E3%80%91File&amp;%E5%BC%82%E5%B8%B8%E4%BB%A5%E5%8F%8A%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="文件路径表示方式"><a href="#文件路径表示方式" class="headerlink" title="文件路径表示方式"></a>文件路径表示方式</h2><ol><li>绝对路径: 基于某一盘符下的完整路径</li><li><p>相对路径: 相对于某一文件来说的相对路径</p><ul><li>使用单元测试方法: 相对于module来说</li><li>使用main()方法: 相对于project来说</li></ul></li></ol><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>使用构造函数传入一个文件/文件夹路径可以创建一个对应路径的文件/文件夹对象</p><ol><li>File(String pathname)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建文件对象</span><br><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\xiaohu\\Desktop\\Java.txt&quot;</span>);<br><br>System.out.println(file);<br></code></pre></td></tr></table></figure><ol><li>File(String parent, String child)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建文件对象</span><br><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\xiaohu\\Desktop&quot;</span>,<span class="hljs-string">&quot;Java.txt&quot;</span>);<br><br>System.out.println(file);<br></code></pre></td></tr></table></figure><ol><li>File(File parent, String child)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建文件夹对象</span><br><br><span class="hljs-type">File</span> <span class="hljs-variable">files</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\xiaohu\\Desktop&quot;</span>);<br><br><span class="hljs-comment">// 创建文件夹内的文件对象</span><br><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(files,<span class="hljs-string">&quot;Java.txt&quot;</span>);<br><br>System.out.println(file);<br></code></pre></td></tr></table></figure><p><strong>第一个参数一定需要是文件夹对象,否则就会出现异常</strong></p><h2 id="常用API方法获取基本信息"><a href="#常用API方法获取基本信息" class="headerlink" title="常用API方法获取基本信息"></a>常用API方法获取基本信息</h2><div class="table-container"><table><thead><tr><th>方法</th><th>使用</th></tr></thead><tbody><tr><td>public String getName()</td><td>获取文件名</td></tr><tr><td>public String getPath()</td><td>获取文件路径</td></tr><tr><td>public String getAbsolutePath()</td><td>获取文件绝对路径</td></tr><tr><td>public File getAbsoluteFile()</td><td>获取绝对路径表示的文件</td></tr><tr><td>public String getParent()</td><td>获取上层文件夹路径,如果没有返回null</td></tr><tr><td>public long length()</td><td>获取文件长度(字节数),不能获取目录长度</td></tr><tr><td>public long lastModified()</td><td>获取文件最后一次修改的时间(毫秒)</td></tr></tbody></table></div><h2 id="获取文件夹内的所有文件-文件夹"><a href="#获取文件夹内的所有文件-文件夹" class="headerlink" title="获取文件夹内的所有文件/文件夹"></a>获取文件夹内的所有文件/文件夹</h2><div class="table-container"><table><thead><tr><th>方法</th><th>使用</th></tr></thead><tbody><tr><td>public String[] list()</td><td>返回一个String数组,表示该文件夹中的所有文件/文件夹</td></tr><tr><td>public File[] listFile()</td><td>返回一个File数组,表示该文件夹中的所有文件/文件夹</td></tr></tbody></table></div><h2 id="文件-文件夹判断方法"><a href="#文件-文件夹判断方法" class="headerlink" title="文件/文件夹判断方法"></a>文件/文件夹判断方法</h2><div class="table-container"><table><thead><tr><th>方法</th><th>使用</th></tr></thead><tbody><tr><td>public boolean exists()</td><td>此对象表示的文件/文件夹是否存在</td></tr><tr><td>public boolean isDirectory()</td><td>该File对象是否为文件夹</td></tr><tr><td>public boolean isFile()</td><td>该File对象是否为文件</td></tr><tr><td>public boolean canRead()</td><td>是否可读</td></tr><tr><td>public boolean canWrite()</td><td>是否可写</td></tr><tr><td>public boolean isHidden()</td><td>是否隐藏</td></tr></tbody></table></div><h2 id="创建-amp-amp-删除"><a href="#创建-amp-amp-删除" class="headerlink" title="创建&amp;&amp;删除"></a>创建&amp;&amp;删除</h2><div class="table-container"><table><thead><tr><th>方法</th><th>使用</th></tr></thead><tbody><tr><td>public boolean createNewFile()</td><td>创建文件,创建成功返回true,创建失败返回false</td></tr><tr><td>public boolean mkdir()</td><td>创建文件夹</td></tr><tr><td>public boolean mkdirs()</td><td>创建多级文件夹(也可以创建单个文件夹)</td></tr><tr><td>public boolean delete()</td><td>删除文件/文件夹</td></tr></tbody></table></div><ol><li>删除不走回收站</li><li>要删除文件夹必须是<code>空文件夹</code>,否则删除失败</li></ol><h2 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常?"></a>什么是异常?</h2><p>异常就代表程序出现问题。学习异常不是为了程序不出异常,而是如何处理异常。</p><pre><code class=" mermaid">erDiagram&quot;Java.lang.Throwable&quot; ||--|&#123; Error : &quot;&quot;&quot;Java.lang.Throwable&quot; ||--|&#123; Exception : &quot;&quot;Exception ||--|&#123; RuntimeException : &quot;&quot;Exception ||--|&#123; &quot;其他异常&quot; : &quot;&quot;</code></pre><ol><li>Error: 代表系统级别的错误(属于严重问题), 开发人员不用管</li><li>Exception: 异常, 代表程序可能出现错误, 通常使用Exception以及它的子类封装程序出现的异常</li><li>RuntimeExcepton: 运行时异常, 运行时出现的异常</li><li>其他异常: 编译时异常, 编译时出现的异常, 除了RuntimeException和它的子类,其他的都是编译时异常</li></ol><h2 id="异常处理方式"><a href="#异常处理方式" class="headerlink" title="异常处理方式"></a>异常处理方式</h2><ol><li>JVM虚拟机默认的处理方式</li></ol><p>把异常名称,异常原因以及异常抛出的位置打印在控制台,并且停止程序运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        System.out.println(<span class="hljs-number">2</span>/<span class="hljs-number">0</span>);<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//Exception in thread &quot;main&quot; java.lang.ArithmeticException: / by zero</span><br><span class="hljs-comment">//at App.main(App.java:4)</span><br></code></pre></td></tr></table></figure><ol><li>自己处理(捕获异常)</li></ol><p>自己处理的方式可以当程序出现异常时, 捕获异常并且让程序继续运行, 不会停止程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;;<br>        <br>        <span class="hljs-comment">// 捕获异常</span><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-comment">// 出现异常的代码</span><br><br>            System.out.println(arr[<span class="hljs-number">10</span>]);<br><br>        &#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;<br><br>            <span class="hljs-comment">// catch内需要传递出现的异常参数, 出现的是哪一类异常写哪一类即可</span><br><br>            <span class="hljs-comment">// 如果出现 ArrayIndexOutOfBoundsException 异常, 该如何处理</span><br><br>            System.out.println(<span class="hljs-string">&quot;出现 索引越界 异常&quot;</span>);<br><br>            <span class="hljs-comment">// e为异常信息：java.lang.ArrayIndexOutOfBoundsException: Index 10 out of bounds for length 6</span><br><br>            System.out.println(e);<br><br>        &#125;<br><br>        <span class="hljs-comment">// 异常处理完毕之后,程序会继续往后执行</span><br>        System.out.println(<span class="hljs-string">&quot;程序运行中...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>如果try中没有出现问题,会运行try中的代码,catch中的代码不会出现</li><li>如果出现多个异常,可以使用<code>try..catch..catch..</code>捕获多个异常(如果多个异常中,出现父子关系,父类需要写在下面)</li></ol><h2 id="异常中的常见方法"><a href="#异常中的常见方法" class="headerlink" title="异常中的常见方法"></a>异常中的常见方法</h2><div class="table-container"><table><thead><tr><th>方法</th><th>使用</th></tr></thead><tbody><tr><td>getMessage()</td><td>返回异常详细信息字符串</td></tr><tr><td>toString()</td><td>返回可抛出的简短描述</td></tr><tr><td>printStackTrace()</td><td>把异常错误信息输出在控制台</td></tr></tbody></table></div><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><ol><li>throws: 写在方法定义处,告诉调用者,使用本方法可能出现哪些异常</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> 方法() <span class="hljs-keyword">throws</span> 异常类名<span class="hljs-number">1</span>,异常类名<span class="hljs-number">2.</span>...&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>thorw: 写在方法内,结束方法,手动抛出异常对象,交给调用者,方法中以下的代码将不会执行</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> 方法&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ol><li>定义异常类</li><li>编写继承关系</li><li>空参构造以及带参构造</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 运行时异常继承RuntimeException, 编译时异常直接继承Exception即可</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CusException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;<br>    <span class="hljs-comment">// 自定义异常类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CusException</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CusException</span><span class="hljs-params">(String message)</span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关于输出语句"><a href="#关于输出语句" class="headerlink" title="关于输出语句"></a>关于输出语句</h2><ol><li>正常的输出语句</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.print(<span class="hljs-string">&quot;Java&quot;</span>)<br></code></pre></td></tr></table></figure><ol><li>错误的输出语句</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.err.print(<span class="hljs-string">&quot;Java&quot;</span>)<br></code></pre></td></tr></table></figure><p>错误的输出语句会将输出的信息以红色的字体打印,会比正常的输出语句先打印</p><h2 id="什么是方法引用"><a href="#什么是方法引用" class="headerlink" title="什么是方法引用?"></a>什么是方法引用?</h2><p>把已经有的方法,拿来使用,当做函数式接口中抽象方法的方法体。</p><p>方法引用的条件:</p><ol><li>引用处必须是<code>函数式接口</code></li><li>被引用的方法必须已经存在</li><li>被引用的方法,形参与返回值必须与抽象方法保持一致</li><li>被引用的方法功能要能满足当前需求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建一个数组,进行倒序排列</span><br>        Integer[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>&#125;;<br>        <span class="hljs-comment">// 匿名内部类写法</span><br>        Arrays.sort(arr,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<br>             <span class="hljs-meta">@Override</span><br>             <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>                 <span class="hljs-comment">// o1-o2为正序,o2-o1为倒序</span><br>                 <span class="hljs-keyword">return</span> o2 - o1;<br>             &#125;<br>        &#125;);<br>        System.out.println(Arrays.toString(arr));<br>        <span class="hljs-comment">// 输出[8, 7, 5, 4, 3, 1]</span><br>        <span class="hljs-comment">// Lambda表达式简写</span><br>        Arrays.sort(arr,(o1 , o2) -&gt; o2 - o1);<br>        System.out.println(Arrays.toString(arr));<br>        <span class="hljs-comment">// 输出[8, 7, 5, 4, 3, 1]</span><br>        <span class="hljs-comment">// 方法引用</span><br>        <span class="hljs-comment">// 表示把App类里面的subtraction方法当做抽象方法的方法体</span><br>        Arrays.sort(arr,App::subtraction);<br>        System.out.println(Arrays.toString(arr));<br>        <span class="hljs-comment">// 输出[8, 7, 5, 4, 3, 1]</span><br>    &#125;<br>    <span class="hljs-comment">// 被引用的方法 - 可以是Java已经写好的,也可以是Java的第三方类</span><br>    <span class="hljs-comment">// 形参与返回值需要与抽象方法的形参与返回值类型一致</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">subtraction</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>&#123;<br>        <span class="hljs-keyword">return</span> num2 - num1;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="引用静态方法"><a href="#引用静态方法" class="headerlink" title="引用静态方法"></a>引用静态方法</h3><p>格式是 - 类名::静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>);<br><span class="hljs-comment">// 将字符串转化为数字类型</span><br><span class="hljs-comment">// 引用Integer内的parseInt方法,</span><br><span class="hljs-comment">// parseInt是内部静态方法,参数与返回值类型都与抽象方法相同,功能也一样,在此处就可以引用</span><br>list.stream().map(Integer::parseInt).forEach(item -&gt; System.out.print(item + <span class="hljs-string">&quot; &quot;</span>));<br><span class="hljs-comment">// 输出1 2 3 4 5</span><br></code></pre></td></tr></table></figure><h3 id="引用成员方法"><a href="#引用成员方法" class="headerlink" title="引用成员方法"></a>引用成员方法</h3><p>格式是 - 对象::成员方法</p><ol><li>其他类的: 其他类对象::方法名</li><li>本类的: this::方法名(引用处不能是静态方法,静态方法内没有this关键字)</li><li>父类的e: super::方法名</li><li>引用构造方法: 类名::new</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.function.Predicate;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list, <span class="hljs-string">&quot;Java&quot;</span>,<span class="hljs-string">&quot;Python&quot;</span>,<span class="hljs-string">&quot;Javascript&quot;</span>,<span class="hljs-string">&quot;Html&quot;</span>,<span class="hljs-string">&quot;CSS&quot;</span>);<br>        <span class="hljs-comment">// 将字符串转化为数字类型</span><br>        <span class="hljs-comment">// 引用其他类成员方法</span><br>        list.stream().filter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringOperation</span>()::StringJudeg).forEach(item -&gt; System.out.print(item + <span class="hljs-string">&quot; &quot;</span>));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringOperation</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">StringJudeg</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-keyword">return</span> s.startsWith(<span class="hljs-string">&quot;J&quot;</span>) &amp;&amp; s.length() == <span class="hljs-number">4</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="引用构造方法"><a href="#引用构造方法" class="headerlink" title="引用构造方法"></a>引用构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.function.Predicate;<br><span class="hljs-keyword">import</span> java.util.stream.Collector;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list, <span class="hljs-string">&quot;刘备,49&quot;</span>,<span class="hljs-string">&quot;刘邦,57&quot;</span>,<span class="hljs-string">&quot;刘禅,25&quot;</span>);<br>        <span class="hljs-comment">// 封装成Student对象，并收集到List集合, 引用构造方法</span><br>        List&lt;Student&gt; list2 = list.stream().map(Student::<span class="hljs-keyword">new</span>).collect(Collectors.toList());<br>        System.out.println(list2);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">// 引用构造方法时,返回值不需要管,</span><br>    <span class="hljs-comment">// 只需要保证,构造方法结束后生成的返回值与抽象方法返回值一致就可以</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String str)</span> &#123;<br>        String[] arr = str.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-built_in">this</span>.age = Integer.parseInt(arr[<span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类名引用成员方法"><a href="#类名引用成员方法" class="headerlink" title="类名引用成员方法"></a>类名引用成员方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(list, <span class="hljs-string">&quot;Java&quot;</span>,<span class="hljs-string">&quot;Python&quot;</span>,<span class="hljs-string">&quot;Html&quot;</span>,<span class="hljs-string">&quot;CSS&quot;</span>,<span class="hljs-string">&quot;Vue&quot;</span>);<br><span class="hljs-comment">// 将字母全部转化为大写, 类名引用成员方法 ？？？</span><br><span class="hljs-comment">// 使用流内的每一个数据去调用String内的toUpperCase, 方法的返回值就是转换之后的结果</span><br>list.stream().map(String::toUpperCase).forEach(item -&gt; System.out.print(item + <span class="hljs-string">&quot; &quot;</span>));<br><span class="hljs-comment">// JAVA PYTHON HTML CSS VUE</span><br></code></pre></td></tr></table></figure><p>类引用成员方法独有规则:</p><ol><li>是函数式接口</li><li>被引用的方法必须已经存在</li><li>被引用方法的形参,需要与抽象方法第二个新参到最后一个形参,返回值保持一致</li><li>功能需要满足需求</li></ol><blockquote><p>抽象方法参数详解:第一个参数表示引用方法的调用者,决定了可以引用哪些类中的数据,在Stream流中,第一个参数表示流中的每一个数据。假设流内的数据为字符串,使用这种方式只能引用String类内的方法。第二个参数到最后的参数,跟引用方法的形参保持一致,如果没有,说明被引用的方法需要是无参的方法。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础】集合</title>
      <link href="/2025/03/28/Java/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E9%9B%86%E5%90%88/"/>
      <url>/2025/03/28/Java/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合:<code>存储对象的容器</code>,<code>存储对象</code>的<code>对象</code>。在数组中也可以存储对象,而用<code>Collection集合</code>存储对象,可以使对象有更多的特点和功能。特点是:容器的工具类,定义了对多个对象进行操作的方法。</p><p><code>Collection接口</code>的子类集合有些是允许有重复元素,有些没有。JDK不提供任何实现类直接实现此接口。Collection接口有很多抽象方法,是它子接口或者实现类共性的标准。</p><ol><li>特点:<br> 代表一组<code>任意类型</code>的对象,无序,无下标。</li><li>方法:<ol><li>.add(Object obj):添加一个对象return true or false</li><li>.addAll(Collection c):将一个集合中的所有元素添加进另外一个集合return true or false</li><li>.clear():清空集合 void</li><li>.contains(Object obj):判断集合中是否包含obj对象return true or false</li><li>.equals(Object obj):比较集合是否与指定对象相等return true or false</li><li>.isEmpty():判断此集合是否为空return true or false</li><li>.remove(Object obj):移除obj对象return true or false</li><li>.size():返回集合中的元素个数return int</li><li>.toArray():将集合转换为数组return Object[]</li></ol></li></ol><h3 id="List接口集合"><a href="#List接口集合" class="headerlink" title="List接口集合"></a>List接口集合</h3><p>List接口的特点:<code>有序</code>,<code>有下标</code>,<code>元素可重复</code>。</p><ol><li><code>.add(int index,Object obj)</code>-在index的位置上插上元素,<code>无返回值</code></li><li><code>.addAll(int index,Collection c)</code>-将一个集合中的元素添加到此集合中的index位置,返回boolean</li><li><code>.get(int index)</code>-获取指定位置的元素,返回Object</li><li><code>.subList(int fromIndex,int toIndex)</code>-返回它们之间的集合元素,返回List</li></ol><h4 id="ArrayList实现类"><a href="#ArrayList实现类" class="headerlink" title="ArrayList实现类"></a>ArrayList实现类</h4><p>ArrayList实现类遵循Collection和List接口的标准,所以ArrayList实现类具备<code>有序</code>,<code>有下标</code>,<code>元素可重复</code>三种特点。<code>底层是数据结构实现,查询快,增删慢</code>。</p><p><strong>注:当在中间插入元素时,后面的每个元素需要往后按顺序移动。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;E&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><p><strong>注意其中<code>&lt;E&gt;</code>代表<code>泛型</code>。Java中,泛型通过&lt;&gt;来指定类型参数,如:ArrayList<String></strong></p><p>List接口的可调整数组大小实现。实现所有可选列表操作,并允许所有元素,包括null。除了实现List接口外,此类还提供一些方法来操作内部用于存储列表数据的大小。(这个类类似于Vertor,除了它是不同步的,所以在<code>线程不安全,但是运行效率快</code>)。</p><p><strong>ArrayList的构造方法:</strong></p><ol><li>ArrayList():构造一个初始容量为10的空列表。</li><li>ArrayList(int initialCapacity):构造一个具有指定初始容量的空列表。</li><li>ArrayList(Collection&lt;? extends E&gt; c):构造一个包含指定集合元素的列表,按照集合迭代器返回元素顺序。</li></ol><p><strong>注意:ArrayList实现类底层是一个数组;数组结构实现,查询快,增删慢。JDK6初始容量为10,JDK7初始容量改为0。？一开始初始化容量为10的话,不使用那么容器就会造成资源浪费,初始化改为0,只需添加一个元素会自动+1。</strong></p><blockquote><p>集合中只能包含引用数据类型,无法包含基础数据类型,想要集合中写入基础数据类型,需要通过<code>包装类</code>(用于将基本数据类型封装成数据类)。除了以下两个,剩下的只需将首字母大写就好了</p></blockquote><ol><li>Integet — 用于包装整形(int)</li><li>Character — 用于包装字符类型(char)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;<span class="hljs-type">int</span>&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-comment">// 报错,因为集合无法包含基础数据类型,需要采取包装类</span><br><br>ArrayList&lt;Integer&gt; List <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h4 id="Vector实现类"><a href="#Vector实现类" class="headerlink" title="Vector实现类"></a>Vector实现类</h4><p>Vector实现类与ArrayList实现类一样,都是<code>有序,有下标,元素可重复</code>,底层都是<code>数组结构实现,查询快,增删慢</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><blockquote><p>Vector与ArrayList类的区别在于:Vector的线程是安全的,但运行速率慢,而ArrayList类是不安全的,但运行速率快。如果不考虑线程安全问题,可以使用ArrayList代替Vector。</p></blockquote><h4 id="LinkedList实现类"><a href="#LinkedList实现类" class="headerlink" title="LinkedList实现类"></a>LinkedList实现类</h4><p>LinkedList实现类同样具备<code>有序,有下标,元素可重复</code>的特点。底层是<code>链表结构实现,查询慢,增删快。</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; link = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><p>所有操作的执行都符合双向链表的预期。索引都列表中的操作将从开头或结尾遍历列表,以更接近指定索引的为准。</p><p><strong>在中间插入元素时,无需移动元素,直接开辟空间让前面的元素指向该空间</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础】字符串</title>
      <link href="/2025/03/27/Java/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2025/03/27/Java/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h3><p>单个字符需要使用<code>char</code>类型保存,多个字符组成的文本需要保存在<code>String</code>对象中。String通常被称为字符串,一个String对象最多可以保存<code>(2^32-1)</code>个字节的内容。</p><h3 id="声明字符串"><a href="#声明字符串" class="headerlink" title="声明字符串"></a>声明字符串</h3><p>在Java中,字符串必须被包含在一对<code>&quot;&quot;</code>之内。字符串可以是系统能够显示的任何信息,甚至可以是单个字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br></code></pre></td></tr></table></figure><p>声明的字符串必须被<code>初始化</code>才能使用,不然编译器会报错。</p><h3 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h3><ol><li><p>直接创建:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>通过new来创建:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 甚至可以传入一个字符数组</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>])<br></code></pre></td></tr></table></figure></li></ol><h3 id="连接多个字符串"><a href="#连接多个字符串" class="headerlink" title="连接多个字符串"></a>连接多个字符串</h3><p>连接多个字符串,只需要使用<code>+</code>连接即可。连接其他数据类型,也是通过<code>+</code>连接即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;Hello&quot;</span> + <span class="hljs-string">&quot;World&quot;</span>);<br></code></pre></td></tr></table></figure></p><h3 id="获取字符串信息"><a href="#获取字符串信息" class="headerlink" title="获取字符串信息"></a>获取字符串信息</h3><h4 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h4><p>通过String类中的<code>length()</code>方法可以获取声明的字符串长度(包括字符串中的空格)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>str.length(); <span class="hljs-comment">// 11</span><br></code></pre></td></tr></table></figure><h4 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h4><p>String类提供两种查找字符串的方法:<code>indexOf()</code>和<code>lastIndexOf()</code>,这两种方法都允许在字符串中<code>查找指定条件的字符或者字符串</code>。indexOf()方法返回的是搜索的字符或者字符串<code>首次出现的索引位置</code>,lastIndexOf()方法返回的是搜索的字符或者字符串<code>最后一次出现的索引位置</code>。</p><ol><li>indexOf(String str) 与 lastIndexOf(String str)</li></ol><p>如果没有查找到指定的字符或者字符串,<code>返回的值为-1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br><br>        System.out.println(str.indexOf(<span class="hljs-string">&#x27;l&#x27;</span>)); <span class="hljs-comment">// 输出2,即第一次&#x27;l&#x27;出现的索引位置</span><br>        System.out.println(str.lastIndexOf(<span class="hljs-string">&#x27;l&#x27;</span>)); <span class="hljs-comment">// 输出9,即最后一次&#x27;l&#x27;出现的索引位置</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="获取指定索引位置的字符"><a href="#获取指定索引位置的字符" class="headerlink" title="获取指定索引位置的字符"></a>获取指定索引位置的字符</h4><p>使用<code>charAt()</code>方法可以将指定索引处的方法返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">str.charAt(<span class="hljs-type">int</span> index);<br></code></pre></td></tr></table></figure><h3 id="操作字符串"><a href="#操作字符串" class="headerlink" title="操作字符串"></a>操作字符串</h3><h4 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h4><p>通过String类的<code>substring()</code>方法可以对字符串进行截取。</p><p><strong>substring(int beginIndex,int endIndex)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">str.substring(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>); <span class="hljs-comment">// 该方法返回从指定索引位置开始,到指定索引位置结束的字符串。endIndex不传就是截取到字符串末尾</span><br></code></pre></td></tr></table></figure><h4 id="去除字符串中的空格"><a href="#去除字符串中的空格" class="headerlink" title="去除字符串中的空格"></a>去除字符串中的空格</h4><p><code>trim()</code>方法,可以去除字符串中的前后空格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;   Hello World   &quot;</span>;<br>str.trim(); <span class="hljs-comment">// &quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><h4 id="字符或字符串的替换"><a href="#字符或字符串的替换" class="headerlink" title="字符或字符串的替换"></a>字符或字符串的替换</h4><p><code>replace()</code>方法可以实现将字符串中指定的<code>字符或者字符串</code>全部<code>替换</code>为新的字符或字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">str.replace(<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>); <span class="hljs-comment">// HeLLo WorLd</span><br></code></pre></td></tr></table></figure><p><strong>第一个参数为指定的字符或字符串,第二个参数为要替换为的目标字符串</strong></p><h4 id="判断字符串的开始与结尾"><a href="#判断字符串的开始与结尾" class="headerlink" title="判断字符串的开始与结尾"></a>判断字符串的开始与结尾</h4><p><code>startsWith()</code>与<code>endsWith()</code>方法分别用于表示判断字符串是否已指定的字符或者字符串开始,返回值为boolean类型。</p><h5 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith()"></a>startsWith()</h5><p>判断字符串是否以指定字符或字符串开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">str.startsWith(<span class="hljs-string">&quot;H&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith()"></a>endsWith()</h5><p>判断字符串是否以指定字符或字符串结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">str.endsWith(<span class="hljs-string">&quot;d&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="判断字符串是否相等"><a href="#判断字符串是否相等" class="headerlink" title="判断字符串是否相等"></a>判断字符串是否相等</h4><p>对字符串对象进行比较不能只使用简单的<code>==</code>运算符,因为比较运算符比较的是两个字符串的地址是否相同,有时候<code>即便两个字符串的内容相同字符串的地址也是不同的</code>。</p><h5 id="equals-与-equalsIgnoreCase"><a href="#equals-与-equalsIgnoreCase" class="headerlink" title="equals() 与 equalsIgnoreCase()"></a>equals() 与 equalsIgnoreCase()</h5><p>如果只是判断两个字符串的内容是否相同,可以使用<code>equals()</code>方法与<code>equalsIgnoreCase()</code>方法。equals()方法比较两个字符串的内容是否相等,而equalsIgnoreCase()也可以比较内容,并且<code>是忽视大小写的</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;Hello World&quot;</span>.equals(<span class="hljs-string">&quot;hello world&quot;</span>); <span class="hljs-comment">// false</span><br><span class="hljs-string">&quot;Hello World&quot;</span>.equalsIgnoreCase(<span class="hljs-string">&quot;hello world&quot;</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="按字典顺序比较两个字符串"><a href="#按字典顺序比较两个字符串" class="headerlink" title="按字典顺序比较两个字符串"></a>按字典顺序比较两个字符串</h4><p><code>compareTo()</code>方法为<code>按字典顺序</code>比较两个字符串,该比较基于字符串中的各个字符的<code>Unicode</code>值,按字典顺序将对象表示的字符序列与参数字符串所表示的字符序列进行比较。如果String对象位于参数字符串之前,则结果为一个负数;如果String对象位于参数字符串之后,则结果为一个正数;如果相等,返回0,只有在equals()返回true的时候才会返回0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">str.compareTo(<span class="hljs-string">&quot;Hello&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="字母大小写转换"><a href="#字母大小写转换" class="headerlink" title="字母大小写转换"></a>字母大小写转换</h4><p>String类的<code>toLowerCase()方法</code>与<code>toUpperCase()方法</code>可以将字符串中的所有大写字母改为小写字母或者将所有的小写字母改为大写字母。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">str.toLowerCase(<span class="hljs-string">&quot;Hello World&quot;</span>); <span class="hljs-comment">// hello world</span><br>str.toUpperCase(<span class="hljs-string">&quot;Hello World&quot;</span>); <span class="hljs-comment">// HELLO WORLD</span><br></code></pre></td></tr></table></figure><h4 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h4><p>使用<code>split()</code>方法可以使字符串按指定的分割字符或字符串进行分割,并将分割后的结果存放在字符串数组中返回,<code>split()</code>方法提供两种分割形式。</p><h5 id="str-split-String-str1"><a href="#str-split-String-str1" class="headerlink" title="str.split(String str1)"></a>str.split(String str1)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;Hello World&quot;</span>.split(<span class="hljs-string">&quot;l&quot;</span>)<br></code></pre></td></tr></table></figure><p>如果想定义多个分割符,可以使用符号”|”,例如”,|=”</p><h5 id="str-split-String-str1-int-limit"><a href="#str-split-String-str1-int-limit" class="headerlink" title="str.split(String str1,int limit)"></a>str.split(String str1,int limit)</h5><p>根据分割字符进行分割,并且限制分割次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">str.split(<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><p>String类的format()方法用于创建<code>格式化字符串</code>,format()方法有两种重载形式。</p><h5 id="format-String-format-Object…-args"><a href="#format-String-format-Object…-args" class="headerlink" title="format(String format,Object… args)"></a>format(String format,Object… args)</h5><p>方法使用指定的格式化字符串和参数返回一个格式化字符串,格式化后的新字符串使用本地默认的语言环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">str.format(String format,Object... args)<br></code></pre></td></tr></table></figure><h4 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h4><div class="table-container"><table><thead><tr><th>转化符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>%te</td><td>一个月中的某一天(1~31)</td><td>2</td></tr><tr><td>%tb/%tB</td><td>月份简称/全称</td><td>Feb/February</td></tr><tr><td>%ta/%tA</td><td>星期简称/全称</td><td>Sun/Sunday</td></tr><tr><td>%tc</td><td>包括全部日期与时间信息</td><td>星期六 3月 29 13:44:00 CST 2025</td></tr><tr><td>%tY/ty</td><td>四位/两位年份</td><td>2025/25</td></tr><tr><td>%tj</td><td>一年中的第几天(001-366)</td><td>085</td></tr><tr><td>%tm</td><td>月份</td><td>03</td></tr><tr><td>%td</td><td>一个月中的某一天(01~31)</td><td>02</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br>        System.out.println(<span class="hljs-string">&quot;今年是:&quot;</span> + String.format(<span class="hljs-string">&quot;%tY&quot;</span>, date) + <span class="hljs-string">&quot;年&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;本月是:&quot;</span> + String.format(<span class="hljs-string">&quot;%tm&quot;</span>, date) + <span class="hljs-string">&quot;月&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;今日是:&quot;</span> + String.format(<span class="hljs-string">&quot;%td&quot;</span>, date) + <span class="hljs-string">&quot;号&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h4><div class="table-container"><table><thead><tr><th>转化符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>%tH</td><td>小时(0~23)</td><td>13</td></tr><tr><td>%tI</td><td>小时(1~12)</td><td>01</td></tr><tr><td>%tK</td><td>小时(1~12)</td><td>1</td></tr><tr><td>%tM</td><td>分钟</td><td>44</td></tr><tr><td>%tS</td><td>秒</td><td>00</td></tr><tr><td>%tL</td><td>毫秒</td><td>000</td></tr><tr><td>%tQ</td><td>纳秒</td><td>000000000</td></tr><tr><td>%tZ/tz</td><td>时区/时区缩写</td><td>+0800/CST</td></tr><tr><td>%tp</td><td>上午/下午</td><td>上午/pm</td></tr><tr><td>%ts</td><td>1970-01-01 00:00:00到现在的秒数</td><td>12064515</td></tr><tr><td>%tQ</td><td>1970-01-01 00:00:00到现在的毫秒数</td><td>12066889455</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br>        System.out.print(<span class="hljs-string">&quot;现在是:&quot;</span> + String.format(<span class="hljs-string">&quot;%tH&quot;</span>, date) + <span class="hljs-string">&quot;时&quot;</span>);<br>        System.out.print(String.format(<span class="hljs-string">&quot;%tM&quot;</span>, date) + <span class="hljs-string">&quot;分&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;&quot;</span> + String.format(<span class="hljs-string">&quot;%tS&quot;</span>, date) + <span class="hljs-string">&quot;秒&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="日期与时间常见组合"><a href="#日期与时间常见组合" class="headerlink" title="日期与时间常见组合"></a>日期与时间常见组合</h4><div class="table-container"><table><thead><tr><th>格式化字符串</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>%tF</td><td>“年-月-日”(4位年份)</td><td>2025-03-02</td></tr><tr><td>%tD</td><td>“年/月/日”(两位年份)</td><td>25/03/02</td></tr><tr><td>%tc</td><td>全部日期和时间信息</td><td>星期二 三月 25 15:20:00 CTS 2025</td></tr><tr><td>%tr</td><td>“时:分:秒 PM”</td><td>03:22:06 下午</td></tr><tr><td>%tT</td><td>“时:分:秒”</td><td>03:22:06</td></tr><tr><td>%tR</td><td>“时:分”</td><td>03:22</td></tr></tbody></table></div><h4 id="字符串生成器-StringBuilder"><a href="#字符串生成器-StringBuilder" class="headerlink" title="字符串生成器 StringBuilder"></a>字符串生成器 StringBuilder</h4><p>创建成功的字符串对象,其长度都是<code>固定的</code>,内容不能被修改与编译。虽然可以使用<code>+</code>达到字符串的拼接效果,但这样会产生一个新的String实例,<code>效率低</code>。而<code>可变的字符串序列StringBuilder类</code>可以大大提高频繁增加字符串的效率。</p><p>如果在程序中<code>频繁的附加字符串</code>,建议使用StringBuilder类。新创建的StringBuilder对象容量16字符,可自行指定初始长度,如果附加的字符超出容量,StringBuilder会自行增加容量,如果要输出字符串可以使用<code>toString()</code>方法。利用StringBuilder可以动态的执行字符串的增删改查操作。</p><h5 id="append-方法"><a href="#append-方法" class="headerlink" title="append()方法"></a>append()方法</h5><p>用于<code>向字符串生成器中追加内容</code>。通过重载,可以实现接收任何类型的参数或另一个字符串生成器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br><br>        str.append(<span class="hljs-string">&quot;World&quot;</span>); <span class="hljs-comment">// 拼接字符串</span><br><br>        System.out.println(str); <span class="hljs-comment">// HelloWorld</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="insert-index-str-方法"><a href="#insert-index-str-方法" class="headerlink" title="insert(index,str)方法"></a>insert(index,str)方法</h5><p>该方法用于向字符串指定位置<code>插入数据</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;Ho&quot;</span>);<br><br>        str.insert(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;ell&quot;</span>); <span class="hljs-comment">// 在H后面插入数据</span><br><br>        System.out.println(str); <span class="hljs-comment">// Hello</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="delete-start-end-方法"><a href="#delete-start-end-方法" class="headerlink" title="delete(start,end)方法"></a>delete(start,end)方法</h5><p><code>移除字符串中的字符</code>,从指定索引开始到指定索引结束<code>(不包括end索引的字符)</code>的字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;Hehujunxillo&quot;</span>);<br><br>        str.delete(<span class="hljs-number">2</span>,<span class="hljs-number">9</span>); <span class="hljs-comment">// 移除字符串</span><br><br>        System.out.println(str); <span class="hljs-comment">// Hello</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础】封装&amp;继承&amp;多态</title>
      <link href="/2025/03/26/Java/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E5%B0%81%E8%A3%85%E7%BB%A7%E6%89%BF%E5%A4%9A%E6%80%81/"/>
      <url>/2025/03/26/Java/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E5%B0%81%E8%A3%85%E7%BB%A7%E6%89%BF%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p>在所有面向对象编程中,基本都有三大特性:<code>封装</code>,<code>继承</code>,<code>多态</code>。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p><code>封装</code>就是将<code>对象的状态(数据)和行为(方法)打包在一起</code>,隐藏对象内部实现细节,只提供<code>公开的接口(getter,setter方法)</code>来与<code>对象进行交互</code>。</p><h3 id="访问权限修饰符"><a href="#访问权限修饰符" class="headerlink" title="访问权限修饰符"></a>访问权限修饰符</h3><p>在Java内,需要通过类的访问权限来实现封装,<code>访问权限修饰符</code>可以控制类,变量,方法或其他引用对象的访问级别。Java中有四种访问权限修饰符。</p><ol><li><code>private</code>:私有访问级别,只有同一个包中,同一个类才可以访问。</li><li><code>default</code>:默认级别,同一个包中,不同类也可以访问。</li><li><code>protected</code>:保护访问级别,不在同一个包中,只要是子类也可以访问。</li><li><code>public</code>:公共访问级别,任何地方都可以访问。</li></ol><p>一般情况下,成员变量定义<code>private</code>,成员方法定义<code>public</code>。</p><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p><code>包</code>其实就是一个文件夹,为了更好管理。将类划分,将多个类收集成一组就是一个包。在Java中,包是一种用来<code>组织与管理类和接口</code>的机制。可以为开发者提供一种<code>逻辑分组</code>的方式,使得代码更加模块化,结构化和易于管理。</p><h4 id="导包"><a href="#导包" class="headerlink" title="导包:"></a>导包:</h4><p>在Java内有许多内置类,如:<code>Date,Scanner</code>,需要使用<code>java.util.Date;</code>去导包。其实<code>java.util</code>就是包名,<code>Date</code>代表包中的类。</p><h4 id="自定义包"><a href="#自定义包" class="headerlink" title="自定义包:"></a>自定义包:</h4><ol><li>包名与代码路径的匹配。例如创建一个com.school.student的包,那么它对应的路径就是com/school/student。</li><li>包名尽量指定为唯一的名字(企业通常将自己企业的域名颠倒过来命名包名)。</li><li>当创建一个Java文件时,最上面的package语句就是指定该文件放在了那个包中。</li><li>如果一个类没有package语句,那么该类被放到默认包中。</li></ol><p>创建自定义包:右键<code>src</code>目录,选择<code>New Java Package</code>选项,输入包名即可</p><p><img src="https://pic1.imgdb.cn/item/67e379eb0ba3d5a1d7e37115.png" alt=""></p><p>创建好后就能看见创建的包目录了。在包目录内创建一个java文件,文件的顶部就会显示,该文件属于哪个包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 文件属于哪个包</span><br><span class="hljs-keyword">package</span> com.school.gzuhoaix;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><h4 id="static-修饰的成员变量"><a href="#static-修饰的成员变量" class="headerlink" title="static 修饰的成员变量"></a>static 修饰的成员变量</h4><p>static修饰的成员变量,称为<code>静态成员变量</code>。静态成员变量不属于某个具体的对象,而是<code>所有的对象共享的</code>。</p><ol><li><p>特征:</p><ol><li>又称<code>静态属性</code>,不属于某个具体的对象,是类的属性,所有对象共享。</li><li>静态成员变量可以<code>通过类名直接访问</code>,也可以通过对象访问(为了区分静态成员变量,一般不会使用对象访问,更推荐使用<code>类名访问</code>)</li><li>静态成员变量<code>存储在堆的静态区</code>中。</li><li>生命周期随着类的加载而被创建,随着类的卸载而被销毁。与对象无关。</li></ol></li><li><p>示例:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">// 静态成员变量</span><br>    <span class="hljs-keyword">static</span> String occupation;<br>&#125;<br></code></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 通过类访问静态成员变量</span><br>        System.out.println(Person.occupation);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>静态成员变量的初始化:</p><p> <code>静态成员变量一般不会在构造方法中初始化</code>。静态成员变量的初始化分为两种:<code>就地初始化</code>和<code>静态代码块初始化</code>。</p><ol><li>就地初始化:直接在定义静态成员变量时初始化赋值。</li><li><code>静态代码块初始化</code>:理解了代码块就知道了。</li></ol></li></ol><h4 id="static-修饰成员方法"><a href="#static-修饰成员方法" class="headerlink" title="static 修饰成员方法"></a>static 修饰成员方法</h4><p>在封装中,类的成员变量一般都设置为<code>private</code>,而成员方法设置为<code>public</code>,当成员变量被设置为private后,在其他类中,就不能直接访问,而是需要借助成员方法来进行访问。<br>与静态成员变量一样,在Java中static修饰的方法被称为静态成员方法,是类的方法,而不是某个特有对象的方法。<code>静态成员变量一般通过静态成员方法来访问</code>。<code>通过类名调用</code>,不推荐使用对象调用。</p><ol><li><p>注意:</p><ol><li>静态方法不需要对象调用,所以<code>不能传递this</code>。</li><li><code>静态方法</code>中不能调用任何<code>非静态成员变量</code>。</li><li>静态方法中不能调用任何<code>非静态方法</code>,但是可以在任何非静态方法中调用静态方法。</li></ol></li><li><p>示例:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">// 静态成员变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">occupation</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;网站开发&quot;</span>;<br><br>    <span class="hljs-comment">// 静态成员方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getOccupation</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> occupation;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 通过类访问静态成员方法获取静态成员变量</span><br>        System.out.println(Person.getOccupation());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><h4 id="普通代码块"><a href="#普通代码块" class="headerlink" title="普通代码块"></a>普通代码块</h4><p>普通代码块就是定义在方法中的,拿<code>&#123;&#125;</code>包裹着的一段代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;World!!!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实例化代码块"><a href="#实例化代码块" class="headerlink" title="实例化代码块"></a>实例化代码块</h4><p>又叫构造代码块,一般用于<code>初始化实例成员变量</code>的时候。<code>实例化代码块的执行顺序优先于构造函数</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">// 静态成员变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">occupation</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;网站开发&quot;</span>;<br>    String name;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;实例化代码块&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;张三&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h4><p><code>静态代码块</code>就是static定义的代码块,一般用于<code>初始化静态成员变量</code>。静态代码块的执行顺序优先于构造代码块。(静态代码块 -&gt; 构造代码块 -&gt; 构造函数)。静态代码块只会执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">// 静态成员变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String occupation;<br>    String name;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;静态代码块&quot;</span>);<br>        <span class="hljs-comment">// 初始化静态成员变量</span><br>        occupation = <span class="hljs-string">&quot;网站开发&quot;</span>;<br>    &#125;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;实例化代码块&quot;</span>);<br>        <span class="hljs-comment">// 初始化成员变量</span><br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;张三&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><ol><li>静态代码块只会执行一次。</li><li>如果一个类中定义了多个静态代码块,编译时,编译器会按照定义的先后顺序执行。</li><li>静态成员变量是类的属性,所以是在JVM加载类时开辟空间初始化的。</li><li>实例代码块只有在创建对象时才会执行,构造方法也是。</li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>程序世界中使用类对现实世界的实体来进行描述,而使用类实例化出来的对象就可以表示一个又一个的实体。但现实世界错综复杂,不同的实物之间又可能会存在一些联系。比如:手机,如今国内手机行业不像国外人均苹果,三星,国内有小米,华为,VIVO,OPPO,苹果…品牌。这些品牌它们都属于手机类,但它们又都有属于自己的特点,比如:苹果比较流畅,小米性价比高,vivo听说拍照比较不错之类的。这时候如果还与之前一样创建一个类存放这些手机,那这个类未免有些杂乱了。可如果定义三个类分别表示这些手机,那就会发现这三个类中有很多重复的代码。这时就可以使用<code>继承</code>,也就是将三个类中的<code>重复代码抽离出来</code>,放在一个父类,然后让这三个类继承自这个父类。</p><p>在Java中,如果要表示类之间的继承关系,需要借助<code>extends</code>关键字。继承的好处,就是可以<code>对代码进行复用</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-comment">// 所有手机都有的成员变量</span><br>    <span class="hljs-type">int</span> price;<br>    String phoneName;<br>    String brand;<br><br>    <span class="hljs-comment">// 手机都有的成员方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打电话&quot;</span>);<br>    &#125;;<br>&#125;<br><br><span class="hljs-comment">// 小米手机继承手机类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">XiaoMi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Phone</span>&#123;<br>    <span class="hljs-comment">// 小米手机独有的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cheap</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;只要1999&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Phone</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apple</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;手机很流畅&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vivo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Phone</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">vivo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;手机拍照不错&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 实例化小米手机</span><br>        <span class="hljs-type">XiaoMi</span> <span class="hljs-variable">xiaomi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XiaoMi</span>();<br>        <span class="hljs-comment">// 声明手机类共有的成员变量</span><br>        xiaomi.price = <span class="hljs-number">1999</span>;<br>        xiaomi.phoneName = <span class="hljs-string">&quot;小米5s&quot;</span>;<br>        xiaomi.brand = <span class="hljs-string">&quot;小米手机&quot;</span>;<br><br>        <span class="hljs-comment">// 使用所有手机类共有的成员方法</span><br>        xiaomi.call();<br>        <span class="hljs-comment">// 使用小米手机类独有的成员方法</span><br>        xiaomi.cheap();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>注意:<ol><li>子类会将父类父类中的<code>成员变量</code>或者<code>成员方法</code>继承到子类中。</li><li>子类继承父类之后,必须要新添加自己特有的成员,体现出与父类的不同,否则就没有必要继承了。</li></ol></li></ol><h3 id="父类成员变量与成员方法的访问"><a href="#父类成员变量与成员方法的访问" class="headerlink" title="父类成员变量与成员方法的访问"></a>父类成员变量与成员方法的访问</h3><ol><li>子类中存在而父类中不存在的成员变量,直接访问即可。</li><li><p>子类中存在父类中也存在的同名成员变量,此时直接访问会优先访问子类中的成员变量。</p></li><li><p><code>子类方法中</code>或者<code>通过子类对象访问成员</code>时:</p><ol><li>如果访问的成员变量子类中有时,优先访问子类的成员变量。</li><li>如果访问的成员变量子类中没有,则访问父类继承的,如果依然没有就会有语法错误。</li><li>访问的成员变量与父类的成员变量同名,<code>优先访问自己的</code>。</li></ol></li><li><p>访问成员方法时:</p><ol><li>通过子类对象访问父类与子类中不同名的方法时,依然是优先访问子类,其次才是父类。</li><li>通过派生类对象访问父类与子类同名方法时,如果父类与子类同名方法参数列表不同(重载),根据传递的参数选择合适的访问即可。</li></ol></li></ol><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>有时子类与父类中,可能存在相同名称的成员,如果要在子类方法中访问父类中的<code>同名成员变量</code>,一般情况是访问不到的。Java提供了<code>super</code>关键字,该关键字的主要作用就是在子类中访问父类的成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Train</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Car</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">5000</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSpedd</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 此时获取到的speed属性,就是Car类中的speed属性</span><br>        System.out.println(<span class="hljs-built_in">super</span>.speed); <span class="hljs-comment">// 2000</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在子类中获取父类的同名成员变量只需要借助<code>super</code>即可。只能在<code>非静态方法与非静态代码块</code>中使用。</p><h3 id="子类构造方法"><a href="#子类构造方法" class="headerlink" title="子类构造方法"></a>子类构造方法</h3><p>子类对象构造时,需要<code>先执行父类的构造方法</code>,然后在执行子类的构造方法。原因是子类对象中的成员是由两部分组成的,父类继承的以及子类新增的。所以构造子类时,需要先调用父类的构造函数,将从<code>父类继承下来的成员</code>构造完整,然后再调用子类自己的构造方法,将自己<code>新增的成员完成初始化</code>。<br>子类构造方法中<code>super()</code>可以调用父类构造方法,而且<code>super()</code>语句必须放在<code>第一行</code>(有点类似于this())。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-type">int</span> speed;<br><br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(<span class="hljs-type">int</span> speed)</span>&#123;<br>        <span class="hljs-built_in">this</span>.speed = speed;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Train</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Car</span>&#123;<br>    String color;<br><br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Train</span><span class="hljs-params">(<span class="hljs-type">int</span> speed,String color)</span>&#123;<br>        <span class="hljs-built_in">super</span>(speed);<br>        <span class="hljs-built_in">this</span>.color = color;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Train</span> <span class="hljs-variable">tr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Train</span>(<span class="hljs-number">2000</span>,<span class="hljs-string">&quot;red&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>若父类显示定义无参数或者默认的构造函数,则在子类构造函数的第一行默认有隐藏的super()调用。</li><li>如果父类构造函数带参,此时需要用户为子类手动定义构造方法,并在子类构造方法中选择合适的父类构造方法调用。</li><li>在子类构造方法中super(…)调用父类构造时,必须是子类构造函数中的第一条语句。</li><li>super(…)只能在子类构造方法中出现一次,并且不能和<code>this</code>同时出现。</li></ol><h3 id="super与this的区别"><a href="#super与this的区别" class="headerlink" title="super与this的区别"></a>super与this的区别</h3><p>super与this都可以在成员方法中用来访问:成员变量和调用其他的成员函数,都可以作为构造函数的第一条语句。</p><ol><li><p>相同点:</p><ol><li>都是Java中的关键字。</li><li>只能在类的<code>非静态方法</code>中使用,用来访问<code>非静态成员方法与字段</code>。</li><li>在构造函数中调用时,必须作为构造函数的第一条语句,<code>不能同时出现</code>。</li></ol></li><li><p>不同点:</p><ol><li>this是当前对象的引用,即调用当前实例方法的对象。super相当于子类中继承自父类的部分成员的引用。</li><li>在非静态的成员方法中,this用来访问<code>本类的方法与属性</code>,super用来访问<code>父类继承下来的方法与属性</code>。</li><li>在构造方法中:this(…)<code>用于调用本类构造函数</code>。super(…)用于调用父类构造函数,两者调用不能同时出现。</li><li>构造方法中一定会存在super(…)的调用(有父类的方法),用户不写也会默认增加,但this(…)用户不写就不会增加。</li></ol></li></ol><h3 id="初始化语句执行顺序"><a href="#初始化语句执行顺序" class="headerlink" title="初始化语句执行顺序"></a>初始化语句执行顺序</h3><ol><li>最先执行应该是<code>父类的静态代码块</code>,紧接着是<code>子类的静态代码块</code>。</li><li>父类实例化代码块与父类构造函数开始执行。</li><li>子类实例化代码块与子类构造函数执行。</li><li>第二次实例化子类对象时,父类与子类的静态代码块都不会在执行。</li></ol><h3 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h3><ol><li>单继承:也就是一个子类继承自一个父类。</li><li>多继承:一个子类继承自一个父类,而子类又被一个更小的类继承。</li><li>不同类继承同一个类:一个父类被多个子类同时继承。</li></ol><blockquote><p>注意:Java不支持一个子类同时继承自两个或两个以上的父类。在真正的项目开发中,往往业务会很复杂,类也会很多,类与类之间的关系也很复杂,一般不希望出现三层以上的继承关系,如果继承层太多,就需要考虑对面代码进行重构,想从语法上限制继承,可以使用”final”关键字。</p></blockquote><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><h4 id="final-修饰变量"><a href="#final-修饰变量" class="headerlink" title="final 修饰变量:"></a>final 修饰变量:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">AGE</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><p>final修饰的变量或字段,表示<code>常量</code>(即不能被修改)。final修饰的<code>常量最好使用全大写字母</code>。</p><h4 id="final修饰类"><a href="#final修饰类" class="headerlink" title="final修饰类:"></a>final修饰类:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>final 修饰的类<code>表示不能被继承</code>。也叫<code>封装类</code>。</p><h4 id="final-修饰方法"><a href="#final-修饰方法" class="headerlink" title="final 修饰方法:"></a>final 修饰方法:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>final 修饰的方法表示该方法<code>不能被重写</code>。</p><h3 id="继承与组合"><a href="#继承与组合" class="headerlink" title="继承与组合"></a>继承与组合</h3><p>与继承类似,组合也是一种表示类之间关系的方式,也能够达到代码重用的效果。组合并没有涉及到特殊的语法,<code>仅仅是将一个类的实例对象作为另一个类的成员变量</code>。<br>继承表示对象之间是…的关系,如:男人是人,女人是人。组合表示对象之间有…的关系,如:汽车有发动机,有轮胎。学校内有多个老师与同学,只有一位校长。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">School</span> &#123;<br>    <span class="hljs-comment">// 将别的类实例化对象作为此类成员变量</span><br>    <span class="hljs-keyword">public</span> Student[] students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">10</span>]; <span class="hljs-comment">// 多个学生</span><br>    <span class="hljs-keyword">public</span> Teacher[] teachers; <span class="hljs-comment">// 多个老师</span><br>    <span class="hljs-keyword">public</span> President president; <span class="hljs-comment">// 一位校长</span><br>&#125;<br><br><span class="hljs-comment">// 学生</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>&#125;<br><br><span class="hljs-comment">// 老师</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br><br>&#125;<br><br><span class="hljs-comment">// 校长</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">President</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是同一个行为具有<code>不同的表现形式</code>或形态的能力,同一个方法可以根据<code>发送对象</code>的不同采取不同的行为方式。总的来说多态就是事物的多种形态,一个对象在不同条件下所表现的不同形式。</p><ol><li><p>如何实现多态:</p><ol><li>在多态中必须存在<code>继承或实现关系</code>的子类和父类。</li><li>子类对父类的某些方法进行重新定义。</li><li>通过<code>父类的引用</code>调用重写的方法。</li></ol></li><li><p>格式:</p><ul><li>父类类名 变量名 = new 子类类名();</li><li>通过<code>变量名.方法名()</code>,这种格式来调用在<code>子类中重写</code>的方法。</li></ul></li></ol><h3 id="多态中的成员变量"><a href="#多态中的成员变量" class="headerlink" title="多态中的成员变量"></a>多态中的成员变量</h3><p><code>编译运行看左边,即看的是父类中的变量。</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Train</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Car</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Train</span>();<br><br>        System.out.println(car.speed); <span class="hljs-comment">// 此时打印的是父类中的变量,也就是1000</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>父类声明子类实例这种的<code>成员变量</code>,都是编译运行看左边,也就是获取到的是父类中的成员变脸。</p><h3 id="多态中的成员方法"><a href="#多态中的成员方法" class="headerlink" title="多态中的成员方法"></a>多态中的成员方法</h3><p><code>编译看左边,运行看右边</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Car is running&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Train</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Car</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>;<br>    <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Train is running&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Train</span>();<br><br>        System.out.println(car.speed); <span class="hljs-comment">// 此时打印的是父类中的变量,也就是1000</span><br>        car.run(); <span class="hljs-comment">// 此时输出&quot;Train is running&quot;,即调用的是子类中重写的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当子类的方法与父类的方法有<code>相同的名称</code>,<code>返回类型</code>,<code>参数列表</code>此时间就会发生<code>重写</code>现象,这是会<code>调用子类的成员方法</code>来取代父类的实现。这里只是针对子类与父类方法名相同的成员方法才会发生的情况。</p><h3 id="重写的注意事项"><a href="#重写的注意事项" class="headerlink" title="重写的注意事项"></a>重写的注意事项</h3><ol><li><code>方法名</code>必须相同</li><li><code>参数列表</code>必须相同(类型,个数,顺序)</li><li><code>返回值</code>必须相同,如果想要返回值类型不同,则返回关系类型必须为父子类关系。</li><li>父类<code>被private修饰</code>的方法,不能进行重写。</li><li>父类<code>被static修饰</code>的方法,不能进行重写。</li><li>父类<code>被final修饰</code>的方法,不能进行重写,此时这个方法被叫做<code>密封方法</code>。</li><li>构造方法不能重写。</li><li>访问修饰限定符private&lt;默认权限(即什么都不写)&lt; protected &lt; public子类的访问修饰限定符权限一定要大于等于父类,才能发生重写现象。</li></ol><p><strong>重写这个运行过程一般也被称为<code>动态绑定</code></strong></p><h3 id="多态特点"><a href="#多态特点" class="headerlink" title="多态特点"></a>多态特点</h3><ol><li>当子类与父类存在相同的成员变量时,编译器会访问<code>父类的成员变量</code></li><li>当子类与父类存在相同的成员方法时,此时会发生<code>重写</code>现象,编译器会访问子类中的成员方法</li><li>当子类中有方法,而父类没有时,则不能访问子类中独有的方法(也不是不行,需要一些手段)</li><li>子类与父类存在同名的<code>静态成员函数</code>时,访问的是<code>父类的成员函数</code></li><li>以上这些特点均是在<code>多态的情况下发生</code>的</li></ol><h2 id="引用类型转换"><a href="#引用类型转换" class="headerlink" title="引用类型转换"></a>引用类型转换</h2><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p><code>向上转型</code>是Java中常用的类型转换方式之一,也称为<code>自动类型转换</code>。这种类型转换发生在继承关系中,父子类之间,通常是将<code>子类对象转换为父类对象</code>。</p><p><strong>向上转型的三种方法：</strong></p><pre><code class="hljs">1. 直接赋值2. 方法传递的参数3. 返回值</code></pre><h4 id="直接赋值"><a href="#直接赋值" class="headerlink" title="直接赋值"></a>直接赋值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;red&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(<span class="hljs-type">int</span> speed, String color)</span>&#123;<br>        <span class="hljs-built_in">this</span>.speed = speed;<br>        <span class="hljs-built_in">this</span>.color = color;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Train</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Car</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Train</span><span class="hljs-params">(<span class="hljs-type">int</span> speed, String color)</span>&#123;<br>        <span class="hljs-built_in">super</span>(speed, color);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Train</span>(<span class="hljs-number">2000</span>,<span class="hljs-string">&quot;yellow&quot;</span>); <span class="hljs-comment">// 直接赋值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;red&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(<span class="hljs-type">int</span> speed, String color)</span>&#123;<br>        <span class="hljs-built_in">this</span>.speed = speed;<br>        <span class="hljs-built_in">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Car is running&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Train</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Car</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Train</span><span class="hljs-params">(<span class="hljs-type">int</span> speed, String color)</span>&#123;<br>        <span class="hljs-built_in">super</span>(speed, color);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Train is running&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Train</span>(<span class="hljs-number">2000</span>,<span class="hljs-string">&quot;yellow&quot;</span>); <span class="hljs-comment">// 直接赋值</span><br>        fun(car); <span class="hljs-comment">// 以car作为参数传值</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(Car car)</span>&#123;<br>        car.run(); <span class="hljs-comment">// 输出&quot;Train is running&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> fun(); <span class="hljs-comment">// 返回值</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Car <span class="hljs-title function_">fun</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Train</span>(<span class="hljs-number">2000</span>,<span class="hljs-string">&quot;red&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>以上就是向上转型的是那种方式,可以看出向上转型无法调用子类特有的方法,只能调用父类自己的方法,除非发生方法重写,否则无法调用。</p></blockquote><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>将一个子类对象向上转型可以当做父类对象使用,如果需要<code>调用子类特有的方法</code>,则只需将<code>父类对象在转换为子类对象</code>即可,这就是<code>向下转型</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Train</span>(<span class="hljs-number">2000</span>,<span class="hljs-string">&quot;yellow&quot;</span>);<br><br>        <span class="hljs-type">Train</span> <span class="hljs-variable">train</span> <span class="hljs-operator">=</span> (Train)car; <span class="hljs-comment">// 向下转型,将父类对象强制转换为子类</span><br><br>        train.run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>向下转型之后,不仅可以调用父类的方法,还可以<code>调用子类特有的方法</code>。</p><h4 id="向下转型缺点"><a href="#向下转型缺点" class="headerlink" title="向下转型缺点"></a>向下转型缺点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">speed</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;red&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(<span class="hljs-type">int</span> speed, String color)</span>&#123;<br>        <span class="hljs-built_in">this</span>.speed = speed;<br>        <span class="hljs-built_in">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Car is running&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Train</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Car</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Train</span><span class="hljs-params">(<span class="hljs-type">int</span> speed, String color)</span>&#123;<br>        <span class="hljs-built_in">super</span>(speed, color);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Train is running&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 新增一个子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Car</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Bus is running&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Train</span>(<span class="hljs-number">2000</span>,<span class="hljs-string">&quot;yellow&quot;</span>);<br><br>        <span class="hljs-type">Bus</span> <span class="hljs-variable">bus</span> <span class="hljs-operator">=</span> (Bus)car; <span class="hljs-comment">// 向下转型,将父类对象强制转换为子类</span><br><br>        bus.run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时代码虽然没有语法错误,但是运行之后就会报异常,即类型转换异常。</p><blockquote><p>Exception in thread “main” java.lang.ClassCastException: class Train cannot be cast to class Bus (Train and Bus are in unnamed module of loader ‘app’) at App.main(App.java:5)</p></blockquote><ol><li>在启动项中,向上转型的过程,car这个对象是由Train类所构造出来的</li><li>而在向下转型的过程中,把car这个对象转换为了Bus类对象</li><li>虽然Train和Bus都是Car的子类</li><li>但将Train对象转换为Bus对象还是不科学</li></ol><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>想要避免向下转型遇到的类型转换异常,可以使用<code>instanceof</code>关键字,instanceof关键字的作用就是检测其变量类型是否属于该数据类型或者他的子类类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Train</span>(<span class="hljs-number">2000</span>,<span class="hljs-string">&quot;yellow&quot;</span>);<br><br>        <span class="hljs-comment">// 判断car是否是Train类型或者Train子类类型</span><br>        <span class="hljs-keyword">if</span>(car <span class="hljs-keyword">instanceof</span> Train)&#123;<br>            <span class="hljs-type">Train</span> <span class="hljs-variable">train</span> <span class="hljs-operator">=</span> (Train)car;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络之间的通信原理</title>
      <link href="/2025/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E4%BA%92%E8%81%94%E7%BD%91%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
      <url>/2025/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E4%BA%92%E8%81%94%E7%BD%91%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="互联网"><a href="#互联网" class="headerlink" title="互联网"></a>互联网</h2><p><code>互联网(Internet)</code>是现代社会中<code>信息传递</code>,交流与商业活动的基础设施。它不仅是全球计算机网络的集合体,还连接着全球范围内的各种信息系统和服务。</p><h3 id="什么是Internet"><a href="#什么是Internet" class="headerlink" title="什么是Internet?"></a>什么是Internet?</h3><p>互联网是一个全球性的<code>计算机网络</code>,利用一套统一的<code>计算机协议(TCP/IP)</code>,连接无数个<code>局域网(LAN)</code>,<code>广域网(WAN)</code>以及其他类型网络。通过互联网,全球范围内的用户可以共享资源,进行数据交换,访问各种信息与服务。互联网本身并不同于’网络’,它是一个庞大分布广泛的计算机网络系统。由各种<code>网络设备(路由器,交换机,服务器...)</code>和<code>通信协议(IP协议,TCP协议,UDP协议...)</code>组成,利用这些设备与协议,不同设备之间可以实现跨地域的互联网通信。</p><h3 id="互联网工作原理"><a href="#互联网工作原理" class="headerlink" title="互联网工作原理"></a>互联网工作原理</h3><p>互联网核心工作原理包括<code>数据传输</code>,<code>地址分配</code>,<code>通信协议</code>…</p><h4 id="分层模型OSI与TCP-IP"><a href="#分层模型OSI与TCP-IP" class="headerlink" title="分层模型OSI与TCP/IP"></a>分层模型<code>OSI</code>与<code>TCP/IP</code></h4><p><code>互联网通信</code>通过分层模型进行管理,最常见的分层模型是<code>TCP/IP模型</code>与<code>OSI模型</code>,其中TCP/IP模型是互联网中标准协议栈。它由四个层次组成:</p><ol><li>应用层:提供网络服务与用户交互页面,如:HTTP,FIP,SMTP…</li><li>传输层:确保数据的可靠传输,常用的协议有TCP,UDP…</li><li>网络层:负责数据包的寻址和路由,做重要的协议是IP(Internet Protocol)</li><li>数据链路层:确保数据能够在物理网络上可靠传输,涉及物理地址(MAC地址)</li></ol><h4 id="数据传输流程"><a href="#数据传输流程" class="headerlink" title="数据传输流程"></a>数据传输流程</h4><p>互联网数据传输通常依赖于<code>数据包交换</code>技术。用户发送数据时,数据会被分割为多个小数据包,这些数据包在网络中通过不同的路由器和交换机进行转发。最终,这些数据包会在目的地组装为完整的数据流。</p><ol><li>分割数据:数据被分割为较小的数据包,每个数据包有一个头部,包含目的地址与其他控制信息</li><li>路由选择:数据包通过路由器传输,每个路由器根据路由表来决定数据包的转发路径。</li><li>数据接收与重组:目的设备收到数据包后,按照数据包头部信息将其重组为完整数据。</li></ol><h4 id="IP地址与域名系统-DNS"><a href="#IP地址与域名系统-DNS" class="headerlink" title="IP地址与域名系统(DNS)"></a>IP地址与域名系统(DNS)</h4><ol><li><p><code>IP地址</code>:每个连接到互联网的设备都有一个唯一的IP地址(Internet Protocol Address),它用来标识设备在网络中的位置。常见的IP地址格式有IPv4(192.168.0.1)和IPv6(2001:0db8:85a3:0000:0000:8a2e:0370:7334)。</p></li><li><p><code>DNS(域名系统)</code>:DNS系统将人类可读的域名(www.baidu.com)转化为计算机能够识别的IP地址。DNS相当互联网中的电话溥,帮助用户通过易记得地址访问网站。</p></li></ol><h3 id="互联网基础技术与协议"><a href="#互联网基础技术与协议" class="headerlink" title="互联网基础技术与协议"></a>互联网基础技术与协议</h3><p>互联网的高效运行依赖于多种基础技术与协议,它们决定了数据的传输方式,网络的管理和访问控制等。</p><h4 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h4><p><code>TCP/IP协议族</code>是互联网通信的基础协议,分为多个层次,常用的协议包括:</p><ol><li><p>TCP(传输控制协议):确保数据的可靠传输。TCP通过三次握手建立连接,确保数据按顺序到达目标,并进行错误检测和修复。</p></li><li><p>IP(互联网协议):负责数据包的寻址与路由,确保数据包能从源设备传送带目的设备。</p></li><li><p>UDP(用户数据报协议):与TCP类似,但不提供可靠性保障,适用于<code>实时应用</code>,如:视频流,语音通信…</p></li></ol><h4 id="HTTP-HTTPS协议"><a href="#HTTP-HTTPS协议" class="headerlink" title="HTTP/HTTPS协议"></a>HTTP/HTTPS协议</h4><ol><li><p><code>HTTP(超文本传输协议)</code>:用于网页数据传输。HTTP协议无状态,即每次请求与响应都是独立的,不会记住之前的请求信息。</p></li><li><p><code>HTTPS(安全超文本传输协议)</code>:是HTTP加密版本,使用<code>SSL/TLS协议</code>加密通信,保证数据在传输过程中的安全性。</p></li></ol><h4 id="FTP协议"><a href="#FTP协议" class="headerlink" title="FTP协议"></a>FTP协议</h4><p><code>FTP(文件传输协议)</code>用于在互联网中传输文件。用户可以通过FTP客户端与FTP服务器进行文件的上传与下载。</p><h4 id="SMTP-POP3-IMAP协议"><a href="#SMTP-POP3-IMAP协议" class="headerlink" title="SMTP/POP3/IMAP协议"></a>SMTP/POP3/IMAP协议</h4><p>这些协议用于<code>电子邮件</code>的传输与接收。</p><ol><li><code>SMTP(简单邮件传输协议)</code>:用于发送邮件。</li><li><code>POP3(邮局协议3)</code>:用于从邮件服务器下载邮件。</li><li><code>IMAP(互联网邮件访问协议)</code>:与POP3类似,但提供更加灵活的邮件管理功能,允许用户在服务器上直接管理邮件。</li></ol><h4 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h4><p>DNS协议用于将域名解析为IP地址,使用户可以通过域名来访问网站,而不需要记复杂的IP地址。</p><h3 id="互联网的安全性与隐私保护"><a href="#互联网的安全性与隐私保护" class="headerlink" title="互联网的安全性与隐私保护"></a>互联网的安全性与隐私保护</h3><p>随着互联网的普及,网络安全问题越来越受到关注,用户的数据与隐私容易受到黑客攻击,网络钓鱼,恶意软件…常见的互联网安全措施包括:</p><ol><li><code>SSL/TLS加密</code>:保护用户的数据传输安全,防止中间人攻击。</li><li><code>防火墙和入侵检测系统</code>:监控和控制网络流量,防止不良攻击。</li><li><code>身份验证与授权</code>:确保只有授权用户才可以访问敏感资源。</li><li><code>VPN(虚拟私人网络)</code>:提供加密的远程访问,保护用户的上网隐私。</li></ol><h2 id="WEB通信流程"><a href="#WEB通信流程" class="headerlink" title="WEB通信流程"></a>WEB通信流程</h2><ol><li>浏览器本身是一个客户端,当输入URL时,首先浏览器回去请求<code>DNS服务器</code>,通过DNS获取相应的域名与IP。</li><li>通过<code>IP</code>找到IP对应的服务器,要求建立<code>TCP连接</code>。</li><li>等浏览器发送完<code>HTTP Request请求包</code>后,服务器收到请求包,开始处理请求包。</li><li>服务器调用自身服务器,返回<code>HTTP Response响应包</code>。</li><li>客户端收到来自服务器的响应包之后,开始渲染响应包内的主体<code>(响应体body)</code>,等收到全部的内容后断开与该服务器的TCP连接。</li></ol><p><img src="https://pic1.imgdb.cn/item/67e116ae0ba3d5a1d7e2905a.png" alt="WEB通信流程"></p><h3 id="WEB服务器工作原理"><a href="#WEB服务器工作原理" class="headerlink" title="WEB服务器工作原理"></a>WEB服务器工作原理</h3><ol><li>客户端通过TCP/IP协议建立到服务器的TCP连接。</li><li>客户端向服务器发送HTTP协议请求包,请求服务器里的资源文档。</li><li>服务器向客户端发送HTTP协议响应包,如果请求的资源包含有动态语言的内容,那么服务器会调用动态语言的解释引擎处理<code>动态内容</code>,并将处理的数据返回给客户端。</li><li>客户端与服务器断开,由客户端解释HTML文档,在客户端屏幕上渲染图形结果。</li></ol><p><img src="https://pic1.imgdb.cn/item/67e1187b0ba3d5a1d7e29113.png" alt="WEB服务器工作原理"></p><h3 id="客户端请求到服务器流程"><a href="#客户端请求到服务器流程" class="headerlink" title="客户端请求到服务器流程"></a>客户端请求到服务器流程</h3><ol><li><p>当客户端拿到服务器域名对应的IP后,浏览器会以一个<code>随机端口(1024&lt;端口&lt;65535)</code>向服务器的web程序(nginx,tomcat)的80端口发起TCP连接请求。</p></li><li><p>该请求经过复杂的网络环境到达服务器后,进入服务器的对应网卡,再进入到<code>Linux内核</code>的TCP/IP协议栈,一层一层解开数据包,甚至经过防火墙,最终到达nginx程序,确认TCP/IP连接。</p></li><li><p>确认TCP连接之后,客户端继续发起HTTP请求,如:get,post…请求方法。</p></li></ol><p><img src="https://pic1.imgdb.cn/item/67e118710ba3d5a1d7e2910d.png" alt="客户端请求到服务器流程"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础】面向对象与类</title>
      <link href="/2025/03/23/Java/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2025/03/23/Java/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>Java是一门<code>纯面向对象语言</code>,在面向对象的世界里,一切皆为对象。面向对象是解决问题的一种思路,主要通过对象之间的交互完成一件事情。<br>面向对象的程序是由对象组成的,每个对象包含<code>对用户公开的特定功能</code>和<code>隐藏的实现部分</code>。Java中有很多对象来自<code>标准库</code>,还有一部分由自己定义。从根本上说只要对象能够满足要求,就不必关心其功能实现过程。在<code>OOP</code>中不必关心对象的具体实现,只需其能满足用户需求即可。<br>以面向对象的方式进行处理,就不需要关注工作执行的过程。通过对象之间的交互就可以完成一件事情。面向对象编程的本质是以<code>类的方式</code>组织代码,以对象组织(封装)数据。</p><hr><h3 id="面向对象与面向过程"><a href="#面向对象与面向过程" class="headerlink" title="面向对象与面向过程"></a>面向对象与面向过程</h3><p><code>面向对象</code>与<code>面向过程</code>都是对项目分析,设计,开发的一种思想,它指导人们以不同的方式分析,设计和开发软件。</p><blockquote><p><code>面向过程</code>:面向过程适合简单,不需要协作的事务,重点关注执行的过程。面向过程时,需要思考怎样<code>按步骤实现</code>并将步骤对应为方法,一步步完成项目。例如把大象装进冰箱内,首先需要打开冰箱,然后把大象放进去,最后关上冰箱。</p><p><code>面向对象</code>:当思考比较复杂的设计任务时,会发现面对过程的思想比较复杂,此时面向对象的思想就应运而生了。<code>面向对象(OOP)</code>更契合人的思维模式。比如使用面向对象的思维去造车,就会想车是由轮胎,发动机,座椅,玻璃…组成的,这样只需要将这些部件组装起来就行,整个过程由这些对象之间的交互完成,而不需要关注那些对象之中的过程。因此面向对象是从整体去分析整个系统。</p></blockquote><p>面向对象与面向过程并不是编程语言,而是解决问题的一种思维方式。其中面向过程是一种执行者思维,面向对象是一种设计者思维,<code>面向对象离不开面向过程</code>。面向过程适合解决简单问题,面向对象适合解决困难的需要协作的问题。</p><h3 id="面向对象编程快速入门"><a href="#面向对象编程快速入门" class="headerlink" title="面向对象编程快速入门"></a>面向对象编程快速入门</h3><ol><li>面向对象的三个特征:<code>封装</code>,<code>继承</code>,<code>多态</code>。</li><li>创建一个一个的对象,将数据交给对象,在调用对象的方法来完成对数据的处理。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义一个类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">// 类内的属性</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    String sex;<br><br>    <span class="hljs-comment">// 类内的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello,My name is&quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Main函数中....</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">// 导包</span><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 实用类创建对象,也叫实例化对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><br>        <span class="hljs-comment">// 给对象添加属性值</span><br>        stu.name = <span class="hljs-string">&quot;小明&quot;</span>;<br>        stu.age = <span class="hljs-number">18</span>;<br>        stu.sex = <span class="hljs-string">&quot;男&quot;</span>;<br><br>        <span class="hljs-comment">// 使用对象调用类内的方法</span><br>        stu.hello();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="深刻认识面向对象"><a href="#深刻认识面向对象" class="headerlink" title="深刻认识面向对象"></a>深刻认识面向对象</h3><ol><li>面向对象编程的好处:<ol><li>凡事找对象的编程套路,更加符合人类思维习惯,编程也更加直观。</li></ol></li><li>对象是什么?如何创建?<ol><li>对象的本质就是一种特殊的<code>数据结构</code>(如果你学过<code>js</code>,一定对对象类型很熟悉,<code>obj=&#123;name:&#39;小明&#39;,age:18&#125;</code>,其实与这个对象差不多,只是现在说的对象更底层一点)</li><li>对象是用类new出来的,有类就可以创建对应的对象。</li><li>class也是类,也被称为对象的设计图(或者对象的模板)</li></ol></li></ol><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><ol><li>类:用于描述对象里面具有的属性与行为。</li><li>对象:被类实例化创建出来,在内存中实际存在的。</li></ol><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><p>在JAVA中定义类时,需要使用<code>class</code>关键字。class后面的是类名,可以按照自己的取,但是要符合大坨峰命名法的规范。不止java,很多语言皆是如此。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br>    <span class="hljs-comment">// 定义成员属性/成员方法</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>定义一个类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br>    <span class="hljs-comment">// 成员属性</span><br>    String name;<br><br>    <span class="hljs-comment">// 成员方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name + <span class="hljs-string">&quot;正在吃东西&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意事项</p><ol><li>类名采用大坨峰命名法。</li><li>类内的属性叫做<code>成员属性/成员变量</code>,类内的方法叫做<code>成员方法/成员行为</code>。</li><li>public是来控制<code>访问权限</code>的,是封装内的内容。</li><li>一般一个文件只定义一个类。</li><li>main方法所在的类一般要使用public修饰。</li><li>public修饰的类名必须与文件名相同(尽量都保证类名与文件名相同),如果要在一个文件写多个类,那么其他类可以不用加public。</li><li>成员变量本身存在默认值,在定义成员变量时一般来说不需要初始化值。</li><li>对象与对象之间不会相互影响,但<code>多个变量指向同一个变量时就会相互影响</code>(引用类型)。</li><li>如果某个对象没有一个变量引用,那么该对象无法被操作,该对象会成为所谓的垃圾对象。</li></ol></li></ol><h3 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h3><blockquote><p>定义一个类,就相当于在计算机中自定义了一种新的数据类型。与int,double类似,只不过int,double是内置类型,而类是用户自定义的类型。用类创建对象的过程被称为<code>类的实例化</code>,在java中采用new关键字配合类名来实例化对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 类的实例化</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><br>        <span class="hljs-comment">// 给对象添加属性值</span><br>        stu.name = <span class="hljs-string">&quot;小明&quot;</span>;<br>        stu.age = <span class="hljs-number">18</span>;<br>        stu.sex = <span class="hljs-string">&quot;男&quot;</span>;<br><br>        <span class="hljs-comment">// 使用对象调用类内的成员方法</span><br>        stu.hello(); <span class="hljs-comment">// 输出&quot;hello,My name is 小明&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">// 成员属性</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    String sex;<br><br>    <span class="hljs-comment">// 成员方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello,My name is&quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>注意事项</code>:当使用类实例化了一个对象后,对象身上就具备类的所有成员属性与成员方法。可以给这些属性赋值,也可以<code>通过对象调用这些成员方法</code>。当调用这个成员方法时,如果<code>成员方法内使用了成员属性</code>,那么<code>属性值应该是调用方法的对象身上的属性值</code>,而不是其他的一些什么。</p><h3 id="对象在计算机中的执行原理"><a href="#对象在计算机中的执行原理" class="headerlink" title="对象在计算机中的执行原理"></a>对象在计算机中的执行原理</h3><ol><li><code>类加载</code>:当Java程序启动时,<code>Java虚拟机(JVM)</code>会加载<code>Student</code>类和<code>Main</code>类的字节码文件,并将类的元数据信息存储到方法区中,包括类的结构,字段,方法,常量池…</li><li><code>main方法入栈</code>:JVM会调用main方法,在栈中为main方法创建一个<code>栈帧</code>。栈帧中包含main方法的局部变量,如:stu。</li><li>对象创建:在main方法中,通过new关键字创建一个对象,那么这个对象被储存在堆中,对象中包含<code>name</code>,<code>age</code>,<code>sex</code>三个字段。</li><li>方法调用:调用<code>hello方法</code>时,JVM会在栈中为hello方法创建新的栈帧,并将控制权转移到hello方法中,在hello方法执行完毕后,栈帧会被弹出栈,控制权返回main方法。</li><li>方法结束:当main方法执行完毕后,栈帧会被弹出栈,程序结束。</li><li>stu变量内记录的是对象的地址,因此变量<code>stu也是引用类型的变量</code>。</li></ol><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p><code>this关键字</code>是java中的一个引用变量,它通常指向当前变量。在一个类的方法或<code>构造器(构造函数)</code>内,this关键字可以用来引用调用该方法或构造器的<code>对象实例</code>。this代表当前正在执行操作的对象本身。<code>哪个对象调用的方法,this就指向哪个对象</code>。</p><h3 id="使用this区分成员变量与局部变量"><a href="#使用this区分成员变量与局部变量" class="headerlink" title="使用this区分成员变量与局部变量"></a>使用this区分成员变量与局部变量</h3><p>当方法或构造函数的<code>参数名</code>与<code>类的成员变量名</code>相同时,就会产生命名冲突,如果不加以区分,编辑器默认会使用局部变量(也就是参数),而不是成员变量,这可能会导致代码逻辑错误。通过<code>this</code>关键字可以明确指定要访问的是<code>类的成员变量</code>。这一点在<code>构造函数(构造器)</code>中常常被使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Student类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    String sex;<br><br>    <span class="hljs-comment">// 构造函数,函数名必须与方法名一致</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age,String sex)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello,my name is &quot;</span>+<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot;,i am &quot;</span>+<span class="hljs-built_in">this</span>.age+<span class="hljs-string">&quot; years old,i am a &quot;</span>+<span class="hljs-built_in">this</span>.sex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 项目入口</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小明&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>        <span class="hljs-comment">// stu.name = &quot;小明&quot;;</span><br>        <span class="hljs-comment">// stu.age = 18;</span><br>        <span class="hljs-comment">// stu.sex = &quot;男&quot;;</span><br><br>        stu.hello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过在构造函数内使用<code>this</code>关键字,<code>this.name = name</code>来指定对象的属性值等于传入的参数值,这样就可以在实例化对象的时候直接通过传递参数的方式来给对象属性赋值,这就是<code>构造函数</code></p><h2 id="构造器-构造函数"><a href="#构造器-构造函数" class="headerlink" title="构造器(构造函数)"></a>构造器(构造函数)</h2><p>创建对象时,对象会调用构造函数。<code>new Student()</code>,<code>Student</code>是创建对象,<code>()</code>是用来调用构造函数的。每个类都有一个构造函数,即便程序员不写,系统也会分配一个默认的构造函数。</p><ol><li>构造函数可以有多个,类似于方法的重载。</li><li>构造函数没有返回值。</li><li>构造函数不需要手动调用,程序会自动帮忙调用。</li><li>构造函数名必须与类名保持一致。</li></ol><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><blockquote><p>继承的本质就是实现对共性的抽取,同时实现代码的复用。通过对事物抽象成为一个类,类内包含这一事物的属性与行为,继承就是将这一类事物的共同属性与行为抽取出来,当在定义术语这一类事物的类时可以直接使用。而<code>抽象类</code>是因为父类提供的信息不足以描述一个具体的类,因此将父类定义为抽象类,间接加上一层效验,防止在代码中使用父类创建并使用对象。但继承也有缺点,继承是对共性的抽取,不同的对象虽然同属于一个类,但各自都会有不同的个性。</p><p>比如:动物类,狗属于动物,鸟也属于动物。但狗会跑,鸟不会。鸟会飞,狗不会。这是两者的<code>个性</code>而非共性,因此<code>父类就无法含有行为跑与行为飞</code>。可以在定义狗类时,加上自己的<code>行为跑</code>,定义鸟类时,加上自己的行为飞。可是新的问题又出现了,如果在定义一个鸭子类呢,鸭子会跑也会飞,在鸭子类中继续定义行为跑与行为飞?<code>当定义的类多了,每个类有自己单独的行为,但不同类之间又有共性,那继承的本质何在?</code></p><p><code>接口</code>可以理解为<code>对外提供一组公共的行为规范标准</code>,只要当前实例化对象符合行为规范标准,就可以让当前类<code>实现这个接口</code>。比如:定义一个接口,是行为跑的标准,狗会跑,因此狗可以实现该接口,在定义一个接口,是行为飞标准,鸟与鸭子会飞,因此鸟与鸭子可以实现这个接口</p></blockquote><p>什么是接口?<br>    在Java中,<code>接口(interface)</code>是一种引用数据类型,但是它只能包含<code>常量,方法签名和嵌套类型</code>。接口不能包含实例变量或方法的实现(在Java8及以上的版本,可以定义默认方法与静态方法)。接口主要用于定义类的外部行为,并允许类实现这些行为。</p><h3 id="接口实现与使用"><a href="#接口实现与使用" class="headerlink" title="接口实现与使用"></a>接口实现与使用</h3><h4 id="定义接口语法"><a href="#定义接口语法" class="headerlink" title="定义接口语法"></a>定义接口语法</h4><p>接口的定义需使用<code>interface</code>关键字<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-comment">// 常量</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">LEGS</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>; <span class="hljs-comment">// 默认有 &#x27;public static final&#x27;修饰词</span><br><br>    <span class="hljs-comment">// 抽象方法</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 默认有修饰符&#x27;public abstract&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h4><p>一个类通过<code>implements</code>关键字来实现接口,并实现接口中所有的抽象方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 实现接口 &#x27;implements 接口名&#x27;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span>&#123;<br><br>    <span class="hljs-comment">// 重写接口抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Dog类重写方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="接口的使用"><a href="#接口的使用" class="headerlink" title="接口的使用"></a>接口的使用</h4><p>通过接口引用实现类对象,可以实现<code>多态</code>性(有点类似于父类引用子类对象)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><br>        dog.makeSound();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="接口的特点"><a href="#接口的特点" class="headerlink" title="接口的特点"></a>接口的特点</h3><h4 id="方法共有性与抽象性"><a href="#方法共有性与抽象性" class="headerlink" title="方法共有性与抽象性"></a>方法共有性与抽象性</h4><p>接口中的方法都默认是public的,而且必须是public的,private和protected修饰符都不能在接口中使用。<code>接口中的所有方法都是public的,以便能够实现类访问</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 默认为public</span><br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="变量默认为公有静态常量"><a href="#变量默认为公有静态常量" class="headerlink" title="变量默认为公有静态常量"></a>变量默认为<code>公有静态常量</code></h4><p>接口中定义的变量默认是<code>public static final</code>修饰的,及静态常量。所有实现该接口的类,都可以访问这些常量。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        System.out.println(Dog.LEGS);<br>        System.out.println(Animal.LEGS);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="不能被实例化"><a href="#不能被实例化" class="headerlink" title="不能被实例化"></a>不能被实例化</h4><p>接口<code>不能被实例化</code>,所以<code>不支持构造函数</code>。尝试在接口中写构造函数会出现报错。<br><code>Not allowed in interface</code></p><h4 id="默认方法和静态方法"><a href="#默认方法和静态方法" class="headerlink" title="默认方法和静态方法"></a>默认方法和静态方法</h4><ol><li>从Java8开始,接口可以包含<code>默认方法与静态方法</code>。</li><li><code>默认方法(default)</code>:默认方法可以有<code>方法体</code>。默认方法不需要实现接口类去实现,但它们仍然是public的,使用<code>default</code>关键词修饰的是默认方法,与访问修饰符无关。</li><li><code>静态方法(static)</code>:静态方法也有方法体,不需要实现接口的类实现,这些方法是public的,并且可以通过接口调用。使用static修饰。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-comment">// 常量</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">LEGS</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>; <span class="hljs-comment">// 默认有 &#x27;public static final&#x27;修饰词</span><br><br>    <span class="hljs-comment">// 抽象方法</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 默认有修饰符&#x27;public abstract&#x27;</span><br><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;eat&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;static foo&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>对于<code>默认方法</code>,实现这个接口的类<code>可以重写</code>它</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 实现接口 &#x27;implements 接口名&#x27;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span>&#123;<br><br>    <span class="hljs-comment">// 实现接口抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Dog类重写方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 重写默认方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Dog 在吃&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接口的抽象方法的实现"><a href="#接口的抽象方法的实现" class="headerlink" title="接口的抽象方法的实现"></a>接口的抽象方法的实现</h4><blockquote><p>一个普通类实现接口,需要将接口中的所有抽象方法实现,如果是抽象类实现接口,则是否实现抽象方法都行。</p></blockquote><h4 id="接口之间的继承"><a href="#接口之间的继承" class="headerlink" title="接口之间的继承"></a>接口之间的继承</h4><p>接口不能继承某个类,但<code>接口可以继承接口</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;static foo&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 继承接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animals</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">foo2</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>Java接口支持<code>多重继承</code>,即一个接口可以继承自多个不同的接口。这与类的继承不同,类只支持单继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-comment">// 常量</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">LEGS</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>; <span class="hljs-comment">// 默认有 &#x27;public static final&#x27;修饰词</span><br><br>    <span class="hljs-comment">// 抽象方法</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSound</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 默认有修饰符&#x27;public abstract&#x27;</span><br><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;eat&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;static foo&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">InnerAnimal</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">foo3</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 继承接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animals</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>,InnerAnimal&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">foo2</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="多重接口的实现"><a href="#多重接口的实现" class="headerlink" title="多重接口的实现"></a>多重接口的实现</h3><p>Java中,类本身无法多重继承(一个子类继承多个父类),但一个类可以实现多个接口,这样就实现了多重继承的效果。这种特殊性称为<code>多重接口实现</code>。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>一个类实现多个接口时,接口之间使用逗号分割。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 实现接口 &#x27;implements 接口名&#x27;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span>,InnerAnimal&#123;<br>    <span class="hljs-comment">// 实现接口中的所有方法</span><br>&#125;<br></code></pre></td></tr></table></figure><br>实现多个接口时,类必须实现接口中定义的所有抽象方法。如果某个接口有<code>默认方法</code>,则可以<code>重写</code>它或<code>直接使用</code></p><h3 id="实现接口与继承性"><a href="#实现接口与继承性" class="headerlink" title="实现接口与继承性"></a>实现接口与继承性</h3><ol><li>继承单一性 VS 接口多实现</li></ol><p>继承性:Java中一个类只能继承一个父类,这是因为Java不支持多继承,以避免菱形继承问题。</p><p>实现接口:一个类可以实现多个接口,这允许Java类通过实现多个接口来模拟多重继承。</p><h2 id="抽象类与抽象方法"><a href="#抽象类与抽象方法" class="headerlink" title="抽象类与抽象方法"></a>抽象类与抽象方法</h2><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p><code>抽象类</code>是用<code>abstract</code>关键字修饰的类。它<code>不能被实例化</code>,通常作为其他类的<code>父类(基类)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象类定义</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span>&#123;<br>    <span class="hljs-comment">// 类体</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>抽象类可以包含普通方法,抽象方法,属性…。</strong></p><p>抽象类的特点:</p><ol><li>抽象类不能直接创建对象,需要通过子类来创建对象</li><li>抽象类可以包含普通成员函数,构造函数,静态属性,属性,抽象方法…任意成员</li></ol><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><p>抽象方法使用<code>abstract</code>关键字修饰。<code>它没有方法体(即没有作用),必须由子类重写</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象方法 没有方法体</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">speakFa</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 抽象方法没有方法体</span><br></code></pre></td></tr></table></figure><p><strong>抽象方法的特点：</strong></p><ol><li>抽象方法不能写主体<br> 抽象方法只能声明,没有实现</li><li>抽象方法不能被<code>final</code>,<code>private</code>,<code>static</code>修饰<ol><li><code>final</code>:抽象方法需要被子类重写,而<code>final</code>方法不能被重写</li><li><code>private</code>:抽象方法需要被子类访和实现,而<code>private</code>方法不能被子类访问</li><li><code>static</code>:抽象方法依赖于实例,而<code>static</code>方法不依赖于实例。</li></ol></li></ol><h3 id="抽象方法与抽象类的关系"><a href="#抽象方法与抽象类的关系" class="headerlink" title="抽象方法与抽象类的关系"></a>抽象方法与抽象类的关系</h3><ol><li><p>抽象方法只能写在抽象类中</p><p> 如果一个类包含抽象方法,则这个类必须为抽象类。因为如果一个类包含抽象方法,那么这个类无法提供完整的实现,因此不能直接实例化,而<code>class 类名</code>的意思是可以实例化。</p></li><li><p>抽象方法可以没有抽象类</p><p> 抽象类可以不包含抽象方法,但任然不能实例化。</p></li></ol><h3 id="继承抽象类"><a href="#继承抽象类" class="headerlink" title="继承抽象类"></a>继承抽象类</h3><p>当一个类继承抽象类时,必须<code>实现抽象类中的所有抽象方法</code>,或者将自己也声明为抽象类。</p><ol><li><p>实现所有抽象方法,子类必须实现父类中的所有抽象方法。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span>&#123;<br>    <span class="hljs-comment">// 抽象方法 没有方法体</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">speakFa</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 抽象方法没有方法体</span><br>&#125;<br><br><span class="hljs-comment">// 继承抽象类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sun</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Son</span> &#123;<br><br>    <span class="hljs-comment">// 重写抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">speakFa</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;你好&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>声明抽象类,如果子类没有实现父类的所有抽象方法,那么子类也必须声明为抽象类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span>&#123;<br>    <span class="hljs-comment">// 抽象方法 没有方法体</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">speakFa</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 抽象方法没有方法体</span><br>&#125;<br><br><span class="hljs-comment">// 继承抽象类 </span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sun</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Son</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="抽象类vs接口"><a href="#抽象类vs接口" class="headerlink" title="抽象类vs接口"></a>抽象类vs接口</h3><div class="table-container"><table><thead><tr><th>特性</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>关键字</td><td><code>abstract class</code></td><td><code>interface</code></td></tr><tr><td>实例化</td><td>无法实例化</td><td>无法实例化</td></tr><tr><td>方法实现</td><td>可以包含普通方法与抽象方法</td><td>Java8之前只能包含抽象方法</td></tr><tr><td>多继承</td><td>不支持(单继承)</td><td>支持(多实现)</td></tr><tr><td>构造器</td><td>可以有构造器</td><td>不能有构造器</td></tr><tr><td>成员变量</td><td>可以是普通变量</td><td>只能是常量(public static final)</td></tr><tr><td>设计目的</td><td>代码复用和层次设计</td><td>定义规范和扩展功能</td></tr></tbody></table></div><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>什么是内部类?<strong><em>在一个类的里面在定义一个类,就称为内部类</em></strong></p><blockquote><p>需要写一个类,描述一辆汽车。属性有车的品牌,车龄,颜色,发动机品牌以及使用年限。</p><pre><code class="hljs"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123; <span class="hljs-comment">// 外部类</span><br>String carName;<br><span class="hljs-type">int</span> carAge;<br>String color;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Engine</span>&#123; <span class="hljs-comment">// 内部类</span><br>        String engineName;<br>        <span class="hljs-type">int</span> engineAge;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>1. 内部类表示的是外部类的一部分2. 内部类单独出现没有任何意义</code></pre></blockquote><p>内部类的访问特点</p><pre><code class="hljs">1. 内部类可以直接访问外部类的成员,包括私有2. 外部类要访问内部类的成员,必须创建对象</code></pre><h3 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h3><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><blockquote><p>写在成员位置的内部类<br>内部类方法中获取外部类中的重名成员变量<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123; <span class="hljs-comment">// 外部类</span><br>    String carName;<br>    <span class="hljs-type">int</span> carAge;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;red&quot;</span>;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Engine</span>&#123; <span class="hljs-comment">// 内部类</span><br>        String engineName;<br>        <span class="hljs-type">int</span> engineAge;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yellow&quot;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;orange&quot;</span>;<br>            System.out.println(color); <span class="hljs-comment">// orange</span><br>            System.out.println(<span class="hljs-built_in">this</span>.color); <span class="hljs-comment">// yellow</span><br>            System.out.println(Car.<span class="hljs-built_in">this</span>.color); <span class="hljs-comment">// red</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>静态内部类中只能访问<code>外部类中的静态变量与静态方法</code>,如果想要访问非静态的需要创建对象访问</p><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><p>将内部类定义在<code>方法内</code>,就叫做局部内部类</p><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础】数组与方法</title>
      <link href="/2025/03/22/Java/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E6%95%B0%E7%BB%84%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
      <url>/2025/03/22/Java/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E6%95%B0%E7%BB%84%E4%B8%8E%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数据就是一个容器,可以存储<code>同种数据类型</code>的<code>多个值</code>。</p><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><ol><li><p>第一种格式:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据类型[] 数组名 = new 数据类型[数组长度]; </span><br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure></li><li><p>第二种格式:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> arr[] <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure></li><li><p>数组长度默认可以省略不写。</p></li></ol><h3 id="数组的静态初始化"><a href="#数组的静态初始化" class="headerlink" title="数组的静态初始化"></a>数组的静态初始化</h3><ol><li><p>完整格式</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 数组名 = <span class="hljs-keyword">new</span> 数据类型[数组长度]&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>,元素<span class="hljs-number">3.</span>..&#125;;<br></code></pre></td></tr></table></figure></li><li><p>简化格式</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 数组名 = &#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>,元素<span class="hljs-number">3.</span>..&#125;;<br></code></pre></td></tr></table></figure></li><li><p>实例</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建数组,存储学生年龄</span><br><span class="hljs-type">int</span>[] ageArr = &#123;<br>    <span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span><br>&#125;;<br></code></pre></td></tr></table></figure></li></ol><h3 id="数组中的元素"><a href="#数组中的元素" class="headerlink" title="数组中的元素"></a>数组中的元素</h3><ol><li><p>如果直接使用System.out.println()直接打印数组,会输出数组的地址值<code>[I@54bedef2</code>,而不是数组中的元素。</p><ol><li><code>[</code>表示数组的类型</li><li><code>I</code>表示数组的元素类型是int</li></ol></li><li><p>获取数组的元素</p><p> 格式:数组名[索引] 数组中的索引是从0开始的。</p></li><li><p>将数据存储到数组中</p><p> 格式:数组名[索引] = 数据/变量 // 数据会覆盖原来的值</p></li><li><p>数组的遍历</p><p> 遍历指依次取出数组中的所有元素。<code>ageArr.length</code>表示数组的长度。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ageArr.length; i++)&#123;<br>    System.out.println(ageArr[i]);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>二维数组其实就是一维数组内部的每个元素又是一个一维数组。也就是一维数组内部又嵌套着一维数组。</p><h3 id="二维数组的声明"><a href="#二维数组的声明" class="headerlink" title="二维数组的声明"></a>二维数组的声明</h3><ol><li><code>int[][] arr;</code></li><li><code>int arr[][];</code></li><li><code>int[] arr[];</code></li><li><code>int[] a,b[];</code>:这样声明a是一维数组,b是二维数组。</li></ol><h3 id="二维数组的创建"><a href="#二维数组的创建" class="headerlink" title="二维数组的创建"></a>二维数组的创建</h3><ol><li><p>静态初始化(定义的同时赋值):</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;&#125;;<br></code></pre></td></tr></table></figure></li><li><p>动态初始化</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure></li></ol><p>因为int类型默认值为0,所以输出值全部为0。这种方式相比之前还是比较灵活的,可以通过用户<code>自行输入数组内的值</code>。</p><h3 id="二维数组的遍历与输出"><a href="#二维数组的遍历与输出" class="headerlink" title="二维数组的遍历与输出"></a>二维数组的遍历与输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;&#125;;<br><br><span class="hljs-comment">// 第一层循环遍历外层数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>    <span class="hljs-comment">// 第二层循环遍历内层数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;arr[i].length;j++)&#123;<br>        <span class="hljs-comment">// 打印每一个值</span><br>        System.out.println(arr[i][j]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><strong>方法是程序中最小的执行单元。重复的代码或有独立功能的代码抽取到方法中。</strong></p><h3 id="定义与调用方法"><a href="#定义与调用方法" class="headerlink" title="定义与调用方法:"></a>定义与调用方法:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">playGame</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-comment">// 返回值</span><br>    <span class="hljs-keyword">return</span> x,y;<br>&#125; <br><br><span class="hljs-comment">// 调用方法</span><br>playGame(x,y);<br></code></pre></td></tr></table></figure><p>参数与返回值可以不写。注意:方法在调用时,参数的数量与类型必须与定义时一致,否则就会出现语法错误。</p><ol><li><p>形参与实参:</p><p> 方法定义中的参数称为<code>形参</code>,方法调用时的参数称为<code>实参</code>。</p></li><li><p><code>void</code>表示无返回值类型,当方法需要返回值时,将void替换为<code>返回值的类型</code>即可</p></li></ol><h2 id="方法重载-Overload"><a href="#方法重载-Overload" class="headerlink" title="方法重载(Overload)"></a>方法重载(Overload)</h2><p>方法重载是Java中实现多态的一种方式,它允许在同一个类中定义多个<code>同名的方法</code>,只要这些方法的参数列表不同。这些不同的参数列表可以通过不同的<code>参数类型</code>,<code>参数数量</code>和<code>参数顺序</code>来实现。使用<code>println()</code>方法打印不同的数据类型,就是利用的方法重载。</p><h3 id="重载的条件"><a href="#重载的条件" class="headerlink" title="重载的条件:"></a>重载的条件:</h3><p>重载的条件是方法名相同,参数列表不同(<code>参数数量</code>,<code>参数类型</code>,参数顺序[参数顺序一般不用])。</p><h3 id="重载实现"><a href="#重载实现" class="headerlink" title="重载实现:"></a>重载实现:</h3><ol><li><p>参数<code>类型不同</code>:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据传递的参数类型不同,调用不同的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>    System.out.println(a);<br>&#125;;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span>&#123;<br>    System.out.println(a);<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>参数<code>数量不同</code>:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据传递的参数数量不同,调用不同的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>    System.out.println(a);<br>&#125;;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>    System.out.println(a);<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>参数<code>顺序不同</code>:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据传递的参数顺序不同,调用不同的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">double</span> b)</span>&#123;<br>    System.out.println(a);<br>&#125;;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">double</span> b,<span class="hljs-type">int</span> a)</span>&#123;<br>    System.out.println(a);<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>重载的优点:</p><ol><li>提高代码可读性:使用相同的方法名称,有助于统一语义,增强代码可读性。</li><li>灵活性与简洁性:根据不同的参数进行不同的处理,增强代码的灵活性与简洁性。</li></ol></li><li><p>重载注意事项:</p><ol><li>方法返回值类型不同不能作为重载依据:方法重载与返回类型无关,只看参数列表</li><li>参数名称不同:不能作为重载依据,方法重载与参数名称无关。</li><li>方法修饰符无关:访问修饰符(public,private…)不影响方法重载。</li><li>抛出异常无关:方法抛出的异常类型与数量不会影响方法重载。</li></ol></li></ol><h2 id="Java内存分配"><a href="#Java内存分配" class="headerlink" title="Java内存分配"></a>Java内存分配</h2><ol><li>栈:方法运行时使用的内存,比如main方法运行。</li><li>堆:存储对象或数组,new出来的都存储在堆中。</li><li>方法区:存储可以运行的class文件</li><li>本地方法栈:JVM在使用操作系统时使用,与程序员基本无关。</li><li>寄存器:给CPU使用。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础】各种语句</title>
      <link href="/2025/03/22/Java/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E5%90%84%E7%A7%8D%E8%AF%AD%E5%8F%A5/"/>
      <url>/2025/03/22/Java/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E5%90%84%E7%A7%8D%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><ol><li><p>运算符：对字面量或者变量进行操作的字符,如：<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>。</p></li><li><p>表达式：用运算符把字面量或者变量连接起来符合java语法的式子,如：<code>a + b</code>。</p></li></ol><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>表达式</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>1 + 2</td></tr><tr><td>-</td><td>减</td><td>1 - 2</td></tr><tr><td>*</td><td>乘</td><td>1 * 2</td></tr><tr><td>/</td><td>除</td><td>10 / 3(整数参与计算,结果只能是整数)</td></tr><tr><td>%</td><td>取余/取模</td><td>1 % 2</td></tr><tr><td>++</td><td>自增</td><td>1++</td></tr><tr><td>—</td><td>自减</td><td>1—</td></tr></tbody></table></div><p><strong>在算数中如果有小数参与计算,结果有可能<code>不精确</code></strong></p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>类似<code>+=</code>表示把左边与右边的数据相加,然后重新赋值给左边。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;b = <span class="hljs-number">20</span>;<br>a += b; <span class="hljs-comment">// a = 30</span><br></code></pre></td></tr></table></figure><p><strong><code>+=,-=,*=,/=,%=</code>它们的底层都隐藏了一个强制类型转换。</strong></p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><div class="table-container"><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>判断左右两边是否相等</td></tr><tr><td>!=</td><td>判断左右两边是否不相等</td></tr><tr><td>&gt;</td><td>判断左边是否大于右边</td></tr><tr><td>&lt;</td><td>判断左边是否小于右边</td></tr><tr><td>&gt;=</td><td>判断左边是否大于等于右边</td></tr><tr><td>&lt;=</td><td>判断左边是否小于等于右边</td></tr></tbody></table></div><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ol><li>&amp; - 逻辑与(全为true,则满足条件)</li><li>| - 逻辑或(一个为true,则满足条件)</li><li>! - 逻辑非/<code>取反</code>(true为false,false为true)</li><li>^ - 逻辑异或(相同为false,不同为true)</li></ol><h3 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h3><p>短路逻辑运算符<code>效率比普通的逻辑运算符高</code></p><ol><li>&amp;&amp; - 短路与(左边为false,则右边不执行)</li><li>|| - 短路或(左边为true,则右边不执行)</li></ol><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>三元运算符可以用来处理简单的判断,根据判断的结果得到不同的内容。</p><p>格式： 关系表达式 ? 表达式1 : 表达式2 (true执行表达式1,false执行表达式2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> num1 &gt; num2 ? num1 : num2;<br><span class="hljs-comment">// 表达式为true返回num1,false返回num2</span><br></code></pre></td></tr></table></figure><h2 id="隐式转换与强制转换"><a href="#隐式转换与强制转换" class="headerlink" title="隐式转换与强制转换"></a>隐式转换与强制转换</h2><h3 id="隐式转换-自动类型提升"><a href="#隐式转换-自动类型提升" class="headerlink" title="隐式转换(自动类型提升)"></a>隐式转换(自动类型提升)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a; <span class="hljs-comment">// b = 10.0 隐式转换</span><br></code></pre></td></tr></table></figure><ol><li><p>取值范围小的数据与取值范围大的数据进行计算时,范围小的会优先转换为范围大的数据,然后进行计算(byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double)。</p></li><li><p>byte, short, char(ASCLL码表)三种数据类型进行计算时,都会先直接转换为int类型,然后在进行计算。</p></li></ol><h3 id="强制类型转换-强制将一个数据类型转换为另一个数据类型。"><a href="#强制类型转换-强制将一个数据类型转换为另一个数据类型。" class="headerlink" title="强制类型转换:强制将一个数据类型转换为另一个数据类型。"></a>强制类型转换:强制将一个数据类型转换为另一个数据类型。</h3><p>格式：目标数据类型 变量名 = (目标数据类型)被强转的数据;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.3</span><br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)a; <span class="hljs-comment">// b为12,强制转换数据会溢出,甚至发生数据错误</span><br></code></pre></td></tr></table></figure><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p>当<code>+</code>出现字符串时,这个<code>+</code>将不会作为算数运算符,而是用作<code>字符串的拼接</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> str + num; <span class="hljs-comment">// result = &quot;hello123&quot;;</span><br></code></pre></td></tr></table></figure><h2 id="字符相加"><a href="#字符相加" class="headerlink" title="字符相加"></a>字符相加</h2><p>当字符与<code>字符</code>或者<code>数字</code>相加时,字符会被转换为<code>ASCLL码表</code>的值进行相加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">0</span>; result = <span class="hljs-number">97</span><br></code></pre></td></tr></table></figure><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><pre><code class="hljs">顺序结构是java中默认的执行流程,按照代码顺序,从上到下依次执行。</code></pre><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>if语句在程序中就是用来专门判断的。如果条件满足,则执行if语句体中的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">// 进行判断</span><br><span class="hljs-keyword">if</span>(age &gt; <span class="hljs-number">18</span>)&#123;<br>    <span class="hljs-comment">// 语句体</span><br>    System.out.println(<span class="hljs-string">&quot;你以成年&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(age == <span class="hljs-number">18</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;你刚成年&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 如果条件都不满足,则执行else语句体</span><br>    System.out.println(<span class="hljs-string">&quot;未成年&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果语句体中,只有一句代码,<code>大括号可以省略不写</code>。</p><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p><code>switch</code>语句与if语句差不多,需要注意的是,switch的匹配中是表达式的值,而不是一个条件,case后面的值<code>只能是字面量</code>,不能是变量,并且不能重复。</p><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式:"></a>语法格式:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(表达式)&#123;<br>    <span class="hljs-comment">// case中能写多个匹配的值,用逗号隔开</span><br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>, 值<span class="hljs-number">0</span>:<br>        语句体<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>:<br>        语句体<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        语句体n+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="default的位置和省略："><a href="#default的位置和省略：" class="headerlink" title="default的位置和省略："></a>default的位置和省略：</h4><p>如果<code>default</code>省略了,则如果匹配不上,则没有任何语句可以执行。default的位置其实可以放在任何位置,但是平时都会放在最下面</p><h4 id="case穿透："><a href="#case穿透：" class="headerlink" title="case穿透："></a>case穿透：</h4><p>如果<code>break</code>省略,就会导致case穿透,break是用来结束case语句的,如果不写,case语句体执行完以后会继续往下执行。这像程序员的疏忽,但有时候也可以使用这种方式简化代码,使用场景很少。</p><h4 id="switch新特性"><a href="#switch新特性" class="headerlink" title="switch新特性"></a>switch新特性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(number)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;星期一&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> -&gt; &#123;<br>        System.out.println(<span class="hljs-string">&quot;星期二&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">default</span> -&gt; System.out.println(<span class="hljs-string">&quot;其他&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这是java中switch的新写法,不需要写break也不会造成<code>case穿透</code>现象。</p><h4 id="switch与if"><a href="#switch与if" class="headerlink" title="switch与if"></a>switch与if</h4><ol><li>if一般用于对<code>范围</code>的判断</li><li>switch一般用于对<code>多个值</code>进行判断</li></ol><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(初始化语句;条件判断语句;条件控制语句)&#123;<br>    循环体;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>while循环与for循环基本一致。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-number">10</span>)&#123;<br>    <span class="hljs-comment">// 语句体</span><br><br>    i++;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="for循环与while循环的区别"><a href="#for循环与while循环的区别" class="headerlink" title="for循环与while循环的区别"></a>for循环与while循环的区别</h4><ol><li>for循环在知道循环次数或者循环范围的情况下使用。</li><li>while循环在不知道循环次数,不知道循环范围,只知道循环结束条件的情况下使用。</li></ol><h3 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h3><h4 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">初始化语句<br><span class="hljs-keyword">do</span>&#123;<br>    循环体;<br>&#125;<span class="hljs-keyword">while</span>(条件判断)<br></code></pre></td></tr></table></figure><p>do…while会先执行一次循环才会判断条件,即使条件是false也会先执行一遍。</p><h3 id="结束循环"><a href="#结束循环" class="headerlink" title="结束循环"></a>结束循环</h3><ol><li>break结束<code>整个循环</code></li><li>continue结束本次循环,进入下次循环。</li></ol><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><p>java有一个内置类Random,可以生成随机数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">// 导包</span><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建对象</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>        <span class="hljs-comment">// 生成随机数,nextInt内写入随机数的范围</span><br>        <span class="hljs-comment">// 从0开始生成到10的随机数,不包括10</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="数字6-if判断"><a href="#数字6-if判断" class="headerlink" title="数字6(if判断)"></a>数字6(if判断)</h3><p>键盘录入两个数字，如果其中一个是数字6,则输出true，如果它们的和为6的倍数,则输出true，其他情况则输出false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">/* 键盘录入两个数字</span><br><span class="hljs-comment">         * 如果其中一个是数字6,则输出true</span><br><span class="hljs-comment">         * 如果它们的和为6的倍数,则输出true</span><br><span class="hljs-comment">         * 其他情况则输出false</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入第一个数字&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        System.out.println(<span class="hljs-string">&quot;请输入第二个数字&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-comment">// 判断</span><br>        <span class="hljs-keyword">if</span>(num == <span class="hljs-number">6</span> || num2 == <span class="hljs-number">6</span> || ((num + num2)%<span class="hljs-number">6</span> == <span class="hljs-number">0</span>) )&#123;<br>            System.out.println(<span class="hljs-string">&quot;true&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;false&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="商品的价格-if判断"><a href="#商品的价格-if判断" class="headerlink" title="商品的价格(if判断)"></a>商品的价格(if判断)</h3><p>一件商品总价为1000元,假设用户为一级会员,那么就打9折,二级会员打8折,三级会员打7折,剩余的不打折。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 总价</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-comment">// 输入vip等级</span><br>        System.out.println(<span class="hljs-string">&quot;请输入您的VIP等级&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">vip</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-keyword">if</span>(vip == <span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;您是一级vip,你购买的价格是:&quot;</span> + price * <span class="hljs-number">0.9</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(vip == <span class="hljs-number">2</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;您是二级vip,您购买的价格是:&quot;</span> + price * <span class="hljs-number">0.8</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(vip == <span class="hljs-number">3</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;您是三级vip,您购买的价格是:&quot;</span> + price * <span class="hljs-number">0.7</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;您不是vip客户,您购买的价格是:&quot;</span> + price);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运动计划-switch"><a href="#运动计划-switch" class="headerlink" title="运动计划(switch)"></a>运动计划(switch)</h3><p>键盘录入星期数,显示当天的运动计划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 键盘录入星期数</span><br>        System.out.println(<span class="hljs-string">&quot;请输入星期几:&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-keyword">switch</span>(week)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.out.println(<span class="hljs-string">&quot;跑步&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.out.println(<span class="hljs-string">&quot;游泳&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                System.out.println(<span class="hljs-string">&quot;慢走&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                System.out.println(<span class="hljs-string">&quot;动感单车&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                System.out.println(<span class="hljs-string">&quot;拳击&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                System.out.println(<span class="hljs-string">&quot;爬山&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                System.out.println(<span class="hljs-string">&quot;好好吃一顿&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;输入错误&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="for循环打印数字-for循环"><a href="#for循环打印数字-for循环" class="headerlink" title="for循环打印数字(for循环)"></a>for循环打印数字(for循环)</h3><p>循环打印1-5与5-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br>            <span class="hljs-comment">// 输出1-5</span><br>            System.out.println(i);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">5</span>;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>            <span class="hljs-comment">// 输出5-1</span><br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="断线重连-for循环"><a href="#断线重连-for循环" class="headerlink" title="断线重连(for循环)"></a>断线重连(for循环)</h3><p>循环断线重连5次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 现在我们处于断线状态，需要重新连接</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isWeb</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;第&quot;</span>+ i +<span class="hljs-string">&quot;重连中...&quot;</span>);<br><br>            <span class="hljs-keyword">if</span>(isWeb)&#123;<br>                System.out.println(<span class="hljs-string">&quot;连接成功,继续进行游戏&quot;</span>);<br>                <span class="hljs-keyword">return</span> ;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;重连失败,正在进行下次重连&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统相关操作</title>
      <link href="/2025/03/20/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2025/03/20/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><div class="table-container"><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td><code>Win</code> + <code>E</code></td><td>此电脑</td></tr></tbody></table></div><h2 id="打开CMD窗口"><a href="#打开CMD窗口" class="headerlink" title="打开CMD窗口"></a>打开CMD窗口</h2><ol><li><p>按下键盘上的 <code>Win</code> + <code>R</code> 键</p></li><li><p>在左下角运行菜单输入<code>cmd</code></p></li><li><p>按下回车，打开<code>CMD窗口</code></p></li></ol><h2 id="常见CMD指令"><a href="#常见CMD指令" class="headerlink" title="常见CMD指令"></a>常见CMD指令</h2><div class="table-container"><table><thead><tr><th>命令</th><th>操作</th></tr></thead><tbody><tr><td>盘符+冒号</td><td>盘符切换</td></tr><tr><td>dir</td><td>查看当前目录下的内容(包括<code>隐藏的内容</code>)</td></tr><tr><td>CD目录</td><td>进入目录　</td></tr><tr><td>cd\目录1\目录2</td><td>进入多级目录</td></tr><tr><td>CD..</td><td>退出当前目录</td></tr><tr><td>cd\</td><td>退回盘符目录</td></tr><tr><td>cls</td><td>清理控制台</td></tr><tr><td>exit</td><td>退出命令提示窗口</td></tr><tr><td>ipconfig</td><td>查看本机IP地址</td></tr><tr><td>ping</td><td>检查网络是否联通</td></tr></tbody></table></div><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置<code>环境变量</code></h2><p>想要在所有的路径下，都能打开指定的软件或者文件，或者其他的程序，就需要在环境变量中配置地址。</p><ol><li><p>按 <code>Win</code> + <code>E</code> 键，打开<code>此电脑</code>。</p></li><li><p>点击<code>属性</code>，点击<code>高级系统设置</code>，点击<code>环境变量</code>。</p></li><li><p>双击<code>Path</code>系统变量，将要记录的软件地址，输入到里面。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web前端开发学习路线</title>
      <link href="/2025/03/15/Web/%E5%89%8D%E7%AB%AF%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2025/03/15/Web/%E5%89%8D%E7%AB%AF%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>搞技术的，就是靠技术吃饭。有技术，工资高。没技术，工资低。</p></blockquote><h2 id="HTML-CSS-JavaScript"><a href="#HTML-CSS-JavaScript" class="headerlink" title="HTML/CSS/JavaScript"></a>HTML/CSS/JavaScript</h2><p>第一阶段,学习前端,<code>前端三剑客</code>肯定得学,学完前端三剑客以后,也只是入门阶段而已。</p><h2 id="前端库"><a href="#前端库" class="headerlink" title="前端库"></a>前端库</h2><p>比如：<code>jQuery</code>,<code>Bootstrap</code>,移动端开发之类的。让网页开发可以更快,更高效。</p><h2 id="MongoDB数据库"><a href="#MongoDB数据库" class="headerlink" title="MongoDB数据库"></a>MongoDB数据库</h2><p><code>mongoDB数据库</code>就是为前端而生的,很适合用来做为网页的数据库。</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p><code>Node.js</code>可以让js脱离浏览器,在服务端运行。</p><h2 id="mongoose"><a href="#mongoose" class="headerlink" title="mongoose"></a>mongoose</h2><p><code>mongoose</code>只是一个node.js开发库,能将node.js与mongoDB连接起来。</p><h2 id="koa-express"><a href="#koa-express" class="headerlink" title="koa/express"></a>koa/express</h2><p><code>koa</code>/<code>express</code>都是node.js开发框架,可以快速搭建web服务。</p><p>有了这些就可以将前端,数据库,服务器连接起来,就是一个真正的网站了。</p><h2 id="webpack-vite打包工具"><a href="#webpack-vite打包工具" class="headerlink" title="webpack/vite打包工具"></a>webpack/vite打包工具</h2><p><code>webpack</code>/<code>vite</code>都是前端打包工具,可以将js,css,图片等文件打包成一个文件。</p><h2 id="前端三大框架"><a href="#前端三大框架" class="headerlink" title="前端三大框架"></a>前端三大框架</h2><p><code>React</code>,<code>Vue</code>,<code>Angular</code>都是前端框架,可以帮助我们快速开发网页。以及<code>SPA单页面应用</code>。</p><h2 id="小程序-副业"><a href="#小程序-副业" class="headerlink" title="小程序(副业)"></a>小程序(副业)</h2><p>不是特别重要</p><h2 id="git-github"><a href="#git-github" class="headerlink" title="git/github"></a>git/github</h2><p>版本控制工具,可以帮助我们管理代码。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>可以学习学习<code>java</code>以及<code>MySQL</code>,这样就可以往全栈方向发展了。</p>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础】一些基本的简单语法</title>
      <link href="/2025/03/14/Java/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E8%AF%AD%E6%B3%95/"/>
      <url>/2025/03/14/Java/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><ol><li>VSCode(需要配置java环境) </li></ol><h2 id="JDK下载与安装"><a href="#JDK下载与安装" class="headerlink" title="JDK下载与安装"></a>JDK下载与安装</h2><ol><li><p>JDK下载地址:<a href="https://www.oracle.com/java/technologies/downloads/">https://www.oracle.com/java/technologies/downloads/</a></p></li><li><p>傻瓜式下一步安装即可(安装地址建议就使用默认的,C盘也不缺那点内存,这种程序安装地址修改了的话,后面的坑太多了)</p></li></ol><p><strong>安装好之后,可以在安装地址找到<code>java/jdk</code>目录,其中:</strong></p><ol><li><p><code>bin</code>: 存放各种工具命令,如：<code>javac</code>,<code>java</code></p></li><li><p>conf: 存放相关配置文件</p></li><li><p>include: 存放一些平台特定头文件</p></li><li><p>jmods: 存放各种模块</p></li><li><p>legal: 存放各种模块授权文档</p></li><li><p>lib: 存放各种工具补充JAR包</p></li></ol><h2 id="HELLO-WORLD"><a href="#HELLO-WORLD" class="headerlink" title="HELLO WORLD"></a>HELLO WORLD</h2><p><strong>所有编程语言的开头都是<code>HELLO WORLD</code>,写个HelloWorld爽一下</strong></p><ol><li><p>先创建一个<code>HelloWorld.java</code>文件,java文件的后缀是<code>.java</code></p></li><li><p>编写HelloWorld代码：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 类名与文件名保持一致</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>    <span class="hljs-comment">// 入口函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">// 输出Hello World</span><br>        System.out.println(<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>运行原理：</p></li></ol><p>当java文件运行时,<code>bin</code>目录内的<code>javac</code>工具会首先编译文件为<code>HelloWorld.class</code>文件,然后java工具才会运行<code>.class</code>文件,运行时是不加后缀的。</p><h2 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h2><ol><li><p>所有标点符号必须是英文状态下的</p></li><li><p>java内大小写严格,该大写的地方大写,该小写的地方小写。</p></li><li><p>关键词别写错了,语法不能有错误。</p></li></ol><h2 id="JAVA可以干什么"><a href="#JAVA可以干什么" class="headerlink" title="JAVA可以干什么?"></a>JAVA可以干什么?</h2><ol><li><p>Java SE：标准版。用于左面/应用开发,是其他版本的基础(桌面应用 || C/C++)。</p></li><li><p>Java ME：小型版。嵌入式电子设备/小型移动设备(嵌入式)—<code>差不多凉</code>。</p></li><li><p>Java EE：专业版。web方向的网站开发(Web网站开发<code>[浏览器&amp;服务器]</code>)。</p></li></ol><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ol><li><p>面向对象：简单来说就是,根据用户想要的功能，设计出符合用户需求的对象。</p></li><li><p>安全性</p></li><li><p>多线程：同时做多件事</p></li><li><p>开源</p></li><li><p>跨平台：window || mac || linux</p></li></ol><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ol><li><p>单行注释：<code>//</code></p></li><li><p>多行注释：<code>/* */</code></p></li><li><p>文档注释：<code>/** */</code></p></li></ol><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>创建变量时,需要在内存中申请存储空间,内存管理系统根据变量类型为变量分配空间,所以申请的空间只能存储<code>对应类型的数据</code>。</p><div class="table-container"><table><thead><tr><th>数据类型</th><th>关键词</th><th>描述</th></tr></thead><tbody><tr><td>整数</td><td>byte(-128~127),short,int,long(L后缀)</td><td>666,-123</td></tr><tr><td>小数(浮点数)</td><td>float(F后缀),double</td><td>6.66,-12.33</td></tr><tr><td>字符串(<code>需要用双引号包裹</code>)</td><td>string</td><td>“helloworld”,”hjk”</td></tr><tr><td>字符(<code>只能用单引号包裹</code>)</td><td>char</td><td>‘a’,’b’</td></tr><tr><td>布尔值</td><td>boolean</td><td>true/false</td></tr><tr><td>空值</td><td>void</td><td>null</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">num</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xiaohu&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">sex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br><br>        System.out.println(name);<br>        System.out.println(age);<br>        System.out.println(sex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在程序中存储数据的容器。</p><ol><li><p>声明变量：</p><p> 数据类型 变量名 = 值;</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">num</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        System.out.println(a); <span class="hljs-comment">// 输出10</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>参与计算：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">num</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 变量名不能重复</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>        System.out.println(a + b);<br>        System.out.println(a - b);<br>        System.out.println(a * b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意</p><ol><li>变量名不能重复</li><li>变量可以重新赋值</li><li>变量在使用前要进行<code>赋值</code></li><li>变量要在<code>作用域内</code>使用</li></ol></li></ol><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>标识符就是程序员给类,方法,变量取的名字。JAVA中的命名规范。</p><ol><li>硬性要求<ol><li>由<code>数字,字母,下划线,$</code>组成</li><li>不能以数字开头</li><li>不能是关键字</li><li>严格区分大小写</li></ol></li><li>君子协议<ol><li><code>方法或变量名</code>使用<code>小驼峰</code>命名法(多个单词组成,第二个单词首字母大写)</li><li><code>类名</code>使用<code>大坨峰</code>名命名法(每个单词首字母大写)</li></ol></li></ol><h2 id="键盘录入"><a href="#键盘录入" class="headerlink" title="键盘录入"></a>键盘录入</h2><p>监听用户的键盘输入。</p><p>Java有一个内置类(<code>Scanner</code>),可以接收键盘输入的<code>数字</code>。</p><ol><li><p>导包…找到Scanner类在哪</p></li><li><p>创建实例对象</p></li><li><p>接收数据</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 导包 -- 必须在类定义的上边</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">// 定义类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">num</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建实例对象</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-comment">// 使用sc实例对象接收数据,将数据赋值给i</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-comment">// 打印i</span><br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>sc.nextInt()：接收一个整数。</li><li>sc.nextDouble()：接收一个小数。</li><li>sc.next()：接收一个字符串。</li></ol><h2 id="键盘输入两个数字-并求和"><a href="#键盘输入两个数字-并求和" class="headerlink" title="键盘输入两个数字,并求和"></a>键盘输入两个数字,并求和</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 导包 -- 必须在类定义的上边</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">// 定义类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">num</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个实例</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-comment">// 录入第一个数字</span><br>        System.out.println(<span class="hljs-string">&quot;请输入第一个数字&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-comment">// 录入第二个数字</span><br>        System.out.println(<span class="hljs-string">&quot;请输入第二个数字&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-comment">// 输出和</span><br>        System.out.println(a + b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="在VSCode中创建java项目"><a href="#在VSCode中创建java项目" class="headerlink" title="在VSCode中创建java项目"></a>在VSCode中创建java项目</h2><ol><li><p>进入终端输入一下内容,检查电脑内是否安装 java</p> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">java -<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure></li><li><p>安装插件<code>Extension Pack for Java</code></p></li><li><p>创建一个项目</p><ol><li>创建一个文件夹,在VSCode内,点击菜单栏的<code>查看</code>,点击<code>命令面板</code>,输入<code>java</code>或者直接<code>CTRL</code> + <code>Shift</code> + <code>P</code> ,输入<code>java</code></li><li>选择创建<code>java项目(create java project)</code></li><li>选择要创建什么样的java项目,一般情况下<code>Maven</code>/<code>Spring Boot</code>比较多,当然也可以什么都不选</li><li>然后输入创建的项目文件夹</li><li>输入项目名</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3更新的一些新内容</title>
      <link href="/2025/03/10/Vue/028Vue3--%E6%9B%B4%E6%96%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B0%E5%86%85%E5%AE%B9/"/>
      <url>/2025/03/10/Vue/028Vue3--%E6%9B%B4%E6%96%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B0%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue3介绍"><a href="#Vue3介绍" class="headerlink" title="Vue3介绍"></a>Vue3介绍</h2><ol><li><p>性能提升</p></li><li><p>源码优化</p><ol><li>使用<code>Proxy</code>代替<code>defineProperty</code>实现响应式</li><li>重写<code>虚拟DOM</code>和<code>Tree-Shaking</code></li></ol></li><li><p>支持TypeScript</p><ol><li>Vue3更好的支持<code>TypeScript</code></li></ol></li><li><p>新特新</p><ol><li><p><code>Composltion API(组合式API)</code></p><ol><li>setup()配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>…</li></ol></li><li><p>新的内置组件</p><ol><li>Fragment</li><li>Teleport</li><li>Suspense</li></ol></li><li><p>其他</p><ol><li>新的生命周期钩子</li><li>data选项应始终被声明为一个函数</li><li>移除keyCode支持作为v-on的修饰符</li></ol></li></ol></li></ol><h2 id="创建Vue3工程"><a href="#创建Vue3工程" class="headerlink" title="创建Vue3工程"></a>创建Vue3工程</h2><h3 id="使用vue-cli创建"><a href="#使用vue-cli创建" class="headerlink" title="使用vue-cli创建"></a>使用vue-cli创建</h3><ol><li><p>查看@vue/cli版本</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看@vue/cli版本,确保在4.5.0以上才能安装vue3</span><br>vue --vewsion<br></code></pre></td></tr></table></figure></li><li><p>创建</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vue create vue3-demo<br></code></pre></td></tr></table></figure></li><li><p>选择vue3</p></li></ol><h3 id="使用vite创建"><a href="#使用vite创建" class="headerlink" title="使用vite创建"></a>使用vite创建</h3><p>Vite是新一代前端构建工具</p><ol><li><p>安装vite并且创建项目</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install vite-app vue3-demo<br></code></pre></td></tr></table></figure></li><li><p>进入项目,安装依赖</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i <br></code></pre></td></tr></table></figure></li><li><p>启动项目</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm run dev<br></code></pre></td></tr></table></figure></li></ol><h2 id="分析vue-cli创建的工程"><a href="#分析vue-cli创建的工程" class="headerlink" title="分析vue-cli创建的工程"></a>分析vue-cli创建的工程</h2><ol><li><p><code>main.js</code>文件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入的不在是Vue构造函数,引入的是一个createApp工厂函数</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br>创建应用实例对象并且挂载<br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>App.vue</code>文件</p><p> vue3组件中的模板结构可以<code>没有根标签</code></p></li></ol><h2 id="setup-配置项"><a href="#setup-配置项" class="headerlink" title="setup()配置项"></a>setup()配置项</h2><p>Vue3中可以使用Vue2的方法创建组件,但Vue2无法使用Vue3的组合式API。</p><p><code>setup()</code>函数是Vue3中一个新的配置项,它在组件创建时执行,接收两个参数：</p><ol><li>props：值为对象,其中包含组件接收所有<code>props</code>属性</li><li>context：值为对象,包含组件实例相关的属性与方法</li></ol><hr><ol><li><p>声明数据与计算属性：</p><p> Vue3中,需要通过<code>ref</code>与<code>computed</code>函数来声明这些数据</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入ref与computed方法</span><br><span class="hljs-keyword">import</span> &#123; ref,computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;my-demo&#x27;</span>,<br>    <span class="hljs-comment">// 使用setup配置项</span><br>    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 声明数据</span><br>        <span class="hljs-keyword">const</span> num = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> num.<span class="hljs-property">value</span> + <span class="hljs-number">1</span><br>        &#125;)<br><br>        <span class="hljs-comment">// 返回</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            num,<br>            count<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注册事件处理函数</p><p> 在setup配置项中,直接编写普通的javascript函数使用便可</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 声明数据</span><br>    <span class="hljs-keyword">const</span> num = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-comment">// 声明函数</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        num.<span class="hljs-property">value</span>++<br>    &#125;<br><br>    <span class="hljs-comment">// 返回</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        num,<br>        add<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义生命周期钩子函数</p><p> 在setup配置项中,可以编写<code>onMounted</code>和<code>onUnmounted</code>函数来实现一些功能</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 组件挂载时调用</span><br>    &#125;)<br><br>    <span class="hljs-title function_">onUnmounted</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-comment">// 组件卸载时调用</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注册子组件</p><p> 只需要通过普通的javascript来注册组件即可,但是<code>需要注意</code>：定义组件时,需要通过<code>defineComponent</code>来定义<code>具备注册子组件能力的组件</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入defineComponent方法</span><br><span class="hljs-keyword">import</span> &#123; ref, defineComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">// 引入子组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./son.vue&#x27;</span><br><br><span class="hljs-comment">// 定义具备注册子组件能力的组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineComponent</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;fatherComponent&#x27;</span>,<br>    <span class="hljs-comment">// 注册子组件</span><br>    <span class="hljs-attr">components</span>:&#123;<span class="hljs-title class_">Son</span>&#125;,<br>    <span class="hljs-comment">// 使用setup配置项</span><br>    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>访问<code>父组件</code>的属性与方法</p><p> 在setup配置项中,通过<code>inject</code>和<code>provide</code>方法来获取与提供属性</p><ol><li>父组件提供属性 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> num = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">// 提供数据</span><br>    <span class="hljs-title function_">provide</span>(<span class="hljs-string">&#x27;count&#x27;</span>, num)<br>    <span class="hljs-keyword">return</span> &#123;<br>        num,<br>        count<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>子组件获取属性 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 获取数据</span><br>    <span class="hljs-keyword">const</span> increment = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&#x27;count&#x27;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<br>        count<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>访问路由与路由器等全局属性</p><p> 在setup内可以访问路由与路由器…全局属性</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入方法</span><br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">// 引入路由与路由器</span><br><span class="hljs-keyword">import</span> &#123;useRoute,useRouter&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-comment">// 定义具备注册子组件能力的组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;fatherComponent&#x27;</span>,<br>    <span class="hljs-comment">// 使用setup配置项</span><br>    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 使用路由与路由器</span><br>        <span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>()<br>        <span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>()<br>        <span class="hljs-keyword">const</span> add = (<span class="hljs-function">() =&gt;</span> &#123;<br>            router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        &#125;)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><h2 id="ref与reactive函数"><a href="#ref与reactive函数" class="headerlink" title="ref与reactive函数"></a>ref与reactive函数</h2><p>在Vue3中,当直接在setup中声明一个普通变量时,那么这个变量不是响应式的,当数据发生更改时,页面不会及时更新。只有使用<code>ref</code>与<code>reactive</code>函数声明的变量才是响应式的。通常使用ref声明<code>简单数据类型</code>,而使用reactive声明<code>复杂数据类型</code>。</p><ol><li><p>声明变量</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 声明变量,注意ref与reactive都需要先引入在使用</span><br>    <span class="hljs-keyword">const</span> school = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;天津&#x27;</span>)<br>    <span class="hljs-keyword">const</span> person = <span class="hljs-title function_">reactive</span>(&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;郭德纲&#x27;</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">50</span>,<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改数据</p><p> 如果只是简单的修改数据,那么依然<code>无法达到响应式</code>的效果(也就是数据改了但页面依然使用之前的数据),想要达到响应式的效果,就需要在修改数据时,不直接修改,而是使用<code>数据名.value = &#39;张三&#39;</code>的形式修改。而使用reactive声明的数据可以直接修改,并且可以<code>直接添加没有定义的数据</code>。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用setup配置项</span><br><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 声明变量</span><br>    <span class="hljs-keyword">const</span> school = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;天津&#x27;</span>)<br>    <span class="hljs-keyword">const</span> person = <span class="hljs-title function_">reactive</span>(&#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;郭德纲&#x27;</span>,<br>      <span class="hljs-attr">age</span>:<span class="hljs-number">50</span>,<br>    &#125;)<br><br>    <span class="hljs-keyword">const</span> add = (<span class="hljs-function">()=&gt;</span>&#123;<br>      school.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;牛津&#x27;</span>,<br>      person.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;于谦&#x27;</span><br>      person.<span class="hljs-property">age</span> = <span class="hljs-number">60</span><br>      person.<span class="hljs-property">sex</span> = <span class="hljs-string">&#x27;男&#x27;</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ref与reactive的区别</p><ol><li>ref用来处理简单数据类型,也能处理复杂数据类型。</li><li>reactive用来处理复杂数据类型,无法处理简单数据类型。</li></ol></li><li><p>reactive的一个弊端</p><p> 如果是一一对应的赋值,页面可以达到响应式的效果,可如果是整体赋值,则页面无法达到响应式的效果。</p></li></ol><h2 id="watch与watchEffect"><a href="#watch与watchEffect" class="headerlink" title="watch与watchEffect"></a>watch与watchEffect</h2><ol><li><p>watch</p><p> watch用于监视数据变化,并在数据变化后执行相印的操作,基本语法如下：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">watch</span>:&#123;<br>    <span class="hljs-attr">school</span>:&#123;<br>        <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue,oldValue</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;school被修改了&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 需要注意的是,watch是惰性求值,只有在依赖的数据发生变化时,才会执行。</p></li><li><p>watchEffect</p><p> 与watch相比,watchEffect更加简洁,适用于不需要访问之前数据的情况。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">watchEffect</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">// 逻辑</span><br>&#125;<br></code></pre></td></tr></table></figure><p> watchEffect会立即执行传入的函数,并在依赖的数据改变是重新执行。</p></li><li><p>watch与watchEffect的区别</p><ol><li>watch需要定义监视的数据与对应的操作,适用于需要根据特定数据变化时执行特定操作的情况。</li><li>watchEffect不需要定义依赖的数据,适用于不需要访问之前数据的情况。</li></ol></li></ol><h2 id="provide与inject"><a href="#provide与inject" class="headerlink" title="provide与inject"></a>provide与inject</h2><p>provide与inject是用来<code>跨层级组件通信</code>的API,可以使父组件向深层嵌套的子组件传递数据,而无需通过中间组件。</p><ol><li><p>使用</p><ul><li>provide：父组件内提供数据/方法</li><li>inject：子组件内接收数据/方法</li></ul><ol><li><p>父组件：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 声明变量</span><br>    <span class="hljs-keyword">const</span> school = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;天津&#x27;</span>)<br>    <span class="hljs-keyword">const</span> person = <span class="hljs-title function_">reactive</span>(&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;郭德纲&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">50</span>,<br>    &#125;)<br><br>    <span class="hljs-comment">// 父组件提供响应式数据</span><br>    <span class="hljs-title function_">provide</span>(<span class="hljs-string">&#x27;school&#x27;</span>,school)<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p>子组件：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 子组件接收数据,第二个参数为默认值</span><br>    <span class="hljs-title function_">inject</span>(<span class="hljs-string">&#x27;school&#x27;</span>,<span class="hljs-string">&#x27;北京&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>常见使用场景：</p><ol><li><p>切换主题</p><p> 根据提供的主题变量,深层子组件直接注入使用。</p></li><li><p>用户身份/权限</p><p> 全局共享用户信息。</p></li><li><p>多级表单,复杂组件树</p><p> 跨层的表单控件共享数据或校验逻辑。</p></li><li><p>共享工具函数/配置</p><p> 提供全局方法(如日志,请求)或配置参数。</p></li></ol></li></ol><h2 id="Fragments"><a href="#Fragments" class="headerlink" title="Fragments"></a>Fragments</h2><p>什么是Fragments?在vue2中,结构内只能由一个根节点包裹,这会让页面增加不必要的节点。所以在vue3中使用了Fragments,是结构组件内可以有多个根节点。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        &#123;&#123; school &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;@/assets/img/01.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>hello vue3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h2><p>teleport可以以一种便捷的方式在组件内渲染内容到DOM中的另一个位置,有些时候可能需要组件渲染到与其逻辑关联不直接的地方,如：模态框,通知,工具提示以及其他悬浮框。</p><ol><li><p>Teleport基本使用</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Teleport</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;#body&quot;</span>&gt;</span><br>        hello vue<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Teleport</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 组件中,to属性指定想要将组件渲染到的位置</p></li><li><p>用法</p><ol><li><p>创建模态框组件</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Teleport</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;#body&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是一个模态框<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Teleport</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 创建一个模态框组件,并使用Teleport组件将组件渲染到body中。这样,无论模态框嵌套在什么地方,它的渲染位置总是不会变,能够避免样式冲突问题。</p></li><li><p>创建一个存放模态框的父组件</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">modal</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal&quot;</span>&gt;</span>这是模态框,模态框虽然放在这<span class="hljs-tag">&lt;/<span class="hljs-name">modal</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>使用场景</p><ol><li><p>模态框：模态框一般覆盖整个页面,放在body中可以避免样式问题</p></li><li><p>通知和提示：使用Teleport可以将组件渲染在具体目标位置,而不会受限组件层次结构</p></li><li><p>下拉菜单和工具提示：下拉菜单与工具提示一般需要渲染在具体目标位置,而不会受限组件层次结构,避免相对定位问题</p></li><li><p>上下文菜单：一般这些菜单在显示时与触发的组件不在同一个DOM中</p></li></ol></li></ol><h2 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h2><p>Suspense是Vue3一个内置组件,可以处理异步组件的加载状态,允许在异步组件加载完成之前显示一个备用内容(加载动画或占位符),从而提升用户体验。</p><ol><li><p>核心功能</p><ol><li>处理异步组件：<br> 可以包裹异步组件,并在组件加载完成之前显示备用内容。</li><li>支持多个异步依赖：<br> 可以同时加载多个异步,并等待所有异步操作完成后再渲染内容。</li><li>提供加载中和加载完成的状态：<ol><li>通过<code>#default</code>插槽显示异步组件的内容。</li><li>通过<code>#fallback</code>插槽显示加载中的备用内容。</li></ol></li></ol></li><li><p>基本使用：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 加载异步组件,可以写多个异步组件 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">son</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">son</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">fallback</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 异步加载中显示的备用内容 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>loading.....<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>‘Suspense’是新内容,可能会有兼容性问题</strong></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES5与ES6的区别</title>
      <link href="/2025/03/01/JavaScript/ES5%E4%B8%8EES6%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2025/03/01/JavaScript/ES5%E4%B8%8EES6%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="　什么是ES6?"></a>　什么是ES6?</h2><blockquote><p>ES6是 JavaScript 的第六个主要版本标准，于 2015 年发布，带来了许多革命性的语法改进和新特性。以下是其核心特性：</p></blockquote><h2 id="let-和-const-关键字"><a href="#let-和-const-关键字" class="headerlink" title="let 和 const 关键字"></a><code>let</code> 和 <code>const</code> 关键字</h2><ol><li><p>作用：</p><p> ES6中引入了<code>let</code>和<code>const</code>来声明变量,并为它们提供了块级作用域（就相当于局部作用域）,解决了var变量声明的问题。</p></li><li><p>比较：</p><ul><li><code>let</code>：<br>  声明变量,并且可以修改变量的值</li><li><code>const</code>：<br>  声明常量,也就是无法修改变量的值</li></ul></li><li><p>底层实现原理：</p><p> JavaScript引擎对变量作用域链进行了优化,使<code>let</code>与<code>const</code>只能在指定作用域内使用。</p></li><li><p>使用</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;小明&#x27;</span><br>name = <span class="hljs-string">&#x27;小红&#x27;</span><br><br><span class="hljs-keyword">const</span> age = <span class="hljs-number">18</span><br><span class="hljs-comment">// age = 20 // 报错</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ol><li><p>作用：</p><p> 绑定语法,同时自动绑定this到上下文,避免出现一些错误</p></li><li><p>使用场景：</p><p> 适用于较小的回调,事件处理,特别在处理异步是非常方便</p></li><li><p>底层实现原理：</p><p> 箭头函数没有自己的this,而是继承上下文作用域中的this指向</p></li><li><p>使用：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;箭头函数&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><ol><li><p>作用：</p><p> 通过反引号 ` ,包裹字符串,并在其中写入表达式,可以更方便的拼接字符串。</p></li><li><p>使用场景：</p><p> 当需要构建复杂的HTML字段,SQL查询或其他多行文本时,很有用</p></li><li><p>底层实现原理：</p><p> 通过编译器解析成字符串片段和插值表达式,然后按照顺序连接</p></li><li><p>使用：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`你好,<span class="hljs-subst">$&#123;name&#125;</span>!`</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="　解构赋值"></a>　解构赋值</h2><ol><li><p>作用：</p><p> 直接从数组或者对象中提取值,并赋值给变量</p></li><li><p>使用场景：</p><p> 快速从API响应或其他数据源抽取所需数据,也可以用来交换两个变量的值</p></li><li><p>底层实现原理：</p><p> 解构赋值基于模式匹配,javascript引擎会根据提供的模式自动分配相应的值</p></li><li><p>使用：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [a, b] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]; <span class="hljs-comment">// 数组解构</span><br><span class="hljs-keyword">const</span> &#123;name, age&#125; = user; <span class="hljs-comment">// 对象解构</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><ol><li><p>作用：</p><p> 允许在函数定义时设置默认参数,当调用时没有传递参数&lt;就会使用默认参数</p></li><li><p>使用场景：</p><p> 减少不必要的条件判断</p></li><li><p>底层实现原理：</p><p> 默认参数在函数内部进行初始化检查,如果没有传递参数,或者传入的是undefined,就会使用默认参数</p></li><li><p>使用：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b = <span class="hljs-number">0</span></span>) &#123;&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><ol><li><p>作用：</p><p> 将数组或对象拆分为独立元素,剩余参数收集到一个数组中</p></li><li><p>使用场景：</p><p> 合并数组或对象,传递参数等</p></li><li><p>底层实现原理：</p><p> 通过对现有数据结构的操作来实现</p></li><li><p>使用：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [...oldArr, newItem]; <span class="hljs-comment">// 数组合并</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ol><li><p>作用：</p><p> 虽然ES6的类只是语法糖,但依然可以定义构造函数与方法</p></li><li><p>使用场景：</p><p> 构建大型项目时,有助于代码复用和维护</p></li><li><p>底层实现原理：</p><p> 类的底层实际是通过原型继承机制实现的,所有实例共享一个原型对象上的方法</p></li><li><p>使用：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123; <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name; &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ol><li><p>作用：</p><p> 通过export和import将代码分为多个文件,方便管理与维护</p></li><li><p>使用场景：</p><p> 任何规模应用都可以受益模块化,特别是对团队开发很有帮助</p></li><li><p>底层实现原理：</p><p> 模块化依赖于静态分析工具,编译时解析所有导入导出关系,生成并优化代码</p></li><li><p>使用：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) &#123; <span class="hljs-keyword">return</span> a + b; &#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><ol><li><p>作用：</p><p> 更好的处理异步操作,避免回调地狱,更优雅的错误处理</p></li><li><p>使用场景：</p><p> 几乎所有涉及网络请求,以及文件读写等异步操作的地方都适用</p></li><li><p>底层实现原理：</p><p> Promise是一种状态机,它有待定,成功,失败三种状态,直到完成之后才触发相应的处理程序</p></li><li><p>使用：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(url)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error));<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue路由</title>
      <link href="/2025/02/28/Vue/027Vue--vue%E8%B7%AF%E7%94%B1/"/>
      <url>/2025/02/28/Vue/027Vue--vue%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>路由其实就是<code>路径</code>与<code>组件</code>之间的映射关系,当用户访问不同的路径时,前端应用会展示不同的组件,可以达到只是局部刷新,而不用重新加载整个页面。</p><h2 id="单页应用SPA"><a href="#单页应用SPA" class="headerlink" title="单页应用SPA"></a>单页应用SPA</h2><p><code>单页应用(SPA)</code>是指一个项目只加载一个HTML页面,通过路由控制页面内组件的展示与切换,以及网络请求实现页面的局部刷新而无需整体刷新。因为无需全部重新加载,SPA有很多优点。</p><ol><li>优点 <ol><li>页面切换快</li><li>减轻服务器压力</li></ol></li><li>缺点<ol><li>首次加载时可能会比较慢</li></ol></li></ol><h2 id="前端路由实现方式"><a href="#前端路由实现方式" class="headerlink" title="前端路由实现方式"></a>前端路由实现方式</h2><h3 id="Hash模式"><a href="#Hash模式" class="headerlink" title="Hash模式"></a>Hash模式</h3><p>利用URL的hash值(#后面的部分)模拟完整的URL,以便前端进行路由匹配和页面渲染</p><ol><li>用户点击路由链接,导致hash值变化</li><li>hash值变化,触发hashchange事件（不会重新加载页面）</li><li>路由监听hashchange事件的触发,根据hash值来更新页面内容</li></ol><ul><li><p>HTML结构</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/about&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/contact&quot;</span>&gt;</span>联系我们<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>JS结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>= <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 初始化页面</span><br>    <span class="hljs-title function_">updateView</span>()<br>    <span class="hljs-comment">// 监听hashchange事件</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;hashchange&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">updateView</span>()<br>    &#125;)<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateView</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">// 根据URL进行页面或组件的切换操作,如此处更新&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;内的渲染内容</span><br>        <span class="hljs-keyword">const</span> hash = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span><br>        <span class="hljs-keyword">let</span> context = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">switch</span> (hash)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;#/home&#x27;</span>:<br>                context = <span class="hljs-string">&#x27;&lt;h1&gt;首页&lt;/h1&gt;&#x27;</span><br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;#/about&#x27;</span>:<br>                context = <span class="hljs-string">&#x27;&lt;h1&gt;关于&lt;/h1&gt;&#x27;</span><br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;#/contact&#x27;</span>:<br>                context = <span class="hljs-string">&#x27;&lt;h1&gt;联系我们&lt;/h1&gt;&#x27;</span><br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-attr">default</span>:<br>                context = <span class="hljs-string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span><br>        &#125;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>).<span class="hljs-property">innerHTML</span> = context<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>编译完毕后在main.js中引入就可以</p><h3 id="History模式"><a href="#History模式" class="headerlink" title="History模式"></a>History模式</h3><p>History模式与hash模式类似,但变化和监听机制不同</p><ol><li><p>利用HTML5 History API （如：history.pushState和history.replaceState）方法来实现URL跳转</p></li><li><p>监听popstate事件,根据URL更新内容</p></li></ol><p>因为history实现起来比较复杂,因此通常使用<code>Vue Router</code>,<code>React Router</code>等前端路由库简化开发</p><h2 id="Vue-router基础配置"><a href="#Vue-router基础配置" class="headerlink" title="Vue router基础配置"></a>Vue router基础配置</h2><p>Vue Router 是 Vue.js的官方路由解决方案,通过它,我们可以<code>轻松管理</code>应用中的页面跳转,路由守卫,懒加载</p><ol><li><p>安装</p><ul><li><p>Vue2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install vue-router@3<br></code></pre></td></tr></table></figure></li><li><p>Vue3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install vue-router@4<br></code></pre></td></tr></table></figure></li></ul></li><li><p>封装路由器</p><p> 在src目录(也就是main.js同级目录)下创建router目录,在router目录中创建index.js文件,并且配置以下代码</p><ul><li><p>Vue2的配置方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 该文件用于创建整个应用的路由器</span><br><br><span class="hljs-comment">// 引入vue-router</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-comment">// 引入组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyHome</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/MyHome.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyAbout</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/MyAbout.vue&#x27;</span><br><br><span class="hljs-comment">// 创建并暴露一个路由器</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-comment">// 配置路由</span><br>    <span class="hljs-attr">routes</span>:[<br>        &#123;<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">MyAbout</span>,<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">MyHome</span>,<br>        &#125;<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>Vue3的配置方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 路由配置文件</span><br><span class="hljs-comment">// 引入路由vue-router</span><br><span class="hljs-keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-comment">// 引入路由组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Index</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/index/index.vue&#x27;</span><br><br><span class="hljs-comment">// 配置路由</span><br><span class="hljs-keyword">const</span> routes = [<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">Index</span><br>    &#125;<br>]<br><br><span class="hljs-comment">// 配置routes</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>    <span class="hljs-comment">// 路由配置</span><br>    routes,<br>    <span class="hljs-comment">// 配置histroy模式</span><br>    <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHashHistory</span>()<br>&#125;)<br><br><span class="hljs-comment">// 导出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p>Vue3与Vue2只有引入vue-router的方式会有些不同，考虑到性能的缘故，Vue3选择按需加载的方式来提升性能</p><p>路由组件放在pages目录/views目录下,而一般组件放在components目录下</p><p>路由组件与一般组件</p></li><li>路由组件：配置路由时使用到的组件</li><li>一般组件：其他组件</li></ul></li><li><p>在<code>main.js</code>中使用路由器</p><p> 回到main.js文件中引入创建好的router,并在Vue实例中使用</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入路由器</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router/index&#x27;</span><br><br><span class="hljs-comment">// 创建vm</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>    <span class="hljs-comment">// 注册路由器</span><br>    router,<br>&#125;)<br></code></pre></td></tr></table></figure><p> Vue3的使用方式也与Vue2有些不同，Vue3直接使用app.use的方式使用即可</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">use</span>(router)<br></code></pre></td></tr></table></figure></li></ol><h2 id="使用路由"><a href="#使用路由" class="headerlink" title="使用路由"></a>使用路由</h2><ol><li><p>$route 与 $router</p><p> $route指单个路由,存放当前路径信息与存放的参数<br> $router指整个路由器,路由管理者,里面保存所有路径信息,可以实现路由跳转</p></li><li><p>router-link</p><p> 通过router-link标签替代a标签实现路由切换,router-link最终会被渲染为a标签</p></li><li><p>router-view</p><p> 通过router-view标签指定组件的呈现位置(类似于插槽中的solt标签),router-view标签最终会被渲染为div标签</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你好！！！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>About组件<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>Home组件<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样一来,当点击首页时,router-view标签内显示的是首页组件的内容,当点击的是关于时,有会显示关于组件内的内容,而页面不会刷新。</p><h2 id="多级路由-嵌套路由"><a href="#多级路由-嵌套路由" class="headerlink" title="多级路由(嵌套路由)"></a>多级路由(嵌套路由)</h2><ol><li><p>在路由器配置项中写出子路由<code>children</code>的配置规则</p><p> <strong>注意：子路由中的path不需要写<code>/</code>,vue会默认在父路由后面补上<code>/</code></strong></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">MyHome</span>,<br>    <span class="hljs-attr">children</span>:[<br>        &#123;<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;news&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">MyNews</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;message&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">MyMessage</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在父路由的对应组件中写</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    首页<br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/news&quot;</span>&gt;</span>news<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/message&quot;</span>&gt;</span>message<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注意这里需要将路径写全 --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="路由的参数传递-—-query参数"><a href="#路由的参数传递-—-query参数" class="headerlink" title="路由的参数传递 — query参数"></a>路由的参数传递 — query参数</h2><ol><li>传递参数<ol><li>字符串式 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/news?id=001&amp;title=你好&quot;</span>&gt;</span>news<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>对象式 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">path:&#x27;/home/message&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">query:&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">    id:&#x27;002&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">    title:&#x27;在吗&#x27;</span></span><br><span class="hljs-string"><span class="hljs-tag">&#125;</span></span><br><span class="hljs-string"><span class="hljs-tag">&#125;&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>message<br><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ol><ol><li><p>接收参数</p><p> 在路由对应的组件中,通过<code>$route</code>对象,可以获取当前路由的一些属性,包括参数。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取id</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">query</span>.<span class="hljs-property">id</span><br><span class="hljs-comment">// 获取title</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">query</span>.<span class="hljs-property">title</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="路由的参数传递-—-params参数"><a href="#路由的参数传递-—-params参数" class="headerlink" title="路由的参数传递 — params参数"></a>路由的参数传递 — params参数</h2><ol><li><p>配置路由接收<code>params</code>参数</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">component</span>: <span class="hljs-title class_">MyHome</span>,<br><span class="hljs-attr">children</span>:[<br>    &#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;news&#x27;</span>,<br>        <span class="hljs-comment">// 使用占位符接收params参数</span><br>        <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;news/:id/:title&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">MyNews</span><br>    &#125;,<br>]<br></code></pre></td></tr></table></figure></li><li><p>跳转并携带params参数</p><ol><li>字符串式 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span> = <span class="hljs-string">&quot;/home/news/id/title&quot;</span>&gt;</span>news<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>对象式</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">    name:&#x27;news&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">    params:&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">        id:&#x27;001&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">        title:&#x27;你好&#x27;</span></span><br><span class="hljs-string"><span class="hljs-tag">        &#125;</span></span><br><span class="hljs-string"><span class="hljs-tag">    &#125;&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>news<br><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：路由携带params参数时,若使用对象式写法,则不能使用path配置项,必须使用name配置项,也就是<code>命名路由</code></p></li></ol></li><li><p>接收参数</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 接收id</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>.<span class="hljs-property">id</span><br><span class="hljs-comment">// 接收title</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>.<span class="hljs-property">title</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h2><p>使组件更方便的接收参数</p><ol><li><p>通过props配置传递参数</p><ol><li><p>对象式<br> props值为对象,对象中的所有<code>键值</code>组合最终都会通过props形式传递给组件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;news&#x27;</span>,<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;news/:id/:title&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">MyNews</span>,<br>    <span class="hljs-attr">props</span>:&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">900</span>&#125;<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p>布尔值式<br> props值为布尔值,布尔为true时,路由中的所有参数都会通过props形式传递给组件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;news&#x27;</span>,<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;news/:id/:title&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">MyNews</span>,<br>    <span class="hljs-attr">props</span>:<span class="hljs-literal">true</span><br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p>tab<br> props为函数,函数返回的每一组<code>键值对</code>都会通过props形式传递给组件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;news&#x27;</span>,<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;news/:id/:title&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">MyNews</span>,<br>    <span class="hljs-title function_">props</span>(<span class="hljs-params">route</span>)&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">id</span>: route.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>,<br>            <span class="hljs-attr">title</span>: route.<span class="hljs-property">params</span>.<span class="hljs-property">title</span><br>        &#125;<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure></li></ol></li><li><p>接收props参数</p><p> 组件内正常通过props形式接收参数就好</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;title&#x27;</span>]<br></code></pre></td></tr></table></figure></li></ol><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><ol><li><p>给路由命名</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">children</span>:[<br>    &#123;<br>        <span class="hljs-comment">// 添加name配置项</span><br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;news&#x27;</span>,<br>        <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;news&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">MyNews</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;message&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-title class_">MyMessage</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure></li><li><p>使用命名路由</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span> = <span class="hljs-string">&quot;&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">    name:&#x27;news&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">&#125;&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>news<br><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配合参数传递简写</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">    name:&#x27;message&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">    query:&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">    id:&#x27;002&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">    title:&#x27;在吗&#x27;</span></span><br><span class="hljs-string"><span class="hljs-tag">    &#125;</span></span><br><span class="hljs-string"><span class="hljs-tag">&#125;&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>message<br><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><ol><li><p>什么是路由重定向</p><p> 当用户在访问A地址时,强制用户跳转到B地址</p></li><li><p>设置redirect属性</p><p> 通过设置redirect属性,可指定一个新的地址</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 重定向,项目运行时访问/时,立即跳转&#x27;/home&#x27;</span><br>&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/home&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="router-link标签的replace属性"><a href="#router-link标签的replace属性" class="headerlink" title="router-link标签的replace属性"></a>router-link标签的replace属性</h2><ol><li><p>控制路由跳转时,操作浏览器历史记录</p></li><li><p>浏览器历史记录有两种写入方式,分别是<code>push</code>和<code>replace</code>,push是追加历史记录,replace是替换历史记录,跳转时默认为push</p></li><li><p>开启replace模式：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">replace</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/home&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="路由组件缓存机制"><a href="#路由组件缓存机制" class="headerlink" title="路由组件缓存机制"></a>路由组件缓存机制</h2><p>一般情况下,当切换到另一个路由组件时,原本的路由组件会被销毁,组件上的数据也会丢失,当切换回来时,组件又会重新被生成。可以通过使用keep-alive标签包裹router-view的方式,实现路由组件切换时,原本的路由组件被缓存下来,数据也不会丢失。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 当include不设置值时,所有的路由组件都会被缓存 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">include</span>=<span class="hljs-string">&quot;News&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h2><p>不借助<code>router-link标签</code>,而是通过js的方式实现路由跳转</p><p>调用$router上的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// this.$router.replace(&#123;&#125;)</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;message&#x27;</span>,<br>    <span class="hljs-attr">query</span>:&#123;<br>    <span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;002&#x27;</span>,<br>    <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;在吗&#x27;</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>配置项与router-link便签内的to属性对象式写法的配置项差不多</p><h2 id="新的两个生命周期钩子"><a href="#新的两个生命周期钩子" class="headerlink" title="新的两个生命周期钩子"></a>新的两个生命周期钩子</h2><p>路由组件的两个生命周期钩子,捕获路由组件的激活与失活</p><ol><li><p>activated 激活</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 组件激活时调用</span><br><span class="hljs-title function_">activated</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;News组件被激活&#x27;</span>)    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>deactivated</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 组件失活时调用</span><br><span class="hljs-title function_">deactivated</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;News组件失活&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><p>路由守卫指路由跳转前后执行的逻辑,用于拦截导航,权限校验,数据加载等…,VueRouter提供了多种路由守卫,可以根据需求选择。</p><h3 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h3><p>路由跳转之前执行的守卫,通过这个守卫可以检查用户是否有访问目标路由的权限。如果没有可以取消导航或者重定向到其他页面。</p><ol><li><p>在<code>router目录</code>下<code>index.js</code>文件中添加一下代码：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 该文件用于创建整个应用的路由器</span><br><br><span class="hljs-comment">// 引入组件</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyAbout</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/MyAbout.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyHome</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/MyHome.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyMessage</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/MyMessage.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyNews</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/MyNews.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><br><span class="hljs-comment">// 创建并暴露一个路由器</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-comment">// 配置路由</span><br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>,<br>    <span class="hljs-attr">routes</span>: [<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">MyAbout</span>,<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">MyHome</span>,<br>        &#125;,<br>    ]<br>&#125;);<br><br><span class="hljs-comment">// 添加全局前置守卫,初始化和每次路由切换之前都会执行此回调函数</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// to 要去的目标路由信息</span><br>    <span class="hljs-comment">// from 来自的路由信息</span><br>    <span class="hljs-comment">// next 放行</span><br>    <span class="hljs-comment">// 检查用户是否已经登录</span><br>    <span class="hljs-keyword">const</span> isLoggedIn = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;user&#x27;</span>)<br>    <br>    <span class="hljs-keyword">if</span>(!isLoggedIn &amp;&amp; to.<span class="hljs-property">path</span> === <span class="hljs-string">&#x27;/dashboard&#x27;</span>)&#123;<br>        <span class="hljs-comment">// 如果未登录,且试图访问dashboard,则重定向到登录页</span><br>        <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 否则允许导航</span><br>        <span class="hljs-title function_">next</span>()<br>    &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure></li><li><p>路由元信息</p><p> 如果需要在路由内写一些自己的信息,但如果直接写在路由内是不会生效的,这时可以将一些自定义信息放在meta{}配置项内,meta是专门用来给程序员存放数据的位置</p></li></ol><p>全局前置守卫可以用来做权限控制,确保用户只能访问他们被允许访问的页面</p><h3 id="全局后置守卫"><a href="#全局后置守卫" class="headerlink" title="全局后置守卫"></a>全局后置守卫</h3><p>全局解析守卫是在路由跳转之后但组件实例挂载之前执行的守卫,可以用来加载数据或执行异步操作</p><p>代码实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 全局解析守卫</span><br>router.<span class="hljs-title function_">beforeResolve</span>(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span></span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(to.<span class="hljs-property">matched</span>.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">record</span> =&gt;</span> record.<span class="hljs-property">meta</span>.<span class="hljs-property">requiresAuth</span>))&#123;<br>        <span class="hljs-comment">// 如果目标路由需要认证</span><br>        <span class="hljs-comment">// 模拟数据加载</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-comment">// 数据加载完成以后允许组件挂载</span><br>            <span class="hljs-title function_">next</span>()<br>        &#125;, <span class="hljs-number">1000</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 不需要认证,直接允许组件挂载</span><br>        <span class="hljs-title function_">next</span>()<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></p><p>全局解析守卫一般用于数据的异步加载,组件挂载之前加载数据,可以确保看到的是最新最准确的信息</p><h3 id="独享路由守卫"><a href="#独享路由守卫" class="headerlink" title="独享路由守卫"></a>独享路由守卫</h3><p>独享路由守卫指路由组件单独享有的路由守卫</p><ol><li><p>编写独享路由守卫</p><p> 独享路由守卫需要写在要使用的路由组件配置项内,通过<code>beforeEnter</code>配置项。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-comment">// 配置路由</span><br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>,<br>    <span class="hljs-attr">routes</span>: [<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">MyAbout</span>,<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">MyHome</span>,<br>            <span class="hljs-comment">// 独享路由守卫默认是前置的,没有后置的</span><br>            <span class="hljs-title function_">beforeEnter</span>(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)&#123;<br>                <span class="hljs-keyword">if</span>(to.<span class="hljs-property">matched</span>.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">record</span> =&gt;</span> record.<span class="hljs-property">meta</span>.<span class="hljs-property">requiresAuth</span>))&#123;<br>                <span class="hljs-comment">// 如果目标路由需要认证</span><br>                <span class="hljs-comment">// 模拟数据加载</span><br>                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-comment">// 数据加载完成以后允许组件挂载</span><br>                    <span class="hljs-title function_">next</span>()<br>                &#125;, <span class="hljs-number">1000</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">// 不需要认证,直接允许组件挂载</span><br>                    <span class="hljs-title function_">next</span>()<br>                &#125;<br>            &#125;<br>        &#125;,<br>    ]<br>&#125;);<br></code></pre></td></tr></table></figure><p> 里面逻辑与前置路由守卫差不多,只是编写位置有所改变。</p></li></ol><h3 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h3><p>组件内守卫是指在组件内定义的守卫,包括:beforeRouteEnter,beforeRouteUpdate,beforeRouteLeave这些守卫可以控制组件的加载,更新,离开。</p><p>代码实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;MyRouter&#x27;</span>,<br>    <span class="hljs-comment">// 通过路由规则进入该组件时被调用</span><br>    <span class="hljs-title function_">beforeRouteEnter</span>(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)&#123;<br>        <span class="hljs-title function_">next</span>(<span class="hljs-function"><span class="hljs-params">vm</span>=&gt;</span>&#123;<br>            vm.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;Welcome to MyRouter&#x27;</span><br>        &#125;)<br>    &#125;,<br>    <span class="hljs-comment">// 在当前路由改变，但是该组件被复用时调用</span><br>    <span class="hljs-title function_">beforeRouteUpdate</span>(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;router updated&#x27;</span><br>        <span class="hljs-title function_">next</span>()<br>    &#125;,<br>    <span class="hljs-comment">// 导航离开该组件的对应路由时调用</span><br>    <span class="hljs-title function_">beforeRouteLeave</span>(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;router leave&#x27;</span><br>        <span class="hljs-title function_">next</span>()<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p><p>可以用来执行组件级别的逻辑,比如在用户离开前询问是否保存未保存的数据,或者在进入时加载必要的数据。</p><h2 id="Hash工作模式与History工作模式"><a href="#Hash工作模式与History工作模式" class="headerlink" title="Hash工作模式与History工作模式"></a>Hash工作模式与History工作模式</h2><ol><li><p>兼容性问题：</p><ol><li><code>Hash工作模式</code>兼容性较好</li><li><code>History工作模式</code>兼容性较差。</li></ol></li><li><p>上线问题：</p><p> 当项目写完需要上线时,肯定需要将<code>.vue</code>文件全部构建为<code>.html/.css/.js</code>文件,这是就需要使用一个新的命令<code>npm run build</code>。运行完以后,就会生成一个新的目录<code>dist</code>。打包出来的文件必须放在服务器上<code>部署</code>才能够看到效果。这时History会出现一个很严重的问题：当用户浏览页面来回跳转时,因为是通过Vue路由跳转,后端没有匹配的路径,而前端的路径又会不停变化,当刷新一次时,就会出现404的问题。因为hash模式<code>#</code>后面的内容不会发送给服务器,所以也就不会有刷新之后404的问题。history想解决404问题需要用到一些后端库。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex的使用</title>
      <link href="/2025/02/27/Vue/026Vue--Vuex%E7%9A%84%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/02/27/Vue/026Vue--Vuex%E7%9A%84%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Vuex简单概述"><a href="#Vuex简单概述" class="headerlink" title="Vuex简单概述"></a>Vuex简单概述</h2><ol><li><p>什么是Vuex？<br> Vuex是一个<code>状态管理工具</code>,状态指的就是数据。说白了<span style="color:red;">vuex就是个插件,可以帮我们管理Vue中的数据。</span></p></li><li><p>使用场景：</p><ul><li>某个数据要在多个组件中使用时</li><li>多个组件共同维护一个数据</li></ul></li><li><p>优点：</p><ul><li>共同维护,数据集中化管理</li><li>响应式变化</li><li>操作简单（vuex有一些辅助函数）</li></ul></li><li><p>注意：</p><ul><li>不是所有场景都适用于vuex,只有在必要的时候才使用vuex</li><li>使用vuex之后会附加很多框架中的概念进来,增加项目的复杂度,有些事要完全没必要使用</li></ul></li></ol><h2 id="vuex的使用"><a href="#vuex的使用" class="headerlink" title="vuex的使用"></a>vuex的使用</h2><ol><li><p>安装vuex, <strong>vuex是个插件,如果脚手架初始化时没有选择,就需要额外安装</strong>。</p> <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i vuex<br></code></pre></td></tr></table></figure><p> 现在Vuex已经更新到Vue4版本，对应的是Vue3，如果你是Vue2想使用Vuex那么你需要安装Vuex3版本<code>npm i vuex@3</code></p></li><li><p>新建 <code>store/store.js</code> 文件专门存放vuex</p><p> 为了维护项目目录的整洁,在src目录下新建store目录创建store.js文件存放vuex</p></li><li><p>创建仓库 <code>store/store.js</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入vue</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-comment">// 导入vuex</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-comment">// vuex是vue的插件,需要use一下进行安装的初始化</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">// 创建仓库 store</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>()<br><br><span class="hljs-comment">// 导出仓库</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中导入,挂载到Vue实例上</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入store仓库</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/store.js&#x27;</span><br><br><span class="hljs-comment">// 创建vm</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>    <span class="hljs-comment">// 挂载到Vue上</span><br>    store,<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><p>现在我们就创建好了一个空仓库</p><h2 id="state-状态"><a href="#state-状态" class="headerlink" title="state 状态"></a>state 状态</h2><p>给仓库提供数据,并且使用仓库的数据</p><ol><li><p>提供数据</p><p> state提供唯一的公共数据源,所有共享数据都要放在store中的state中储存</p><p> 打开项目中的store.js文件,在state中添加需要共享的数据</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建仓库 store</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-comment">// state 状态,也叫数据,类似于vue中的data</span><br>    <span class="hljs-comment">// 1. data是组件自己的数据</span><br>    <span class="hljs-comment">// 2. state是整个vue项目中所有组件都可以访问的数据</span><br>    <span class="hljs-attr">state</span>:&#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">404</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>访问仓库中的数据</p><ul><li>获取store：<ol><li>vue模板中获取：this.$store</li><li>js文件中获取：import 导入 store</li><li>模板中：</li><li>组件逻辑中：this.$store.state.xxx</li><li>js模块中：store.state.xxx</li></ol></li></ul></li><li><p>每次都这样是否有些繁琐？可以通过辅助函数<code>mapState</code>获取</p></li></ol><h2 id="mapState辅助函数获取state中的数据"><a href="#mapState辅助函数获取state中的数据" class="headerlink" title="mapState辅助函数获取state中的数据"></a>mapState辅助函数获取state中的数据</h2><p>mapState辅助函数,可以将store中的数据投影到组件的计算属性中</p><ol><li><p>导入mapState</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;mapState&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>引入state属性</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;count&#x27;</span>])<br></code></pre></td></tr></table></figure></li><li><p>利用展开运算符,将里面的状态投影到计算属性</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">computed</span>:&#123;<br>    ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;count&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="严格模式以及vuex的单项数据流"><a href="#严格模式以及vuex的单项数据流" class="headerlink" title="严格模式以及vuex的单项数据流"></a>严格模式以及vuex的单项数据流</h2><ol><li><p>vuex同样遵循单向数据流,组件中不应该直接修改仓库的数据。vue默认不会监测。</p></li><li><p>开启严格模式,直接修改state中的值会报错</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建仓库 store</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-comment">// 开启严格模式</span><br>    <span class="hljs-attr">strict</span>: <span class="hljs-literal">true</span>,<br><br>    <span class="hljs-comment">// state 状态,也叫数据,类似于vue中的data</span><br>    <span class="hljs-comment">// 1. data是组件自己的数据</span><br>    <span class="hljs-comment">// 2. state是整个vue项目中所有组件都可以访问的数据</span><br>    <span class="hljs-attr">state</span>:&#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">404</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p> <strong>state中的数据只能通过<code>mutations</code>修改,并且mutations必须是同步的</strong></p></li></ol><h2 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h2><ol><li><p>定义mutations</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建仓库 store</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">state</span>:&#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">404</span><br>    &#125;,<br>    <span class="hljs-attr">mutations</span>:&#123;<br><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>使用mutations</p><p> <strong>mutations是一个对象,对象内存放修改state的方法,哪个组件想修改state,调用方法即可</strong></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">mutations</span>:&#123;<br>    <span class="hljs-comment">// 方法中接收两个参数,第一个是store中的state</span><br>    <span class="hljs-comment">// 调用mutations可以传递参数,传递载荷</span><br>    <span class="hljs-title function_">addCount</span>(<span class="hljs-params">state,x</span>)&#123;<br>        state.<span class="hljs-property">count</span> = x<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>组件中使用mutations</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-title function_">addCount</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 使用mutations</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addCount&#x27;</span>,<span class="hljs-number">10</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>注意：使用时可以带一个提交参数,但是<strong>提交参数只能有一个,如果有多个可以写成对象形式</strong></p><h2 id="mapMutations辅助函数"><a href="#mapMutations辅助函数" class="headerlink" title="mapMutations辅助函数"></a>mapMutations辅助函数</h2><p>mapMutations与mapState很像,mapMutations可以将mutations中的方法投影在methods中</p><p>使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapMutations &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-attr">methods</span>:&#123;<br>    ...<span class="hljs-title function_">mapMutations</span>([<span class="hljs-string">&#x27;addCount&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure></p><p>完成以后就可以通过this.方法名直接调用</p><p>注意：mapMutations中不能放异步操作,如果有异步的ajax请求请放在actions中</p><h2 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h2><p>state是存放数据的,mutations是存放更新数据方法的（便于监测数据,更新视图）,actions负责进行异步操作</p><ol><li><p>定义</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">actions</span>:&#123;<br>    <span class="hljs-title function_">setAsyncCount</span>(<span class="hljs-params">count,num</span>)&#123;<br>        <span class="hljs-comment">// 一秒后,给一个数num值</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            count.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;addCount&#x27;</span>,num)<br>        &#125;,<span class="hljs-number">1000</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用 — 组件中通过dispatch调用</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setAsyncCount</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;setAsyncCount&#x27;</span>,<span class="hljs-number">100</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>actions也有<code>mapActions辅助函数</code>,使用与前者几乎一样</p></li></ol><h2 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h2><p>getters可以帮我们从state数据中筛选出需要的数据</p><ol><li><p>使用</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建仓库 store</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-comment">// state 状态,也叫数据,类似于vue中的data</span><br>    <span class="hljs-comment">// 1. data是组件自己的数据</span><br>    <span class="hljs-comment">// 2. state是整个vue项目中所有组件都可以访问的数据</span><br>    <span class="hljs-attr">state</span>:&#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">404</span>,<br>        <span class="hljs-attr">list</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>],<br>    &#125;,<br>    <span class="hljs-attr">getters</span>:&#123;<br>        <span class="hljs-comment">// getters第一个参数是state,必须要有返回值</span><br>        <span class="hljs-attr">filterList</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">list</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item&gt;<span class="hljs-number">5</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>使用</p><ul><li>原始方法：$store.getters.filterList</li><li><code>mapGetters</code>使用：引入直接使用即可</li></ul></li></ol><h2 id="module模块化概念"><a href="#module模块化概念" class="headerlink" title="module模块化概念"></a>module模块化概念</h2><p>如果把所有的数据都放在state中,当项目变得越来越大时,vuex也会变得越来越难以维护,于是vuex模块化就诞生了</p><ol><li><p>定义模块</p><p> 定义user模块,user中管理用户的信息状态<code>modules/user.js</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> state = &#123;<br>    <span class="hljs-attr">userInfo</span>:&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zs&#x27;</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> mutations = &#123;&#125;<br><br><span class="hljs-keyword">const</span> actions = &#123;&#125;<br><br><span class="hljs-keyword">const</span> getters = &#123;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    state,<br>    mutations,<br>    actions,<br>    getters,<br>&#125;<br></code></pre></td></tr></table></figure><p> 定义setting管理项目应用的主题色<code>modules/setting.js</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> state = &#123;<br>    <span class="hljs-attr">theme</span>:<span class="hljs-string">&#x27;dark&#x27;</span>,<br>    <span class="hljs-attr">desc</span>:<span class="hljs-string">&#x27;不错不错&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> mutations = &#123;&#125;<br><br><span class="hljs-keyword">const</span> actions = &#123;&#125;<br><br><span class="hljs-keyword">const</span> getters = &#123;&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    state,<br>    mutations,<br>    actions,<br>    getters,<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在<code>store/store.js</code>文件中引入,并且注册这两个模块</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../modules/user&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Setting</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../modules/setting&#x27;</span><br><br>    <span class="hljs-comment">// 注册</span><br>    <span class="hljs-attr">modules</span>:&#123;<br>        <span class="hljs-title class_">User</span>,<br>        <span class="hljs-title class_">Setting</span>,<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>使用模块中的数据</p><ol><li>通过模块名访问：$store.state.模块名.xxx</li><li>通过mapState访问：<ol><li>默认根级别：mapState([‘xxx’])</li><li>子模块级别：mapState([‘模块名’,’xxx’]) 【需要开启命名空间namespace:true,】<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">namespace</span>:<span class="hljs-literal">true</span>,<br>    state,<br>    mutations,<br>    actions,<br>    getters,<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>访问模块内的mutations || actions || getting：</p></li></ol><ul><li>通过模块名访问：<ul><li>$store.mutations[‘模块名/xxx’]</li></ul></li><li>通过mapMutations || mapActions || mapGetting投影：<ul><li>根级别：mapMutations([‘xxxx’])</li><li>子模块级别：mapMutations(‘模块名’,[‘xxx’])</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue插槽的使用</title>
      <link href="/2025/02/26/Vue/025Vue--%E6%8F%92%E6%A7%BD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/02/26/Vue/025Vue--%E6%8F%92%E6%A7%BD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="插槽的基本使用"><a href="#插槽的基本使用" class="headerlink" title="插槽的基本使用"></a>插槽的基本使用</h2><p>在对组件进行复用时,可以通过传值改变组件中使用的数据,但组件中的结构取决于组件本身,无法修改。插槽就可以不改变组件本身的结构,且能够在组件本身结构的基础上添加想加的内容。那么什么是插槽？插槽就是子组件中提供给父组件的一个占位符,用slot标签表示,父组件可以在这占位符中填充任何模板代码,HTML,组件等。填充的内容会替代子组件的slot标签。简单来说就是在创造子组件时,我们留下了一片空白区域,父组件可以在这片空白区域填充不同的内容。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><ol><li><p>父组件内复用了子组件</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>子组件内简单显示内容</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 此时我们想在不修改子组件的前提下,给第一个name的后面显示一个’你好’,于是我们使用了插槽。插槽很简单,只需要在子组件内使用slot标签作为占位符,然后父组件内填入占位符想显示的内容即可</p></li><li><p>子组件内添加占位符</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>父组件内填入内容</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>这就是插槽的基本使用了</p><h2 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h2><p>在使用插槽时,如果父组件没有指定内容而我们却需要一个默认值,只需要给插槽设置一个默认值即可,给插槽设置默认值比你想的要简单许多,在需要在slot标签内,输入默认值即可,当我们设置了内容时,会使用设置的内容,而当我们没有设置内容时,会使用默认的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>默认值<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>具名插槽说白了就是在子组件使用插槽时,给插槽添加一个名字,而当父组件填写内容时也要根据名字选择将内容填入不同的插槽</p><ol><li><p>子组件中给插槽取名</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;slot2&quot;</span> &gt;</span>默认值<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;slot1&quot;</span> &gt;</span>默认值<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>父组件使用插槽时</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;slot1&quot;</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;slot2&quot;</span>&gt;</span>找工作<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="template标签"><a href="#template标签" class="headerlink" title="template标签"></a>template标签</h2><p>现在如果需要给h1标签的下方,添加一个div,一个h3标签,应该怎么办？如果使用具名插槽两个标签都需要name属性,使用时都需要slot属性,未免有些麻烦,这时我们可以拿一个div标签包裹两个标签,这样就可以方便许多,但这样又破坏了我们的结构,这时我们就可以使用template标签,因为template标签默认是不生成DOM结构的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 子组件 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;slot2&quot;</span> &gt;</span>默认值<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;slot1&quot;</span> &gt;</span>默认值<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;temp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 父组件 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;slot1&quot;</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;slot2&quot;</span>&gt;</span>找工作<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;temp&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>我们的插槽定义在子组件中,但是要在父组件中使用,而数据在子组件中,数据的作用域也只在子组件中,要如何在父组件使用插槽时,也能够使用子组件中的数据。我们当然可以通过props或者自定义事件,消息订阅…传递数据,但是还有一个更简单的办法,在创建插槽时,用类似于v-bing的方式将数据传递到父组件中。</p><ol><li><p>子组件传递数据</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;slot2&quot;</span> &gt;</span>默认值<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;slot1&quot;</span> &gt;</span>默认值<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;temp&quot;</span> <span class="hljs-attr">:studentName</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <strong>我们将数据以studentName的名字传递给父组件</strong></p></li><li><p>父组件接收</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;slot1&quot;</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;slot2&quot;</span>&gt;</span>找工作<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;temp&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;temp&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;data&quot;</span> &gt;</span> <br>                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; data &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <strong>数据存放在scope属性中,这边我们接收数据时,给数据取名叫data。这边需要注意的是,只有使用template标签才可以接收到数据</strong></p></li></ol><h2 id="插槽样式"><a href="#插槽样式" class="headerlink" title="插槽样式"></a>插槽样式</h2><p><strong>插槽样式我们正常写在父组件的style标签中即可</strong></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue配置代理</title>
      <link href="/2025/02/26/Vue/024Vue--%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
      <url>/2025/02/26/Vue/024Vue--%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="配置代理的作用"><a href="#配置代理的作用" class="headerlink" title="配置代理的作用"></a>配置代理的作用</h2><p>配置代理可以解决跨域问题</p><blockquote><p>什么是跨域？跨域就是两台服务器之间请求与响应时,违反了同源策略（指协议,ip,端口有一样不同）,那么在响应请求时,浏览器就会拦截响应请求,使请求失败</p></blockquote><h2 id="如何解决跨域"><a href="#如何解决跨域" class="headerlink" title="如何解决跨域"></a>如何解决跨域</h2><ol><li><p>引入<code>cors</code>并注册</p><p>会让所有服务器都可以请求,无任何限制</p></li><li><p>配置代理</p><p>配置代理可以指定对应的服务器允许请求</p></li></ol><h2 id="如何配置代理"><a href="#如何配置代理" class="headerlink" title="如何配置代理"></a>如何配置代理</h2><p><strong>在Vue.config.js中配置</strong></p><h3 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h3><p>  直接配置如下代码<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">    <span class="hljs-attr">devServer</span>:&#123;<br>    <span class="hljs-attr">proxy</span>:<span class="hljs-string">&quot;http://localhost:8081&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></p><ul><li>优点：配置简单,前端直接发给8080端口</li><li>缺点：无法配置多个代理,无法控制请求是否走代理</li><li>注意：只有当前端不存在资源时,才会将请求发送到后端,如果前端本身就存在资源,则会将前端的资源返回,请求也不会发送到后端服务器</li></ul><h3 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h3><p>  配置如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-attr">devServer</span>: &#123;<br>      <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/index&#x27;</span>: &#123;<span class="hljs-comment">// 匹配所有以 &#x27;/index&#x27;开头的请求路径</span><br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8081&#x27;</span>,<span class="hljs-comment">// 代理目标的基础路径</span><br>        <span class="hljs-attr">pathRewrite</span>: &#123;<span class="hljs-string">&#x27;^/index&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>&#125;,<span class="hljs-comment">// 代理往后端服务器的请求去掉 /index 前缀</span><br>        <span class="hljs-attr">ws</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">// 用于WebSocket支持</span><br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span><br>      &#125;,<br>      <span class="hljs-string">&#x27;/num&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8082&#x27;</span>,<br>        <span class="hljs-attr">pathRewrite</span>: &#123;<span class="hljs-string">&#x27;^/num&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   changeOrigin设置为true时，服务器收到的请求头中的host为服务器相同的端口号</span><br><span class="hljs-comment">   changeOrigin设置为false时，服务器收到的请求头中的host为真正的端口号</span><br><span class="hljs-comment">   changeOrigin默认值为true</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理</li><li>缺点：配置略微繁琐，请求资源时必须加前缀</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的防抖与节流</title>
      <link href="/2025/02/25/JavaScript/JavaScript%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/"/>
      <url>/2025/02/25/JavaScript/JavaScript%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><ol><li>防抖简单介绍</li></ol><blockquote><p>什么是防抖?防止事件的频繁触发。当我们给一个事件设定了防抖函数后,那么在触发事件的一定时间间隔内,如果事件再次触发,那么之前的设定的延迟执行将会被取消,重新开始计算间隔时间,只有在设定的时间间隔内没有触发事件,才会执行事件回调函数。</p></blockquote><ol><li>防抖原理</li></ol><blockquote><p>防抖的核心其实是借助javascript中的定时器setTimeout来实现的。当一个事件触发,我们先设置一个定时器,让函数延迟在一定时间内执行。如果在设定时间内,时间再次被触发,那么我们之前设定的定时器就会清除,重新开启定时器计时。只有在计时时间内时间没有被触发才会调用回调函数。</p></blockquote><ol><li><p>最简单防抖代码</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">func, delay</span>) &#123;<br><span class="hljs-keyword">let</span> timer;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> context = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">const</span> args = <span class="hljs-variable language_">arguments</span>;<br>    <span class="hljs-comment">// 清除之前的定时器</span><br>    <span class="hljs-built_in">clearTimeout</span>(timer);<br>    <span class="hljs-comment">// 设置新的定时器</span><br>    timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 调用原始函数，并传递正确的上下文和参数</span><br>        func.<span class="hljs-title function_">apply</span>(context, args);<br>    &#125;, delay);<br>&#125;;<br>&#125;   <br><br></code></pre></td></tr></table></figure></li></ol><blockquote><p>上方是一个最简单的防抖函数,他需要两个参数,需要添加防抖的函数,以及延迟的时间delay。函数内部首先通过clearTimeout(timer)清除之前可能存在的定时器,然后开启一个计时器,并且传入延迟时间,当延迟时间结束以后才会执行真正的事件回调函数。</p></blockquote><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><ol><li>节流简单介绍</li></ol><p>节流也是控制事件的触发频率,只不过节流是控制事件在一定时间内只能触发一次,当触发一个事件后,一定事件内事件将无法被触发。</p><ol><li>节流原理</li></ol><p><strong>实现节流的方式有两种:时间戳与定时器</strong></p><p>时间戳:时间戳的原理是在事件触发时记录当前时间戳,与上次执行函数的时间戳进行比较,如果大于预定值,就执行函数并且更新时间戳,否则就不执行函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">func, delay</span>) &#123;<br>    <span class="hljs-keyword">let</span> previous = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>        <span class="hljs-keyword">const</span> context = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-keyword">const</span> args = <span class="hljs-variable language_">arguments</span>;<br>        <span class="hljs-keyword">if</span> (now - previous &gt; delay) &#123;<br>            func.<span class="hljs-title function_">apply</span>(context, args);<br>            previous = now;<br>        &#125;<br>    &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>定时器:定时器原理就是判断是否存在一个定时器,如果存在说明上一次执行还没有走完,如果不存在说明上一次执行已经完毕,此时我们设置一个定时器在延迟结束后执行函数,并清空定时器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">func, delay</span>) &#123;<br>    <span class="hljs-keyword">let</span> timer;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> context = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-keyword">const</span> args = <span class="hljs-variable language_">arguments</span>;<br>        <span class="hljs-keyword">if</span> (!timer) &#123;<br>            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                func.<span class="hljs-title function_">apply</span>(context, args);<br>                timer = <span class="hljs-literal">null</span>;<br>            &#125;, delay);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>搜索框联想</li></ol><blockquote><p>当我们用搜索框进行搜索时,每输入一个字符就会触发一次搜索联想请求，这将导致大量的网络请求瞬间发送到服务器,这会给服务器带来巨大压力,造成延迟,使用防抖就可以有效解决这一问题。</p></blockquote><ol><li>窗口大小调整</li></ol><blockquote><p>在窗口大小调整过程中，会频繁触发resize事件，如果在这个事件处理函数中进行复杂的页面布局调整或重新计算元素位置等操作，不进行任何优化的话，会导致浏览器性能急剧下降，出现页面卡顿、闪烁等问题。在这种情况下，我们可以根据具体需求选择使用节流或防抖技术。如果希望在用户停止调整窗口大小后，一次性进行精确的布局调整，那么防抖技术是一个不错的选择</p></blockquote><ol><li>滚动加载</li></ol><blockquote><p>许多网站和应用中，为了提高用户体验，采用了滚动加载的方式来展示大量的数据，如社交媒体平台的动态列表、新闻资讯平台的文章列表等 。当用户滚动页面时，触发scroll事件，判断是否滚动到页面底部，如果是，则向服务器发送请求，加载更多的数据并追加到页面上。节流可以大大改善用户体验</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web移动端适配方案</title>
      <link href="/2025/02/23/Web/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/"/>
      <url>/2025/02/23/Web/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ol><li>布局更多的使用flex,尺寸使用rem,vw,vh为单位。</li><li>如果是根据不同屏幕需要有不同的布局,一般通过检测屏幕尺寸换不同的站点或者媒体查询使用两套css</li></ol><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><h3 id="rem单位简单介绍"><a href="#rem单位简单介绍" class="headerlink" title="rem单位简单介绍"></a>rem单位简单介绍</h3><blockquote><p>rem以html字体大小为1rem的大小,比如说html字体大小为16px,则1rem就等于16px。rem之所以可以自适应,其实是通过js去重新设置html的字体大小</p><p>计算方式:html字体大小 = (js获取到的当前设备宽度/设计图宽度) * 设计图宽度下的rem大小</p></blockquote><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p><strong>通过媒体查询来设置不同屏幕的html的fontsize大小</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">320</span>) &#123;<br>    <span class="hljs-selector-tag">html</span>&#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">360</span>) &#123;<br>    <span class="hljs-selector-tag">html</span>&#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">480</span>) &#123;<br>    <span class="hljs-selector-tag">html</span>&#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">22px</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">560</span>) &#123;<br>    <span class="hljs-selector-tag">html</span>&#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">26px</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">640</span>) &#123;<br>    <span class="hljs-selector-tag">html</span>&#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">720</span>) &#123;<br>    <span class="hljs-selector-tag">html</span>&#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">34px</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>缺点：</strong></p><pre><code class="hljs">- 需要针对不同尺寸编写大量的媒体查询- 如果动态改变尺寸,不会实时的进行更新</code></pre><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p><strong>用js动态获取设备宽度</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.设备宽度(包含滚动条)</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">WinWidth</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">availWidth</span><br><span class="hljs-comment">// 2. 设备宽度(不包含滚动条)</span><br><span class="hljs-comment">// 移动端一般会给最外边的盒子设置最大宽度为750px,所以这边我们也需要设置以下,取两个变量中的较小值</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DocWidth</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientWidth</span>,<span class="hljs-number">750</span>)<br><br><span class="hljs-keyword">const</span> fontsize = (<span class="hljs-title class_">DocWidth</span>/<span class="hljs-number">750</span>)*<span class="hljs-number">16</span><br><span class="hljs-comment">// 设置html大小</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = fontsize+<span class="hljs-string">&quot;px&quot;</span><br></code></pre></td></tr></table></figure><h3 id="vh-vw单位简单介绍"><a href="#vh-vw单位简单介绍" class="headerlink" title="vh/vw单位简单介绍"></a>vh/vw单位简单介绍</h3><blockquote><p>1vw = 1%视口宽度,1vh = 1%视口高度。假设屏幕高宽是750*1200,那么1vh就是7.5px,1vw就是12px。使用vw做单位无需做计算,因为vw会自动根据屏幕宽度变化,vh一般用来做全屏设计。</p></blockquote><h2 id="方案二【仅仅是一些布局的不同】"><a href="#方案二【仅仅是一些布局的不同】" class="headerlink" title="方案二【仅仅是一些布局的不同】"></a>方案二【仅仅是一些布局的不同】</h2><p><strong>通过媒体查询,检测屏幕大小,然后使用两套不同的css</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 小于960px移动端 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;screen and (min-width:1px) and (max-width:959px)&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/iphone.css&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 大于960px,pc端 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;screen and (min-width:960px)&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/pc.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="方案三【变动太大】"><a href="#方案三【变动太大】" class="headerlink" title="方案三【变动太大】"></a>方案三【变动太大】</h2><blockquote><p>当用户进入网站时,先统一进入一个站点,然后通过js检测屏幕的宽度,是否大于一个960px【因为PC端与移动端的区分点一般就是960px】,比如说如果大于960px就让用户跳转pc端站点,小于960就跳转到移动端站点</p></blockquote><h2 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h2><ol><li>关于边距的处理:<ul><li>靠左靠右这种的一般使用flex布局</li><li>顶开小部分距离使用rem,vw</li></ul></li><li>图片一般都是设置宽度不设置高度,防止图片变形,但是如果屏幕跨度过大,可能导致图片大的很夸张,这时可以考虑设置最大宽度,然后居中,避免拉长</li><li>在一些大屏可视化项目里,界面必须是满屏幕的,不能溢出不能短,但这时通过f11切换全屏,rem,vw不会变化,所以这种项目有的高度可以考虑用vh来做</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue动画与过渡效果</title>
      <link href="/2025/02/22/Vue/023Vue--%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
      <url>/2025/02/22/Vue/023Vue--%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>在Vue中,我们有一种新的添加动画的方式,是Vue帮我们新封装的</p><ol><li><p>用以前的方式创建一个简单的动画效果</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> show &#123;<br>    <span class="hljs-selector-tag">from</span>&#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100%</span>);<br>    &#125;<br>    <span class="hljs-selector-tag">to</span>&#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0px</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义两个类,使用这个动画</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 进入时激活样式 */</span><br><span class="hljs-selector-class">.v-enter-active</span>&#123;<br>    <span class="hljs-attribute">animation</span>: show <span class="hljs-number">1s</span>;<br>&#125;<br><span class="hljs-comment">/* 离开时激活样式 */</span><br><span class="hljs-selector-class">.v-leave-active</span>&#123;<br>    <span class="hljs-comment">/* reverse意为反转 */</span><br>    <span class="hljs-attribute">animation</span>: show <span class="hljs-number">1s</span> reverse;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>给想添加动画的标签用<code>&lt;transition&gt;</code>标签包裹起来,<transition>标签可以添加一些属性,但是我们给使用动画的样式的类取名时就不能随便取名了,而是要按照vue的取名规则:比如我这边一个进入与离开的动画,需要取名’.v-enter-active’和’.v-leave-active’,否则动画就不会生效。</p><ul><li>name:<br>  当我们添加了name属性后,那我们在给使用动画的样式的类取名时,就需要使用name-动画-active的方式</li><li><p>appear: true || false<br>  当我们第一次进入浏览器时,就会使用动画效果</p><p><strong>transition标签最终渲染在浏览器上时,不会显示</strong></p></li></ul></li></ol><p>总结就是只要我们定义好动画以及使用动画的样式的类名,并且名字按照vue规定的来,vue就会保证在transition标签内的元素产生变化时,帮我们添加上动画效果。</p><h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><ol><li><p>认识两个简单的过渡类名<code>v-enter</code>与<code>v-enter-to</code>,他们分别代表进入的起点与进入的终点。</p></li><li><p>给需要过渡的元素添加过渡时间等属性</p><ul><li>可以直接在需要过渡的元素选择器里写transition样式</li><li>或者加在<code>.v-enter-active,.v-leave-active</code>两个元素选择器中</li></ul></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 进入的起点,离开的终点 */</span><br><span class="hljs-selector-class">.v-enter</span>,<br><span class="hljs-selector-class">.v-leave-to</span>&#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">100%</span>);<br>&#125;<br><br><span class="hljs-comment">/* 过渡 */</span><br><span class="hljs-selector-class">.v-enter-active</span>,<br><span class="hljs-selector-class">.v-leave-active</span>&#123;<br>    <span class="hljs-attribute">transition</span>: <span class="hljs-number">0.5s</span>;<br>&#125;<br><br><span class="hljs-comment">/* 进入的终点,离开的起点 */</span><br><span class="hljs-selector-class">.v-enter-to</span>,<br><span class="hljs-selector-class">.v-leave</span>&#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多个元素同样过渡效果"><a href="#多个元素同样过渡效果" class="headerlink" title="多个元素同样过渡效果"></a>多个元素同样过渡效果</h2><p> 如果是多个元素有同样的过渡效果需要使用<code>transition-group</code>标签包裹起来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">transition-group</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>你好!!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>你好!!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition-group</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>用transition-group标签包裹时,需要给里面的每个子元素添加key值</strong></p><h2 id="集成第三方动画库"><a href="#集成第三方动画库" class="headerlink" title="集成第三方动画库"></a>集成第三方动画库</h2><p>Animate.css:地址:<a href="https://animate.style/">https://animate.style/</a></p><h3 id="Animate-css使用方法"><a href="#Animate-css使用方法" class="headerlink" title="Animate.css使用方法"></a>Animate.css使用方法</h3><ol><li><p>下载包</p> <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> animate.css<br></code></pre></td></tr></table></figure></li><li><p>引入</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;animate.css&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>配置【在transition标签的name属性添加’animate<strong>animated animate</strong>bounce’】</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span></span><br><span class="hljs-tag">    <span class="hljs-attr">appear</span></span><br><span class="hljs-tag">    <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;animate__animated animate__bounce&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span> &gt;</span>你好!!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>指定要使用的动画【使用’enter-active-class’与’leave-active-class’属性,指定进入动画与离开动画即可】</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span></span><br><span class="hljs-tag">    <span class="hljs-attr">appear</span></span><br><span class="hljs-tag">    <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;animate__animated animate__bounce&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">enter-active-class</span>=<span class="hljs-string">&quot;animate__swing&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">leave-active-class</span>=<span class="hljs-string">&quot;animate__backOutUp&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span> &gt;</span>你好!!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue消息订阅与发布</title>
      <link href="/2025/02/22/Vue/022Vue--%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85%E4%B8%8E%E5%8F%91%E5%B8%83/"/>
      <url>/2025/02/22/Vue/022Vue--%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85%E4%B8%8E%E5%8F%91%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是消息订阅与发布"><a href="#什么是消息订阅与发布" class="headerlink" title="什么是消息订阅与发布"></a>什么是消息订阅与发布</h2><p>消息的订阅与发布也是一种实现组件之间通信的方式,与全局事件总线一样,也可以实现任意组件之间的通信。两个组件之间,收数据的组件订阅消息,发数据的组件发布消息。（消息的订阅与发布使用原生js的方式比较麻烦,这边给大家推荐几个好用的库）</p><h2 id="pubsub-js"><a href="#pubsub-js" class="headerlink" title="pubsub-js"></a>pubsub-js</h2><ol><li><p>安装pubsub-js库</p> <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i pubsub-js<br></code></pre></td></tr></table></figure></li><li><p>引入（在要订阅消息与发布消息的两个组件之中引入即可）</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入pubsub-js库</span><br><span class="hljs-keyword">import</span> pubsub <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pubsub-js&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>订阅消息（在要收数据的组件中订阅消息）</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 订阅消息</span><br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 订阅消息</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">pubId</span> = pubsub.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;getStudentNameSub&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">msgName,data</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;有人发布消息了&#x27;</span>)<br>    &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><p> <strong>使用pubsub上的subscribe()方法可以订阅消息,需要提供消息名,以及回调函数,当有人发布消息时就会执行回调函数,回调函数内可以收到两个参数,一个是消息名,第二个才是收到的数据,订阅消息会返回一个id,当我们取消订阅时需要使用到这个id,有点类似与定时器</strong></p></li><li><p>发布消息（要在发数据的组件中发布消息）</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-title function_">sendStudentName</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">// 发布消息</span><br>        pubsub.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&#x27;getStudentNameSub&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>取消订阅消息（在订阅消息的组件中取消订阅）</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">beforeDestroy</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 取消订阅消息</span><br>    pubsub.<span class="hljs-title function_">unsubscribe</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">pubId</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue全局事件总线</title>
      <link href="/2025/02/19/Vue/021Vue--%E5%85%A8%E5%B1%80%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/"/>
      <url>/2025/02/19/Vue/021Vue--%E5%85%A8%E5%B1%80%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是全局事件总线（GlobalEventBus）？"><a href="#什么是全局事件总线（GlobalEventBus）？" class="headerlink" title="什么是全局事件总线（GlobalEventBus）？"></a>什么是全局事件总线（GlobalEventBus）？</h2><p>全局事件总线其实就是一种组件之间通信的方式,可以进行任意组件间通信,大大方便了组件之间的数据传递。例如：B组件要给A组件传递数据,而B组件与A组件是兄弟组件,不能直接传递数据,这时候就需要借助一个中介来传递,我们假设它为x。如果B要给A传递数据,那么A可以给x绑定一个自定义事件,事件回调留在A组件身上,让x带上这个事件,只要别的组件触发这个事件,A组件就可以收到数据,这时就可以让B组件触发事件,执行A身上的回调函数,将数据传递给A组件。</p><ol><li><p>总而言之：</p><ol><li>哪个组件接收数据,就让哪个组件给x绑定事件,并且自身含事件回调函数</li><li>哪个组件发送数据,哪个组件就触发事件</li></ol></li><li><p>中介x（也就是全局事件总线）需要满足的条件</p><ol><li>具有$on,$emit,$off等</li><li>每个组件都能访问到x</li></ol></li></ol><p>$on,$emit,$off这三个方法都在Vue原型对象身上,而vc与vm都可以访问到Vue原型上的属性与方法,所有全局事件总线需要放在Vue原型对象上才能确保每个组件都可以访问<br>    VueComponent.prototype.proto === Vue.prototype</p><h2 id="安装全局事件总线"><a href="#安装全局事件总线" class="headerlink" title="安装全局事件总线"></a>安装全局事件总线</h2><pre><code class="hljs"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = <span class="hljs-variable language_">this</span>    <span class="hljs-comment">//安装全局事件总线，this就是当前应用的vm</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></code></pre><h2 id="使用全局事件总线"><a href="#使用全局事件总线" class="headerlink" title="使用全局事件总线"></a>使用全局事件总线</h2><ol><li><p>接数据：A组件想要接收数据,使用A组件给$bus绑定事件,事件回调函数留在自身身上</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-title function_">demo</span>(<span class="hljs-params">name</span>)&#123;...&#125;<br>&#125;<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$on(<span class="hljs-string">&#x27;xxx&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">demo</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>发数据：这边B组件发数据,B组件就触发事件</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$emit(<span class="hljs-string">&#x27;xxx&#x27;</span>,数据)<br></code></pre></td></tr></table></figure></li><li><p>注意：最好在beforeDestory钩子中,用$off去解绑当前组件所用到的事件,以免全局事件总线负载过大</p></li></ol><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><p>生命周期挂载流程：<br>1.安装全局事件总线：<br>    找到main.js,在main.js上安装全局事件总线<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = <span class="hljs-variable language_">this</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></p><p>2.给全局事件总线绑定事件<br>    A组件要接收数据,所以在A组件内为$bus【全局事件总线】绑定自定义事件,并写下事件回调,然后通过事件回调接收数据<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-title function_">demo</span>(<span class="hljs-params">data</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>    &#125;<br>&#125;,<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$on(<span class="hljs-string">&#x27;sendData&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">demo</span>)<br>&#125;<br></code></pre></td></tr></table></figure></p><p>3.触发自定义事件<br>    B组件要传递数据,所以要B组件触发事件<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-title function_">sendData</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$emit(<span class="hljs-string">&#x27;sendData&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>4.解绑自定义事件<br>    在组件销毁之前解绑全局事件总线上的自定义事件,记住要传递参数,如果不传递参数,默认将销毁全局事件总线上的所有自定义事件,在B组件内<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">beforeDestroy</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$off(<span class="hljs-string">&#x27;sendData&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>父向子传递数据：props</li><li>子向父传递数据：<ol><li>props【在父组件内提前写好函数,并将函数传递给子组件】</li><li>自定义事件</li><li>通过ref属性</li></ol></li><li><p>任意：全局事件总线</p></li><li><p>全局事件总线（GlobalEventBus）</p><ul><li>一种组件之间通信的方式,适用于任意组件之间的通信</li><li>安装全局事件总线   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    ......<br>    <span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = <span class="hljs-variable language_">this</span> <span class="hljs-comment">// 安装全局事件总线,$bus就是当前应用的this,才可以访问到$on以及$emit</span><br>    &#125;<br>    ......<br>&#125;)<br></code></pre></td></tr></table></figure></li><li>使用全局事件总线<ol><li>接收数据组件 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">methods</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">demo</span>(<span class="hljs-params">data</span>)&#123;...&#125;<br>&#125;,<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$on(<span class="hljs-string">&#x27;xxx&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">demo</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li>提供数据<code>this.$bus.$emit(&#39;xxx&#39;,data)</code></li></ol></li><li>最好在beforeDestory钩子中,使用$off解绑当前组件所用到的事件</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件的自定义事件</title>
      <link href="/2025/02/18/Vue/020Vue--%E7%BB%84%E4%BB%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/"/>
      <url>/2025/02/18/Vue/020Vue--%E7%BB%84%E4%BB%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是组件自定义事件"><a href="#什么是组件自定义事件" class="headerlink" title="什么是组件自定义事件"></a>什么是组件自定义事件</h2><p>我们都知道JS有自己的内置事件,如:’click’,’keyUp’,’change’事件。自定义事件其实就是指自己定义的事件,包含事件名,事件回调等,定义好之后给组件使用。组件自定义事件也是一种组件之间通信的方式,适用于子组件==&gt;父组件传递数据</p><h2 id="子组件怎么给父组件传值？"><a href="#子组件怎么给父组件传值？" class="headerlink" title="子组件怎么给父组件传值？"></a>子组件怎么给父组件传值？</h2><p>一. 通过<code>props</code>配置项传值</p><p>1) 先找到父组件,定义一个接收子组件数据的函数,设置参数,并存入我们的变量中。</p><p>2) 通过在父组件内使用子组件,将函数传递给子组件,如:<code>&lt;Student :getSchoolName=&quot;getSchoolName&quot; &quot;&gt;&lt;/Student&gt;</code></p><p><strong><em> 注意：因为我们这边传入的是一个函数,所以要使用一个冒汗去识别函数 </em></strong></p><p>3) 进入子组件,首先就是需要使用<code>props</code>配置项接收函数。接收以后就可以在子组件内调用函数（通常绑定一个事件,触发以后调用函数,传递参数）,并将数据作为参数设置,父组件内同样也能收到这些参数</p><p>4) 简化代码</p><p>父组件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    &lt;div&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Student</span> <span class="hljs-attr">:getStudentName</span>=<span class="hljs-string">&quot;getStudentName&quot;</span> /&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>/&gt;</span></span><br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-attr">methods</span>:&#123;<br>        <span class="hljs-title function_">getStudentName</span>(<span class="hljs-params">name</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name)<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;script/&gt;<br></code></pre></td></tr></table></figure></p><p>子组件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;button @click=&quot;sendNameToSchool&quot; &gt;点击发送数据&lt;button/&gt;<br>    &lt;div/&gt;<br>&lt;template/&gt;<br><br>&lt;script&gt;<br>export default&#123;<br>    data()&#123;<br>        return &#123;<br>            name: &#x27;江西&#x27;<br>        &#125;<br>    &#125;,<br>    props:[&#x27;getStudentName&#x27;,],<br>    methods:&#123;<br>        sendNameToSchool()&#123;<br>            this.getStudentName(this.name)<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;script/&gt;<br></code></pre></td></tr></table></figure></p><p>5) <code>props</code>子组件给父组件传递数据的过程就是：子组件通过调用父组件传递过来接收数据的函数,实现子组件往父组件传递数据。</p><p>二. 组件自定义事件实现子组件==&gt;父组件传值</p><p>1) 组件自定义事件需要用到<code>v-on</code>或者写成<code>@</code>,<code>v-on</code>在谁的身长,就是给谁绑定组件自定义事件</p><p>2) 在父组件内,给子组件绑定一个自定义事件,并设置一个回调函数,接收数据参数</p><p>3) 子组件内,通过<code>$emit()</code>触发事件,并且将数据作为参数传递</p><p><strong>$emit()接收多个参数,第一个参数是触发的事件名,后面的参数都是需要传递的数据</strong></p><p>4) 简化代码</p><p>父组件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    &lt;div&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Student</span> <span class="hljs-attr">v-on:getStudentName</span>=<span class="hljs-string">&quot;getStudentName&quot;</span> /&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>/&gt;</span></span><br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-attr">methods</span>:&#123;<br>        <span class="hljs-title function_">getStudentName</span>(<span class="hljs-params">name,...prarams</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name,...prarams)<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;script/&gt;<br></code></pre></td></tr></table></figure></p><p>子组件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;button @click=&quot;sendNameToSchool&quot; &gt;&lt;button /&gt;<br>    &lt;div/&gt;<br>&lt;template/&gt;<br><br>&lt;script&gt;<br>export default&#123;<br>    methods:&#123;<br>        sendNameToSchool()&#123;<br>            this.$emit(&#x27;getStudentName&#x27;,name,x,y,z)<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;script/&gt;<br></code></pre></td></tr></table></figure></p><p><strong><em> 这边我们传递了多个参数,可以使用ES6中的…prarams接收,…prarams意为扩展运算符,它会将我们没有接收的参数作为一个数组全部保存在里面【ES6】 </em></strong></p><p>三. 通过<code>ref</code>实现子组件往父组件传递数据</p><p>1) ref相当于一个组件标识符,通过该组件标识符可以直接拿到组件实例对象,而自定义事件就是绑定在组件实例对象上的</p><p>2) 在父组件内,给子组件添加ref属性,并且设置一个类似于id的值,这样我们就可以通过<code>this.$refs.值</code>去找到这个组件,然后通过<code>.$on</code>去给这个组件绑定自定义事件以及设置回调函数。</p><p>3) 简化代码</p><p>父组件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    &lt;div&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Student</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;student&quot;</span> /&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>/&gt;</span></span><br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-attr">methods</span>:&#123;<br>        <span class="hljs-title function_">getStudentName</span>(<span class="hljs-params">name,...prarams</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name,...prarams)<br>        &#125;<br>    &#125;,<br>    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">// 绑定了getStudentName事件</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">student</span>.$on(<span class="hljs-string">&#x27;getStudentName&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getStudentName</span>())<br>    &#125;<br>&#125;<br>&lt;script/&gt;<br></code></pre></td></tr></table></figure></p><p>4) 子组件与之前是差不多的,这种方法与之只是绑定事件不一样,触发事件的方式并没有区别</p><pre><code class="hljs">*** 如果希望事件只被触发一次,可以把`$on`改为`$once`类似于事件修饰词 ***</code></pre><h2 id="给组件实例对象解绑自定义事件"><a href="#给组件实例对象解绑自定义事件" class="headerlink" title="给组件实例对象解绑自定义事件"></a>给组件实例对象解绑自定义事件</h2><p>如果一个组件实例对象上的某个自定义事件不在使用,就需要进行解绑</p><p>1) 使用<code>$off()</code>方法。给哪个组件绑的事件就需要找哪个组件进行解绑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-title function_">unbind</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//  解绑一个自定义事件</span><br>        <span class="hljs-variable language_">this</span>.$off(<span class="hljs-string">&#x27;getStudentName&#x27;</span>)<br>        <span class="hljs-comment">// 解绑多个自定义事件</span><br>        <span class="hljs-variable language_">this</span>.$off([<span class="hljs-string">&#x27;getStudentName&#x27;</span>,<span class="hljs-string">&#x27;getSchoolName&#x27;</span>])<br>        <span class="hljs-comment">// 解绑所有自定义事件</span><br>        <span class="hljs-variable language_">this</span>.$off()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2) 注意点：</p><ul><li>只要某个事件被触发就会调用指定的函数。</li><li>vm和vc都能使用生命周期钩子。</li><li>一个组件如果被销毁了,那么该组件身上的所有自定义事件也就失效了</li><li>如果vm被销毁了,那么vm的所有子组件也就都销毁了,因此子组件身上的所有自定义事件也就失效了</li></ul><h2 id="两个注意点："><a href="#两个注意点：" class="headerlink" title="两个注意点："></a>两个注意点：</h2><ol><li><p>使用ref绑定自定义事件时,不能直接将自定义事件的回调函数定义写在<code>this.$refs.student.$on</code>方法的参数上,因为这样this的指向就会出问题,一般会触发的事件【this.$emit()在哪个组件内】,事件回调函数中的this就指向谁。但是我们可以将回调函数写为箭头函数,这样this的指向是正确的</p></li><li><p><strong>组件默认使用自定义事件,无法使用DOM事件</strong>。组件标签默认标注的事件名都是自定义事件,哪怕事件名与原生DOM事件名相同,vue也会将那当作自定义事件处理。但是我们可以通过<code>native</code>【原生的】修饰符,给组件标签绑定上原生DOM事件,使用native修饰符后,事件相当于绑定在了最外层的盒子上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">Student</span> @click.<span class="hljs-property">native</span>=<span class="hljs-string">&quot;sendNameToSchool&quot;</span> /&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>组件自定义事件:一种组件间通信的方式,适用于：子组件往父组件传递数据【在父组件中给子组件添加自定义事件,子组件触发自定义事件】</p></li><li><p>使用场景：A是父组件,B是子组件,那么要在A中给B绑定自定义事件（事件的回调在A中）</p></li><li><p>绑定自定义事件的方式：</p><ul><li>第一种方式：在父组件中：<code>v-on:getStudentName=&quot;getStudentName&quot;</code></li><li>第二种方式：在父组件中：<code>this.$refs.student.$on()</code></li></ul></li><li><p>解绑自定义事件：<code>this.$off(&#39;student&#39;)</code></p></li><li><p>组件上也可以使用原生DOM事件,需要使用<code>native</code>修饰符</p></li><li><p>通过<code>this.$refs.student.$on(&#39;getStudentName&#39;,回调函数)</code>绑定自定义事件时,回调要么配置在methods中,要么使用箭头函数,否则this指向会出问题</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器的本地存储</title>
      <link href="/2025/02/16/JavaScript/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
      <url>/2025/02/16/JavaScript/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器的本地存储"><a href="#浏览器的本地存储" class="headerlink" title="浏览器的本地存储"></a>浏览器的本地存储</h2><blockquote><p>在浏览网站时,并不是所有数据都是存储在数据库内的,有些数据也会被浏览器存储在我们的本地,这就是浏览器的本地存储</p></blockquote><hr><h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><blockquote><p>LocalStorage是Html5的新特性。有些时候我们本地存储时,需要存储的信息较大,Cookie无法满足我们的需求,这时候就可以使用LocalStorage进行本地存储</p></blockquote><ol><li>LocalStorage的优点<ol><li>LocalStorage的存储大小一把为5MB,可以存储更多的信息</li><li>LocalStorage是持久存储,并不会随着页面的关闭就消失,除非主动清理,不然会一直存在</li><li>仅存储在本地,不像Cookie那样每次HTTP请求都会被携</li></ol></li><li><p>LocalStorage的缺点</p><ol><li>存在浏览器兼容问题</li><li>如果浏览器设置为隐私模式,那我们将无法读取LocalStorage</li><li>LocalStorage受到同源策略的限制,即端口,协议,主机地址有任何不相同,都不会访问</li></ol></li><li><p>常用API</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 保存数据到LocalStorage</span><br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>)<br><br><span class="hljs-comment">// 从LocalStorage获取数据</span><br><span class="hljs-keyword">const</span> data = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;key&quot;</span>)<br><br><span class="hljs-comment">// 从LocalStorage删除数据</span><br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&quot;key&quot;</span>)<br><br><span class="hljs-comment">// 从LocalStorage清空所有数据</span><br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">clear</span>()<br><br><span class="hljs-comment">// 获取某个索引的key</span><br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">key</span>(index)<br></code></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>存储到LocalStorage的数据key,value都必须是字符串形式,如果value不是字符串类型,那么存储到本地时会自动调用toString()方法转换为字符串类型。如果要将对象类型存储到本地,需要先调用<code>JSON.stringify()</code>方法将对象转换为字符串,读取时在调用<code>JSON.parse()</code>方法将字符串转换为对象类型</li></ul></li><li><p>使用场景</p><ul><li>有些网站有默认的换肤功能,这时可以将换肤的信息存储在本地,当需要换肤的时候,直接操作LocalStorage即可</li><li>在网站中用户浏览信息也会存储在LocalStorage中,还有网站的不常变动的个人信息也可以存储在本地的localStorage中</li></ul></li></ol><h2 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h2><blockquote><p>SessionStorage和LocalStorage都是在Html5提出的储存方案,SessionStorage主要用于临时保存同意窗口的数据,刷新页面时不会删除,但是关闭窗口之后将会删除这些数据</p></blockquote><ol><li><p>SessionStorage和localStorage的对比:</p><ul><li>两者都是在本地进行数据存储</li><li>SessionStorage也有同源策略的限制,但SessionStorage更为严格,SessionStorage只有在同一浏览器的同一窗口下才能共享</li><li>两者都无法被爬虫爬取</li></ul></li><li><p>SessionStorage常用API</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 保存数据</span><br><span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>)<br><br><span class="hljs-comment">// 获取数据</span><br><span class="hljs-keyword">const</span> data = <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;key&quot;</span>)<br><br><span class="hljs-comment">// 删除数据</span><br><span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&quot;key&quot;</span>)<br><br><span class="hljs-comment">// 清空数据</span><br><span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">clear</span>()<br><br><span class="hljs-comment">// 获取某个key的索引</span><br><span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">key</span>(index)<br></code></pre></td></tr></table></figure></li><li><p>使用场景</p></li></ol><p>由于SessionStorage具有时效性，所以可以用来存储一些网站的游客登录的信息，还有临时的浏览记录的信息。当关闭网站之后，这些信息也就随之消除了。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue小案例 - ToDoList</title>
      <link href="/2025/02/07/Vue/016Vue--Vue%E5%B0%8F%E6%A1%88%E4%BE%8B_Todo-List/"/>
      <url>/2025/02/07/Vue/016Vue--Vue%E5%B0%8F%E6%A1%88%E4%BE%8B_Todo-List/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这边站长带大家写一个Vue简单小案例,让大家能更了解组件化编码流程</p><h2 id="组件化编码流程-初学者通用"><a href="#组件化编码流程-初学者通用" class="headerlink" title="组件化编码流程(初学者通用)"></a>组件化编码流程(初学者通用)</h2><ol><li>实现静态组件:抽取组件, 使用组件实现静态页面效果</li><li>展示动态数据:<ol><li>数据的类型,名称是什么?</li><li>数据保存在哪个组件?</li></ol></li><li>交互,从绑定事件监听开始</li></ol><h2 id="创建基本的Vue框架"><a href="#创建基本的Vue框架" class="headerlink" title="创建基本的Vue框架"></a>创建基本的Vue框架</h2><ol><li>安装Vue脚手架</li><li><p>在终端输入以下命令,生成Vue基本框架</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">vue <span class="hljs-keyword">create</span> 项目名<br></code></pre></td></tr></table></figure></li><li><p>关闭语法检查</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">lintOnSave:</span><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><p>删除脚手架自带的组件,以及App内使用到组件的地方</p></li></ol><h2 id="实现静态组件"><a href="#实现静态组件" class="headerlink" title="实现静态组件"></a>实现静态组件</h2><p>按照功能将项目拆分为几个组件。其实关于拆分组件,没有标准答案,我拆四个,你拆四十个,功能动能完成,只是合不合理。从初学者到高手就是不合理到合理的过程。这边我们就拆成四个组件。</p><ol><li><code>MyHeader.vue</code>组件:添加待办事项功能</li><li><code>List.vue</code>组件:展示待办事项功能<ol><li><code>Item.vue</code>组件:单个代办事项组件,选择或删除功能</li></ol></li><li><code>MyFooter.vue</code>组件:全选功能</li></ol><p>创建以上四个组件,添加name属性为对应的名字,在App组件内引入,并且注册组件。<strong>Item组件应该是List的子组件,所以不用在App组件内引入,只需要在List内引入就行</strong></p><h3 id="App-vue组件静态页面编写"><a href="#App-vue组件静态页面编写" class="headerlink" title="App.vue组件静态页面编写"></a><code>App.vue</code>组件静态页面编写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-wrap&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyHeader</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">MyHeader</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">List</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">List</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyFooter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">MyFooter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyHeader</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/MyHeader.vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyFooter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/MyFooter.vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/List.vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">MyHeader</span>,<span class="hljs-title class_">MyFooter</span>,<span class="hljs-title class_">List</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-comment">/*base*/</span></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">body</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.btn</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">display</span>: inline-block;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span> <span class="hljs-number">12px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">vertical-align</span>: middle;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">cursor</span>: pointer;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.2</span>), <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.05</span>);</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.btn-danger</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#da4f49</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#bd362f</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.btn-danger</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#bd362f</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.btn</span><span class="hljs-selector-pseudo">:focus</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">outline</span>: none;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.todo-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.todo-container</span> <span class="hljs-selector-class">.todo-wrap</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h3 id="MyHeader-vue组件静态页面编写"><a href="#MyHeader-vue组件静态页面编写" class="headerlink" title="MyHeader.vue组件静态页面编写"></a><code>MyHeader.vue</code>组件静态页面编写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-header&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入你的任务名称，按回车键确认&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;MyHeader&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-comment">/*header*/</span></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.todo-header</span> <span class="hljs-selector-tag">input</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">width</span>: <span class="hljs-number">560px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">28px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span> <span class="hljs-number">7px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.todo-header</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">outline</span>: none;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">82</span>, <span class="hljs-number">168</span>, <span class="hljs-number">236</span>, <span class="hljs-number">0.8</span>);</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.075</span>), <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">8px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">82</span>, <span class="hljs-number">168</span>, <span class="hljs-number">236</span>, <span class="hljs-number">0.6</span>);</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="MyFooter-vue组件静态页面编写"><a href="#MyFooter-vue组件静态页面编写" class="headerlink" title="MyFooter.vue组件静态页面编写"></a><code>MyFooter.vue</code>组件静态页面编写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-footer&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>已完成0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> / 全部2</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span>&gt;</span>清除已完成任务<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;MyFooter&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-comment">/*footer*/</span></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.todo-footer</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">6px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.todo-footer</span> <span class="hljs-selector-tag">label</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">display</span>: inline-block;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">cursor</span>: pointer;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.todo-footer</span> <span class="hljs-selector-tag">label</span> <span class="hljs-selector-tag">input</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">position</span>: relative;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">top</span>: -<span class="hljs-number">1px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">vertical-align</span>: middle;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">5px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.todo-footer</span> <span class="hljs-selector-tag">button</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">float</span>: right;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="List-vue组件静态页面编写"><a href="#List-vue组件静态页面编写" class="headerlink" title="List.vue组件静态页面编写"></a><code>List.vue</code>组件静态页面编写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-main&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Item</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Item</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Item.vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;List&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">components</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">Item</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-comment">/*main*/</span></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.todo-main</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">0px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.todo-empty</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">5px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="Item-vue组件静态页面编写"><a href="#Item-vue组件静态页面编写" class="headerlink" title="Item.vue组件静态页面编写"></a><code>Item.vue</code>组件静态页面编写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>xxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Item&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-comment">/*item*/</span></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">li</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">list-style</span>: none;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">36px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">36px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">label</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">float</span>: left;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">cursor</span>: pointer;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">label</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">input</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">vertical-align</span>: middle;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">6px</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">position</span>: relative;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">top</span>: -<span class="hljs-number">1px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">button</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">float</span>: right;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">display</span>: none;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">3px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:before</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">content</span>: initial;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">border-bottom</span>: none;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="展示动态数据"><a href="#展示动态数据" class="headerlink" title="展示动态数据"></a>展示动态数据</h2><p>什么叫展示动态数据?其实就是将数据存起来,方便以后增删改查!!! <strong>其实像这种数据,一般都是使用数组对象类型储存,</strong> ,那么数据保存在哪个组件呢？这边我们就暂时先放在List组件里吧,因为是List需要使用数据嘛。</p><ol><li><p>准备数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">todos</span>:[<br>                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;抽烟&#x27;</span>,<span class="hljs-attr">done</span>:<span class="hljs-literal">true</span>&#125;,<br>                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;002&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;喝酒&#x27;</span>,<span class="hljs-attr">done</span>:<span class="hljs-literal">true</span>&#125;,<br>                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;003&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;烫头&#x27;</span>,<span class="hljs-attr">done</span>:<span class="hljs-literal">false</span>&#125;,<br>            ]<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>有了数据,我们就可以通过v-for指令,根据数据遍历每一个Item组件。<strong>这边我们还需要在Item组件内使用数据,所以需要通过<code>props属性</code>,传递数据</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-main&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Item</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todoObj in todos&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;todoObj.id&quot;</span> <span class="hljs-attr">:todo</span>=<span class="hljs-string">&quot;todoObj&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>在Item组件内使用props属性接收数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;todo&#x27;</span>],<br></code></pre></td></tr></table></figure></li><li><p>通过接收的数据,将Item内的静态页面,改为动态</p><p>这边复选框有一个技巧。首先你得知道,复选框的选择与否在于有没有<code>checked</code>属性。如果有checked属性,就是勾选状态,反之则无。那么我们怎么动态决定一个属性有没有呢?其实只需要给属性添加<code>v-bind</code>指令,后面跟表达式就可以动态决定属性是否存在了,例如:<code>:checked=&quot;true&quot;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">:checked</span>=<span class="hljs-string">&quot;todo.done&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; todo.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="添加todo-待办事项-功能"><a href="#添加todo-待办事项-功能" class="headerlink" title="添加todo(待办事项)功能"></a>添加todo(待办事项)功能</h2><h3 id="获取用户输入值"><a href="#获取用户输入值" class="headerlink" title="获取用户输入值"></a>获取用户输入值</h3><p>方式一:</p><p>  方式一其实就是通过,监听键盘回车键按下,绑定事件,触发事件后获取用户输入的值</p><ol><li><p>给input框添加回车抬起事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;请输入你的任务名称，按回车键确认&quot;</span> @keyup.<span class="hljs-property">enter</span>=<span class="hljs-string">&quot;add&quot;</span>/&gt;<br></code></pre></td></tr></table></figure></li><li><p>添加事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">add</span>(<span class="hljs-params">e</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>方式二:</p><p>方式二的本质其实是声明一个数据,然后通过<code>v-model</code>指令动态绑定数据的值,这样数据的值就是用户输入的值,这两种方法随便用哪一种</p><ol><li><p>声明数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>动态绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;请输入你的任务名称，按回车键确认&quot;</span> v-model=<span class="hljs-string">&#x27;title&#x27;</span>/&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="将输入包装为对象-放入数组"><a href="#将输入包装为对象-放入数组" class="headerlink" title="将输入包装为对象,放入数组"></a>将输入包装为对象,放入数组</h3><p>关于id:正常来说,如果咱们写的页面可以匹配服务器的话,咱们只需要将title与done传入服务器,服务器在传入数据库,由数据库来为我们生成id。但咱们没有服务器,id如何解决呢?简单点的方法就是获取当前时间的时间戳<code>Date.now()</code>为id,id其实就是一串不能重复的东西就行了。而好一点的方法就是使用<code>uuid</code><strong><em>专门用于生成全球唯一的id编码,绝对不会重复</em></strong>,这边我们使用<code>nanoid</code>,他是uuid的变种,比uuid轻便</p><h4 id="nanoid"><a href="#nanoid" class="headerlink" title="nanoid"></a>nanoid</h4><ol><li><p>安装</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i nanoid<br></code></pre></td></tr></table></figure></li><li><p>引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;nanoid&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nanoid&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 直接调用函数,就会为我们生成唯一的id</span><br><span class="hljs-title function_">nanoid</span>()<br></code></pre></td></tr></table></figure></li></ol><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><p>首先我们需要明白,我们要将数据从<code>MyHeader.vue</code>组件传递到<code>List.vue</code>组件。先前我们在Item组件内使用了List组件内的数据,是因为List与Item组件是父子组件,List组件内使用了Item标签,而现在MyHeader组件与List组件是兄弟组件,我们无法通过之前的方法传递数据,而且以目前的知识储蓄也没有别的传递数据的方法,那接下来怎们办呢?将todos数据放在<code>App.vue</code>组件上。</p><ol><li><p>将List组件上的data数据剪切到App组件上,然后通过<code>&lt;List :todos=&quot;todos&quot;&gt;&lt;/List&gt;</code>将数据传给List,在List组件内接收<code>props:[&#39;todos&#39;]</code></p></li><li><p>现在我们还需要将MyHeader内的数据传入App(子组件往父组件传数据)</p><p>要实现子组件往父组件传数据,只需要在父组件定义一个函数,然后向传数据一样,传递给子组件,既然子组件能收到函数自然可以调用,子组件只需要将数据传入函数,这样父组件也能够收到数据</p><ol><li><p>子组件内定义函数,并且将收到的数据放入数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">addTodo</span>(<span class="hljs-params">todoObj</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">unshift</span>(todoObj)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>传递函数给MyHeader组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">MyHeader</span> :addTodo=<span class="hljs-string">&quot;addTodo&quot;</span>&gt;&lt;/<span class="hljs-title class_">MyHeader</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>在MyHeader组件内接收函数并使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;addTodo&#x27;</span>],<br><span class="hljs-attr">methods</span>:&#123;<br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">e</span>)&#123;<br>        <span class="hljs-keyword">const</span> todoObj = &#123;<br>          <span class="hljs-attr">id</span>:<span class="hljs-title function_">nanoid</span>(),<br>          <span class="hljs-attr">title</span>:e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>,<br>          <span class="hljs-attr">done</span>:<span class="hljs-literal">false</span>,<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addTodo</span>(todoObj)<br>      &#125;<br>&#125;,<br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="添加后清空以及判断空值不能添加"><a href="#添加后清空以及判断空值不能添加" class="headerlink" title="添加后清空以及判断空值不能添加"></a>添加后清空以及判断空值不能添加</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">add</span>(<span class="hljs-params">e</span>)&#123;<br>  <span class="hljs-keyword">if</span>(!e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>) <span class="hljs-keyword">return</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;输入不能为空&#x27;</span>)<br><br>  <span class="hljs-keyword">const</span> todoObj = &#123;<br>    <span class="hljs-attr">id</span>:<span class="hljs-title function_">nanoid</span>(),<br>    <span class="hljs-attr">title</span>:e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>,<br>    <span class="hljs-attr">done</span>:<span class="hljs-literal">false</span>,<br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addTodo</span>(todoObj)<br>  <span class="hljs-comment">// 清空输入</span><br>  e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue插件与脚手架</title>
      <link href="/2025/01/31/Vue/018Vue--%E4%BD%BF%E7%94%A8Vue%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2025/01/31/Vue/018Vue--%E4%BD%BF%E7%94%A8Vue%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="插件基本介绍"><a href="#插件基本介绍" class="headerlink" title="插件基本介绍"></a>插件基本介绍</h3><p>插件本质其实就是一个对象,但是Vue要求这个对象必须包含<code>install</code>函数。</p><ol><li><p>创建插件<br>创建<code>plugins.js</code>文件夹,用于存放插件,<code>install</code>函数是必写的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 插件文件</span><br><span class="hljs-comment">// 创建插件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">install</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p> <code>install()</code>方法,install的第一个参数是Vue,后面的参数,为vue使用者传递的数据。可以通过Vue为组件添加全局过滤器,全局指令,配置全局混入以及给Vue原型上添加方法</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">install</span>(<span class="hljs-params">Vue</span>)&#123;<br>    <span class="hljs-comment">// 全局过滤器 </span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(...)<br><br>    <span class="hljs-comment">// 全局自定义指令</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(...)<br><br>    <span class="hljs-comment">// 混入</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixins</span>(...)<br><br>    <span class="hljs-comment">// 给Vue原型上添加方法</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hello</span> = <span class="hljs-function">()=&gt;</span>&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello world&#x27;</span>)&#125;<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p>在入口文件中,引入插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> plugins <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./plugins&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>在创建vm之前,使用插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(plugins)<br></code></pre></td></tr></table></figure></li></ol><h3 id="初始化脚手架"><a href="#初始化脚手架" class="headerlink" title="初始化脚手架"></a>初始化脚手架</h3><p>使用工具:</p><ul><li>Node.js(记得配置以下npm淘宝镜像)</li></ul><h4 id="声明"><a href="#声明" class="headerlink" title="声明:"></a>声明:</h4><ol><li><del>Vue脚手架是Vue官方提供的标准化开发工具(开发平台)</del><ul><li>目前Vite才是Vue官方的首推，而且我本人也感觉Vite更好用(<span style="color:red;">2025/5/30 17:16:00</span>)</li></ul></li><li>vue@cli目前版本:4x(目前vue官方推荐使用Vite脚手架)</li><li>文档:<a href="https://cn.vuejs.org/guide/scaling-up/tooling.html#vite">https://cn.vuejs.org/guide/scaling-up/tooling.html#vite</a></li></ol><h4 id="安装Vue-CLI脚手架"><a href="#安装Vue-CLI脚手架" class="headerlink" title="安装Vue@CLI脚手架"></a>安装Vue@CLI脚手架</h4><ol><li><p>执行以下命令,全局安装<code>vue@cli脚手架</code></p> <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g @vue/cli<br></code></pre></td></tr></table></figure><p> 安装完之后,关闭终端,重新打开终端,输入<code>vue</code>运行,显示一些指令,说明安装成功</p></li><li><p>切换到需要创建项目的目录,运行以下命令创建脚手架/项目</p> <figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">vue</span> <span class="hljs-variable">create</span> <span class="hljs-function"><span class="hljs-title">xxxx</span>(项目名)</span><br></code></pre></td></tr></table></figure></li><li><p>选择需要用到的Vue版本</p><ol><li>这边看自己用的vue是什么版本,我这边用的是vue2<ul><li>babel:用于<code>ES6</code>代码语法转<code>ES5</code></li><li>eslint:用于语法检查</li></ul></li><li>选择好后,回车执行命令<br> 如果这个过程持续很长时间十几分钟,就检查以下重新配置npm淘宝镜像。一方面取决于所处位置的网速,另一方面其实也取决于电脑配置,只要不是特别特别老的二战老电脑,其实都可以运行</li><li>创建好之后,可以看到一个<code>xxxx</code>的文件夹说明创建成功了</li></ol></li><li><p>启动项目</p><ol><li>进入创建好的项目 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> xxxx<br></code></pre></td></tr></table></figure></li><li>启动项目 <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> serve<br></code></pre></td></tr></table></figure></li><li>等待完成之后,可以看到vue给我们开启了一个本地服务器,在浏览器打开就能看见我们的项目了</li><li>按<code>CTRL</code> + <code>C</code>停止项目</li></ol></li></ol><h3 id="分析脚手架结构"><a href="#分析脚手架结构" class="headerlink" title="分析脚手架结构"></a>分析脚手架结构</h3><ol><li>配置文件<ol><li><code>.gitignore</code>文件,git的忽略文件,哪些文件不想接受git的管理,配置在此</li><li><code>babel.config.js</code>文件,babel配置文件,用于ES6 ==&gt; ES5,Vue已经配置好了,不需要我们配置什么</li><li><code>package-lock.json</code>和<code>package.json</code>文件,包版本控制文件和包的说明书</li><li><code>README.md</code>文件:项目说明文件</li></ol></li><li>src文件夹<ol><li><code>main.js</code>文件:入口文件,当执行<code>npm run serve</code>,首先运行的文件,里面会进行:<ol><li>引入vue</li><li>引入App组件,是所有组件的父组件</li><li>关闭vue的生产提示</li><li>创建vue实例对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 该文件是整个项目的入口文件</span><br><br><span class="hljs-comment">// 引入vue</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-comment">// 引入App组件,它是所有组件的父组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-comment">// 关闭vue的生产提示</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">// 创建vue实例</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-comment">// 将App组件放入容器中</span><br><span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure></li></ol></li><li><code>App.vue</code>文件,父组件文件,管理所有子组件<ol><li>里面会引入其他组件</li></ol></li><li><code>assets</code>文件夹,静态资源文件夹</li><li><code>components</code>文件夹,存放所有<code>.vue</code>文件,除了App.vue以外</li></ol></li><li>public文件夹<ol><li><code>favicon.ico</code>:页面图标</li><li><code>index.html</code>:整个应用的页面<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 整队IE浏览器的特殊配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span>、<br>    <span class="hljs-comment">&lt;!-- 开启移动端的理想视口 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 图标 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置网页标题 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 当浏览器不支持js时,渲染以下字符串 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">noscript</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">noscript</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 容器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- built files will be auto injected --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><code>node_modules</code>文件夹<ol><li>包文件夹</li></ol></li></ol><h3 id="main-js中的render函数"><a href="#main-js中的render函数" class="headerlink" title="main.js中的render函数"></a><code>main.js</code>中的render函数</h3><p>当我们引入一个残缺的vue时,需要使用redder函数去渲染我们的页面</p><p>render函数可以接受一个参数(createElement):意为创建元素<br>createElement也是一个函数,它能创建具体元素编写具体内容</p><h3 id="关闭语法检车"><a href="#关闭语法检车" class="headerlink" title="关闭语法检车"></a>关闭语法检车</h3><p>在<code>vue.config.js</code>的defineConfig配置项中配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">lintOnSave</span>:<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关于不同版本的vue:</p><ul><li>vue.js与vue.runtime.js的区别<ol><li>vue.js是完整版的,包含:核心功能+模板解析器</li><li>vue.runtime.js是运行版本,只包含核心功能</li></ol></li><li>因为vue.runtime.xxx.js没有模板解析器,不能使用template配置项,需要render函数收到的createElement函数去指定具体内容</li></ul><h3 id="使用Vite创建Vue项目"><a href="#使用Vite创建Vue项目" class="headerlink" title="使用Vite创建Vue项目"></a>使用Vite创建Vue项目</h3><p>目前Vite才是官方首推，创建Vue项目我们直接使用Vite就好</p><ol><li><p>打开终端输入以下指令，创建项目：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm create vite@latest<br></code></pre></td></tr></table></figure></li><li><p>输入项目名：demo</p></li><li><p>选择框架(Select a framework:)：Vue</p></li><li><p>选择一个模板(Select a variant:)：一般选JavaScript就好</p></li><li><p>进入项目</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> demo<br></code></pre></td></tr></table></figure></li><li><p>安装依赖：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure></li><li><p>启动项目：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run dev<br></code></pre></td></tr></table></figure></li></ol><p>进入浏览器访问相应的路径即可，Vite默认占用端口号为：5173<br>自此我们的Vue项目就创建完毕了，Vite中有许多自带的样式，不喜欢可以删掉</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件化编程</title>
      <link href="/2025/01/27/Vue/015Vue--Vue%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
      <url>/2025/01/27/Vue/015Vue--Vue%E7%BB%84%E4%BB%B6%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="对组件化的理解"><a href="#对组件化的理解" class="headerlink" title="对组件化的理解"></a>对组件化的理解</h3><ol><li><p>什么是组件?<br>实现一个应用中局部功能的代码,资源的集合</p></li><li><p>组件与传统模式编程的区别</p><ul><li><p>传统模式编写应用<br><img src="https://pic1.imgdb.cn/item/679ca3c8d0e0a243d4f8c376.pngs" alt="传统模式编写应用"></p></li><li><p>组件化编程<br><img src="https://pic1.imgdb.cn/item/679ca3d3d0e0a243d4f8c377.pngs" alt="组件化编程"><br>将实现一块功能的所有代码,资源封装在同一个组件中,该组件只服务于此功能,别的区域想使用同样功能,只需引入即可,组件内可以嵌套。<br><img src="https://pic1.imgdb.cn/item/679ca3d6d0e0a243d4f8c379.png" alt="组件化编程"></p></li></ul></li><li><p>组件化的优势</p><ol><li>便于维护</li><li>代码复用率高</li></ol></li></ol><h4 id="浅存的问题"><a href="#浅存的问题" class="headerlink" title="浅存的问题!"></a>浅存的问题!</h4><ol><li>依赖关系混乱,不太好维护</li><li>代码的复用率并不高,有些时候需要我们手动复制。JS 内专门有一个叫模块化的技术处理此问题,但它只针对 js。</li></ol><h3 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h3><ol><li>创建非单文件组件,需要用<code>Vue.extend()</code>API,然后传入一个配置对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建非单文件组件</span><br><span class="hljs-keyword">const</span> school = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;<br>  <span class="hljs-comment">// 结构</span><br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">            &lt;div&gt;</span><br><span class="hljs-string">                &lt;h3&gt;&#123;&#123;name&#125;&#125;&lt;/h3&gt;</span><br><span class="hljs-string">                &lt;h3&gt;&#123;&#123;address&#125;&#125;&lt;/h3&gt;</span><br><span class="hljs-string">                &lt;button @click=&quot;hello&quot;&gt;点我打招呼&lt;/button&gt;</span><br><span class="hljs-string">            &lt;/div&gt;</span><br><span class="hljs-string">        `</span>,<br>  <span class="hljs-comment">// 数据</span><br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;制造&quot;</span>,<br>      <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;江西&quot;</span>,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">hello</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;,<br>  &#125;,<br>&#125;);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#root&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>Vue.extend()内需要写一个配置项,配置项的写法几乎与 vm 一致</p><ol><li>配置项内不需要写<code>el</code>属性,因为组件没有确定服务对象</li><li>配置项内的<code>data</code>需要写成函数式,返回值为想要的对象</li><li><p><code>template</code>是模板,结构需要放在模板内,并且只能有一个根元素</p></li><li><p>注册组件<br>注册组件需要在 vm 内添加新配置项,<code>components</code>,配置项为对象型,key 对应真正的组件名,值对应之前的组件名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#root&quot;</span>,<br>  <span class="hljs-comment">// 2.注册组件（局部注册）</span><br>  <span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-comment">// 组件名:组件变量</span><br>    school,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>全局注册</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;school&quot;</span>.<span class="hljs-property">hello</span>);<br></code></pre></td></tr></table></figure></li><li><p>使用组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 组件标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">school</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">school</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>总结</p><ul><li>Vue 中使用组件的三大步骤<ol><li>创建组件</li><li>注册组件</li><li>使用组件</li></ol></li><li>如何定义一个组件<br>使用<code>Vue.extend(options)</code>创建组件,其中 options 与<code>new Vue(options)</code>传入的 options 几乎一样<br>区别如下:<ol><li>el 不用写,最终所有的组件都要经过 vm 管理,由 vm 决定服务于哪个容器</li><li>data 必须写成函数式,避免组件被复用时数据存在引用关系<br><strong><em>使用 template 可以配置组件结构</em></strong></li></ol></li><li>如何注册组件<ol><li>局部注册:靠<code>new Vue</code>时配置<code>components</code>配置项</li><li>全局注册:靠<code>Vue,component(&#39;组件名&#39;,组件)</code></li></ol></li><li>编写组件标签<br>&lt;组件名&gt;&lt;/组件名&gt;</li></ul></li></ol><h3 id="关于组件的几个注意点"><a href="#关于组件的几个注意点" class="headerlink" title="关于组件的几个注意点!"></a>关于组件的几个注意点!</h3><ol><li>组件名的写法:<ul><li>一个单词组成 — 建议纯小写</li><li>多个单词组成:<ol><li>使用横杠连接: ‘my-school’</li><li>每个单词首字母大写: ‘MySchool’ <code>前提:需要脚手架</code></li></ol></li></ul></li><li>定义组件的简写方式<ul><li>const comp = options</li></ul></li></ol><h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><p>组件内依然可以配置<code>components</code>配置项</p><p>实际开发中,我们会配置一个 app 组件,由 vm 管理 app,由 app 管理所有其他组件,这样开发更有助于管理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        // 定义学生组件</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        const zhangs = &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            template: `</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>学生信息<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>学生:</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>年龄:</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">age</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            `,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            data()&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                return &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                    name: &#x27;张三&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                    age: &#x27;20&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        // 定义学校组件</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        const school = &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            template: `</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>学校信息<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>学校名:</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>地址:</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">address</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            `,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            data()&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                return &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                    name:&#x27;现代&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                    address:&#x27;江西&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            components:&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                &#x27;student&#x27;:zhangs</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        // 定义打招呼组件</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        const hello = &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            template: `</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            `,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        // 定义app组件</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        const app = &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            template:`</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">hello</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">school</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">school</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            `,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            components:&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                school,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                hello</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        Vue.config.productionTip = false</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        new Vue(&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#123;/* 使用app组件 */&#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            template:`<span class="hljs-tag">&lt;<span class="hljs-name">app</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app</span>&gt;</span>`,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            el:&#x27;#root&#x27;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            &#123;/* 注册app组件 */&#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            components:&#123;app&#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;)</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="关于-VueComponent"><a href="#关于-VueComponent" class="headerlink" title="关于 VueComponent"></a>关于 VueComponent</h3><ol><li>school 组件是什么?<ul><li>school 本质就是一个函数,并且是一个构造函数,是由 Vue.extend()生成的.</li></ul></li><li>当我们写组件标签时,vue 就会帮我们生成组件标签的实例对象</li><li>每次调用 Vue.extend()返回值都是一个全新的<code>VueComponent</code>!!!</li><li>关于 this 指向问题<ul><li>组件中:this 指向<code>Vue Component</code>实例对象</li><li>new Vue()中:this 指向 Vue 实例对象</li></ul></li><li>VueComponent 实例对象,简称 vc/组件实例对象,Vue 实例对象,简称 vm</li></ol><h3 id="一个重要的内置关系"><a href="#一个重要的内置关系" class="headerlink" title="一个重要的内置关系"></a>一个重要的内置关系</h3><p>VueComponent.prototype.<strong>proto</strong> === Vue.prototype,这个关系可以使组件实例对象(vc)可以访问到 Vue 原型上的属性方法。<br><strong><em>实例隐性原型属性,永远指向自己缔造者的原型对象</em></strong><br><img src="https://pic1.imgdb.cn/item/679ca4cdd0e0a243d4f8c391.png" alt="隐性原型属性"></p><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><ol><li>Vue 单文件组件需要使用<code>.vue</code>作为后缀,一个文件便是一个组件</li><li>Vue 单文件组件类似于.less,浏览器无法直接解析,需要借助外部工具加工<ul><li>webpack 工具(比较麻烦)</li><li>Vue 官方提供的脚手架</li></ul></li><li><p>单文件组件内首先需要写三个标签</p><ul><li>template — 结构标签</li><li>script — 脚本标签 </li><li>style — 样式标签</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;!-- 单文件组件School --&gt;<br>&lt;!-- 三个标签 --&gt;<br>&lt;template&gt;<br>&lt;!-- 结构标签 --&gt;<br>&lt;div class=&quot;dome&quot;&gt;<br>    &lt;h2&gt;学校名称:&#123;&#123; name &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;学校名称:&#123;&#123; address &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;showName&quot;&gt;点我显示学校名&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 脚本标签<br>    // 创建组件<br>    const school = Vue.extend(&#123;<br>        name:&#x27;School&#x27;,<br>        data:&#123;<br>            name:&#x27;现代&#x27;,<br>            address:&#x27;江西&#x27;,<br>        &#125;,<br>        methods:&#123;<br>            showName()&#123;<br>                alert(this.name)<br>            &#125;<br>        &#125;<br>    &#125;)<br><br>    // 暴露组件<br>    export &#123;school&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>/* 样式标签 */<br>.dome&#123;<br>    background: orange;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>组件写完以后,需要使用 import 暴露出去</p></li><li><p>创建<code>App.vue</code>文件,管理所有的组件</p></li><li>创建<code>main.js</code>文件,作为 vue 的入口文件,在里面导入<code>App.vue</code>并且,创建 Vue 实例对象(vm)</li><li>创建<code>index.html</code>文件,页面文件,准备 Vue 容器</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法</title>
      <link href="/2025/01/21/MarkDown/MarkDown/"/>
      <url>/2025/01/21/MarkDown/MarkDown/</url>
      
        <content type="html"><![CDATA[<p>Markdown 语法是一种轻量级标记语言，旨在用简洁的符号为文本添加结构化格式，使其易读易写，同时可轻松转换为 HTML 等格式。在许多博客或者网站文章发布方面，都会使用MarkDown语法。</p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>一级最大，六级最小</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><br><span class="hljs-section">## 二级标题</span><br><span class="hljs-section">### 三级标题</span><br><span class="hljs-section">#### 四级标题</span><br><span class="hljs-section">##### 五级标题</span><br><span class="hljs-section">###### 六级标题</span><br></code></pre></td></tr></table></figure><h1 id="段落与换行"><a href="#段落与换行" class="headerlink" title="段落与换行"></a>段落与换行</h1><ul><li>段落：文本连续输入即可，段落间用空行分隔。</li><li>换行：句尾加两个或多个空格，再按回车键，或用 HTML中的 <code>&lt;br&gt;</code> 标签。</li></ul><h1 id="行内文本样式"><a href="#行内文本样式" class="headerlink" title="行内文本样式"></a>行内文本样式</h1><div class="table-container"><table><thead><tr><th>样式</th><th>语法</th><th>效果</th></tr></thead><tbody><tr><td>加粗</td><td><code>**文本**</code>或者<code>__文本__</code></td><td><strong>加粗文本</strong></td></tr><tr><td>斜体</td><td><code>*斜体文本*</code>或<code>_斜体文本_</code></td><td><em>斜体文本</em></td></tr><tr><td>斜体加粗</td><td><code>***斜体加粗文本***</code>或<code>___斜体加粗文本___</code></td><td><strong><em>斜体加粗文本</em></strong></td></tr><tr><td>删除线</td><td><code>~~删除线文本~~</code></td><td><del>删除线文本</del></td></tr><tr><td>下划线</td><td><code>&lt;u&gt;下划线文本&lt;/u&gt;</code></td><td><u>下划线文本</u></td></tr></tbody></table></div><h1 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h1><p>效果：</p><ol><li>Java</li><li>JavaScript</li><li>Python</li><li>C++</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> Java<br><span class="hljs-bullet">2.</span> JavaScript<br><span class="hljs-bullet">3.</span> Python<br><span class="hljs-bullet">4.</span> C++<br></code></pre></td></tr></table></figure><h1 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h1><p>用 -、* 或 + 开头，后接空格。</p><p>效果：</p><ul><li>Java</li><li>JavaScript<ul><li>Node.js</li><li>Vue.js</li></ul></li><li>Python</li><li>C++</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Java<br><span class="hljs-bullet">-</span> JavaScript<br><span class="hljs-bullet">    -</span> Node.js<br><span class="hljs-bullet">    -</span> Vue.js<br><span class="hljs-bullet">-</span> Python<br><span class="hljs-bullet">-</span> C++<br></code></pre></td></tr></table></figure><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>语法：<code>[链接文字](网址 &quot;提示文本&quot;)</code></p><p>效果：去找<a href="https://doubao.com">豆包</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">去找[<span class="hljs-string">豆包</span>](<span class="hljs-link">https://doubao.com</span>)<br></code></pre></td></tr></table></figure><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>语法：<code>![图片描述](图片链接地址)</code></p><p>比如：</p><p><img src="https://tuch.xiaohuzg.xyz/img/Home.webp" alt="网站首页图片"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">网站首页图片</span>](<span class="hljs-link">https://tuch.xiaohuzg.xyz/img/Home.webp</span>)<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>语法：<code>&gt; 引用内容</code>(可以嵌套多个<code>&gt;</code>)</p><p>比如：</p><blockquote><p>这是一个引用</p><blockquote><p>这是一个嵌套的引用</p></blockquote></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 这是一个引用</span><br><span class="hljs-quote">&gt; &gt; 这是一个嵌套的引用</span><br></code></pre></td></tr></table></figure><h1 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h1><p>语法：<code>代码内容</code></p><p>比如：</p><p><code>print(&quot;Hello, World!&quot;)</code>是一个行内代码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">`print(&quot;Hello, World!&quot;)`</span>是一个行内代码<br></code></pre></td></tr></table></figure><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>语法：</p><p>使用```包裹代码，并且可以指定代码语言</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">```Python</span><br><span class="hljs-code">print(&quot;Hello, World!&quot;);</span><br><span class="hljs-code">\```</span><br><br>\ 符号去掉<br></code></pre></td></tr></table></figure><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>用 | 分隔列，用 - 和 : 定义对齐方式，默认左对齐，:—- 右对齐，:-: 居中</p><p>比如：</p><div class="table-container"><table><thead><tr><th>姓名</th><th style="text-align:right">年龄</th><th style="text-align:center">性别</th></tr></thead><tbody><tr><td>张三</td><td style="text-align:right">20</td><td style="text-align:center">男</td></tr><tr><td>李四</td><td style="text-align:right">21</td><td style="text-align:center">男</td></tr></tbody></table></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| 姓名 | 年龄 | 性别 |<br>| --- | ---: | :---: |<br>| 张三 | 20 | 男 |  <br>| 李四 | 21 | 男 |  <br></code></pre></td></tr></table></figure><h1 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h1><p>用 —-、<em>*</em> 或 <em>_</em>，需单独一行，前后空行</p><p>比如：</p><hr><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br></code></pre></td></tr></table></figure><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><p>若需显示原始符号（如 #、* 等），在符号前加 \。</p><p>比如：</p><p>.<br>*</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">\.<br>\<span class="hljs-emphasis">*</span><br></code></pre></td></tr></table></figure><h1 id="内置Html标签"><a href="#内置Html标签" class="headerlink" title="内置Html标签"></a>内置Html标签</h1><p>Markdown 语法可以内置一些常用的Html标签</p><p>比如：</p><p>红色字体：<span style="color:red">red text</span></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span>&gt;</span></span>红色字体<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><p>脚注是一种特殊的注释，可以为文本添加脚注，并在文本中引用。脚注默认在文章左下方显示</p><p>语法：<code>[^footnote]</code></p><p>比如：</p><p>脚注：<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="脚注是一种特殊的注释，可以为文本添加脚注，并在文本中引用。">[1]</span></a></sup></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">脚注：[^1]<br><br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">脚注是一种特殊的注释，可以为文本添加脚注，并在文本中引用。</span><br></code></pre></td></tr></table></figure><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>脚注是一种特殊的注释，可以为文本添加脚注，并在文本中引用。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
